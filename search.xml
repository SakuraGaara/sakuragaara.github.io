<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>k8s局部应用</title>
      <link href="/2020/05/21/2020-05-21-k8s%E5%B1%80%E9%83%A8%E5%BA%94%E7%94%A8/"/>
      <url>/2020/05/21/2020-05-21-k8s%E5%B1%80%E9%83%A8%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>一个完成的Deployment</p><h4 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h4><p>当Pod中的目录，映射到宿主机时<br><a href="https://github.com/SakuraGaara/alpha/blob/master/alpha-deploy-dev.yaml#L33-L36" target="_blank" rel="noopener">https://github.com/SakuraGaara/alpha/blob/master/alpha-deploy-dev.yaml#L33-L36</a><br><a href="https://github.com/SakuraGaara/alpha/blob/master/alpha-deploy-dev.yaml#L63-L66" target="_blank" rel="noopener">https://github.com/SakuraGaara/alpha/blob/master/alpha-deploy-dev.yaml#L63-L66</a></p><h4 id="pv和pvc的使用"><a href="#pv和pvc的使用" class="headerlink" title="pv和pvc的使用"></a>pv和pvc的使用</h4><p>PersistentVolume定义一个volume，PersistentVolumeClaim则应用这个volume，提供给pod使用</p><ul><li>创建pv和pvc<br><a href="https://github.com/SakuraGaara/alpha/blob/master/pv-www-dev.yaml" target="_blank" rel="noopener">https://github.com/SakuraGaara/alpha/blob/master/pv-www-dev.yaml</a><br><a href="https://github.com/SakuraGaara/alpha/blob/master/pvc-www-dev.yaml" target="_blank" rel="noopener">https://github.com/SakuraGaara/alpha/blob/master/pvc-www-dev.yaml</a></li><li>应用pvc<br><a href="https://github.com/SakuraGaara/alpha/blob/master/base-deploy-dev.yaml#L52-L54" target="_blank" rel="noopener">https://github.com/SakuraGaara/alpha/blob/master/base-deploy-dev.yaml#L52-L54</a><br><a href="https://github.com/SakuraGaara/alpha/blob/master/base-deploy-dev.yaml#L34-L35" target="_blank" rel="noopener">https://github.com/SakuraGaara/alpha/blob/master/base-deploy-dev.yaml#L34-L35</a></li></ul><h4 id="imagePullSecrets"><a href="#imagePullSecrets" class="headerlink" title="imagePullSecrets"></a>imagePullSecrets</h4><p>私有镜像拉取,需要账号密码,可通过secret保存</p><ul><li>创建secret<pre class=" language-sh"><code class="language-sh">kubectl create secret -n dev docker-registry ali-secret \  --docker-username=xxxx@163.com \  --docker-server=registry.cn-hangzhou.aliyun.com \  --docker-password=xxxxxx</code></pre></li><li>应用secret<br><a href="https://github.com/SakuraGaara/alpha/blob/master/base-deploy-dev.yaml#L27-L28" target="_blank" rel="noopener">https://github.com/SakuraGaara/alpha/blob/master/base-deploy-dev.yaml#L27-L28</a></li></ul><h4 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h4><p>有时候需要往Pod中添加一些配置，比如nginx.conf,则可以使用configmap</p><ul><li>创建一个名为nginx-etc的配置文件<pre class=" language-sh"><code class="language-sh">kubectl create configmap -n dev nginx-etc --from-file conf/nginx.conf</code></pre></li><li>应用<br><a href="https://github.com/SakuraGaara/alpha/blob/master/base-deploy-dev.yaml#L55-L57" target="_blank" rel="noopener">https://github.com/SakuraGaara/alpha/blob/master/base-deploy-dev.yaml#L55-L57</a><br><a href="https://github.com/SakuraGaara/alpha/blob/master/base-deploy-dev.yaml#L36-L38" target="_blank" rel="noopener">https://github.com/SakuraGaara/alpha/blob/master/base-deploy-dev.yaml#L36-L38</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> kubeadm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubeadm安装</title>
      <link href="/2020/05/21/2020-05-21-kubeadm%E5%AE%89%E8%A3%85/"/>
      <url>/2020/05/21/2020-05-21-kubeadm%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="环境介绍："><a href="#环境介绍：" class="headerlink" title="环境介绍："></a>环境介绍：</h3><p>192.168.1.20 k8s-master<br>192.168.1.21 k8s-node01<br>192.168.1.22 k8s-node02</p><h3 id="安装前配置"><a href="#安装前配置" class="headerlink" title="安装前配置"></a>安装前配置</h3><h4 id="主机网络桥接设置"><a href="#主机网络桥接设置" class="headerlink" title="主机网络桥接设置"></a>主机网络桥接设置</h4><pre class=" language-sh"><code class="language-sh">cat /proc/sys/net/bridge/bridge-nf-call-ip6tables  1  cat /proc/sys/net/bridge/bridge-nf-call-iptables  1</code></pre><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><pre><code>systemctl disable firewalld;systemctl stop firewalld;systemctl status firewalld;setenforce 0;sed -i &#39;s/SELINUX=enforcing/SELINUX=disabled/g&#39; /etc/selinux/config;sed -i &#39;s/SELINUX=permissive/SELINUX=disabled/g&#39; /etc/selinux/config;</code></pre><h4 id="准备Docker源"><a href="#准备Docker源" class="headerlink" title="准备Docker源"></a>准备Docker源</h4><pre class=" language-sh"><code class="language-sh">cd ; wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -P /etc/yum.repos.d/  yum list docker-ce --showduplicates |sort -r</code></pre><h4 id="添加kubernetes源"><a href="#添加kubernetes源" class="headerlink" title="添加kubernetes源"></a>添加kubernetes源</h4><pre class=" language-sh"><code class="language-sh">(cat << EOF  [kubernetes]name=Kubernetes repobaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/gpgcheck=0gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpgenabled=1 EOF) > /etc/yum.repos.d/kubernetes.repowget https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg  wget https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg  rpm --import yum-key.gpg  rpm --import rpm-package-key.gpg  yum repolist  </code></pre><h3 id="安装所需软件"><a href="#安装所需软件" class="headerlink" title="安装所需软件"></a>安装所需软件</h3><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><pre class=" language-sh"><code class="language-sh">yum install docker-ce</code></pre><h4 id="配置docker"><a href="#配置docker" class="headerlink" title="配置docker"></a>配置docker</h4><pre class=" language-sh"><code class="language-sh">mkdir /etc/dockercat > /etc/docker/daemon.json << EOF{"registry-mirrors": ["https://dlbpv56y.mirror.aliyuncs.com"],"exec-opts":["native.cgroupdriver=systemd"]}EOFsystemctl daemon-reloadsystemctl start dockersystemctl enable docker;systemctl status docker</code></pre><h4 id="安装kuberneres"><a href="#安装kuberneres" class="headerlink" title="安装kuberneres"></a>安装kuberneres</h4><pre class=" language-sh"><code class="language-sh">cat > /etc/sysctl.d/k8s.conf << EOFnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1EOFyum install kubelet-1.18.2-0.x86_64 kubeadm-1.18.2-0.x86_64 kubectl-1.18.2-0.x86_64 # kubectl只需要master上安装即可systemctl daemon-reloadsystemctl enable kubelet;systemctl restart kubelet;systemctl status kubelet;</code></pre><p>systemctl stop kubelet;systemctl daemon-reload;yum remove kubelet kubeadm kubectl;rm -rf /etc/kubernetes</p><h3 id="初始化kubernetes集群"><a href="#初始化kubernetes集群" class="headerlink" title="初始化kubernetes集群"></a>初始化kubernetes集群</h3><h4 id="master节点"><a href="#master节点" class="headerlink" title="master节点"></a>master节点</h4><pre class=" language-sh"><code class="language-sh">kubeadm init \--apiserver-advertise-address=192.168.1.20 \--image-repository registry.aliyuncs.com/google_containers \--kubernetes-version v1.18.2 \--service-cidr=10.96.0.0/12 \--pod-network-cidr=10.244.0.0/16</code></pre><p>返回以下命令则成功初始化</p><pre><code>mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config......kubeadm join 192.168.1.20:6443 --token l6blwp.bjaf3h4t4dhqd7b5 \    --discovery-token-ca-cert-hash sha256:1a2bdbe8dd7d17663f1b4aabf50402ce186b049d9277f406f63d509de63b34d3</code></pre><p>在master上执行以下命令配置</p><pre class=" language-sh"><code class="language-sh">mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config</code></pre><p>可通过<code>kubectl get node</code>查看节点只有master,并且为NotReady状态</p><h4 id="Node节点加入集群"><a href="#Node节点加入集群" class="headerlink" title="Node节点加入集群"></a>Node节点加入集群</h4><pre class=" language-sh"><code class="language-sh">kubeadm join 192.168.1.20:6443 --token l6blwp.bjaf3h4t4dhqd7b5 \    --discovery-token-ca-cert-hash sha256:1a2bdbe8dd7d17663f1b4aabf50402ce186b049d9277f406f63d509de63b34d3</code></pre><p>加入成功，提示<code>kubectl get node</code>的命令<br>此时在master上查看节点，则会多出node节点，并且全部为NotReady状态（因为没有网络的支持）</p><h4 id="所有节点添加网络插件"><a href="#所有节点添加网络插件" class="headerlink" title="所有节点添加网络插件"></a>所有节点添加网络插件</h4><pre class=" language-sh"><code class="language-sh">kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"</code></pre><h3 id="安装ingress"><a href="#安装ingress" class="headerlink" title="安装ingress"></a>安装ingress</h3><p>ingress配置文件下载: <a href="https://github.com/kubernetes/ingress-nginx/releases" target="_blank" rel="noopener">https://github.com/kubernetes/ingress-nginx/releases</a><br>image可替换为阿里云：</p><pre><code>registry.aliyuncs.com/google_containers/nginx-ingress-controller:0.30.0</code></pre><p>ingress-service.yaml </p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> LoadBalancer  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> http    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> https    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">443</span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">443</span>    <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">443</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx</code></pre><p>mandatory.yaml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Namespace<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>configuration  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> tcp<span class="token punctuation">-</span>services  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> udp<span class="token punctuation">-</span>services  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>serviceaccount  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>clusterrole  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">""</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> configmaps      <span class="token punctuation">-</span> endpoints      <span class="token punctuation">-</span> nodes      <span class="token punctuation">-</span> pods      <span class="token punctuation">-</span> secrets    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> list      <span class="token punctuation">-</span> watch  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">""</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> nodes    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> get  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">""</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> services    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> get      <span class="token punctuation">-</span> list      <span class="token punctuation">-</span> watch  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">""</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> events    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> create      <span class="token punctuation">-</span> patch  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"extensions"</span>      <span class="token punctuation">-</span> <span class="token string">"networking.k8s.io"</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ingresses    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> get      <span class="token punctuation">-</span> list      <span class="token punctuation">-</span> watch  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"extensions"</span>      <span class="token punctuation">-</span> <span class="token string">"networking.k8s.io"</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ingresses/status    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> update<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Role<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>role  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">""</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> configmaps      <span class="token punctuation">-</span> pods      <span class="token punctuation">-</span> secrets      <span class="token punctuation">-</span> namespaces    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> get  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">""</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> configmaps    <span class="token key atrule">resourceNames</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># Defaults to "&lt;election-id>-&lt;ingress-class>"</span>      <span class="token comment" spellcheck="true"># Here: "&lt;ingress-controller-leader>-&lt;nginx>"</span>      <span class="token comment" spellcheck="true"># This has to be adapted if you change either parameter</span>      <span class="token comment" spellcheck="true"># when launching the nginx-ingress-controller.</span>      <span class="token punctuation">-</span> <span class="token string">"ingress-controller-leader-nginx"</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> get      <span class="token punctuation">-</span> update  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">""</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> configmaps    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> create  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">""</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> endpoints    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> get<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> RoleBinding<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>role<span class="token punctuation">-</span>nisa<span class="token punctuation">-</span>binding  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io  <span class="token key atrule">kind</span><span class="token punctuation">:</span> Role  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>role<span class="token key atrule">subjects</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount    <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>serviceaccount    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRoleBinding<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>clusterrole<span class="token punctuation">-</span>nisa<span class="token punctuation">-</span>binding  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io  <span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>clusterrole<span class="token key atrule">subjects</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount    <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>serviceaccount    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>controller  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx      <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx        <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx      <span class="token key atrule">annotations</span><span class="token punctuation">:</span>        <span class="token key atrule">prometheus.io/port</span><span class="token punctuation">:</span> <span class="token string">"10254"</span>        <span class="token key atrule">prometheus.io/scrape</span><span class="token punctuation">:</span> <span class="token string">"true"</span>    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># wait up to five minutes for the drain of connections</span>      <span class="token key atrule">terminationGracePeriodSeconds</span><span class="token punctuation">:</span> <span class="token number">300</span>      <span class="token key atrule">serviceAccountName</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>serviceaccount      <span class="token key atrule">hostNetwork</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">nodeSelector</span><span class="token punctuation">:</span>        <span class="token key atrule">kubernetes.io/os</span><span class="token punctuation">:</span> linux      <span class="token key atrule">containers</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>controller          <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.aliyuncs.com/google_containers/nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>controller<span class="token punctuation">:</span>0.30.0          <span class="token key atrule">args</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> /nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>controller            <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>configmap=$(POD_NAMESPACE)/nginx<span class="token punctuation">-</span>configuration            <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>tcp<span class="token punctuation">-</span>services<span class="token punctuation">-</span>configmap=$(POD_NAMESPACE)/tcp<span class="token punctuation">-</span>services            <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>udp<span class="token punctuation">-</span>services<span class="token punctuation">-</span>configmap=$(POD_NAMESPACE)/udp<span class="token punctuation">-</span>services            <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>publish<span class="token punctuation">-</span>service=$(POD_NAMESPACE)/ingress<span class="token punctuation">-</span>nginx            <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>annotations<span class="token punctuation">-</span>prefix=nginx.ingress.kubernetes.io          <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>            <span class="token key atrule">allowPrivilegeEscalation</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>            <span class="token key atrule">capabilities</span><span class="token punctuation">:</span>              <span class="token key atrule">drop</span><span class="token punctuation">:</span>                <span class="token punctuation">-</span> ALL              <span class="token key atrule">add</span><span class="token punctuation">:</span>                <span class="token punctuation">-</span> NET_BIND_SERVICE            <span class="token comment" spellcheck="true"># www-data -> 101</span>            <span class="token key atrule">runAsUser</span><span class="token punctuation">:</span> <span class="token number">101</span>          <span class="token key atrule">env</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> POD_NAME              <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>                <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>                  <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> metadata.name            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> POD_NAMESPACE              <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>                <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>                  <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> metadata.namespace          <span class="token key atrule">ports</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> http              <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>              <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> https              <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">443</span>              <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP          <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>            <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">3</span>            <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>              <span class="token key atrule">path</span><span class="token punctuation">:</span> /healthz              <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10254</span>              <span class="token key atrule">scheme</span><span class="token punctuation">:</span> HTTP            <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>            <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>            <span class="token key atrule">successThreshold</span><span class="token punctuation">:</span> <span class="token number">1</span>            <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>          <span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span>            <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">3</span>            <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>              <span class="token key atrule">path</span><span class="token punctuation">:</span> /healthz              <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10254</span>              <span class="token key atrule">scheme</span><span class="token punctuation">:</span> HTTP            <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>            <span class="token key atrule">successThreshold</span><span class="token punctuation">:</span> <span class="token number">1</span>            <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>          <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>            <span class="token key atrule">preStop</span><span class="token punctuation">:</span>              <span class="token key atrule">exec</span><span class="token punctuation">:</span>                <span class="token key atrule">command</span><span class="token punctuation">:</span>                  <span class="token punctuation">-</span> /wait<span class="token punctuation">-</span>shutdown<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> LimitRange<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">limits</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">min</span><span class="token punctuation">:</span>      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 90Mi      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 100m    <span class="token key atrule">type</span><span class="token punctuation">:</span> Container</code></pre>]]></content>
      
      
      <categories>
          
          <category> kubeadm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask笔记-SQLAlchemy应用</title>
      <link href="/2020/01/02/2020-01-02-Flask%E7%AC%94%E8%AE%B0-sqlalchemy%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87%E6%8F%90%E4%BA%A4/"/>
      <url>/2020/01/02/2020-01-02-Flask%E7%AC%94%E8%AE%B0-sqlalchemy%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87%E6%8F%90%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<p>通常情况下，一个简单的注册试图</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemydb <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    nickname <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> Column<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> String<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    status <span class="token operator">=</span> Column<span class="token punctuation">(</span>SmallInteger<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>@web<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        user<span class="token operator">=</span>User<span class="token punctuation">(</span><span class="token punctuation">)</span>        user<span class="token punctuation">.</span>nickname <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">]</span>        user<span class="token punctuation">.</span>phone_number <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token string">'phone_number'</span><span class="token punctuation">]</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'web.login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'auth/register.html'</span><span class="token punctuation">)</span></code></pre><a id="more"></a><h3 id="参数验证"><a href="#参数验证" class="headerlink" title="参数验证"></a>参数验证</h3><p>但是仅仅只是这样简单的接收任意参数，是非常不安全的，可以定义一个验证表单的类，来接受参数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemy<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> Form<span class="token punctuation">,</span>StringField<span class="token punctuation">,</span> IntegerField<span class="token punctuation">,</span> PasswordField<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>validators <span class="token keyword">import</span> DataRequired<span class="token punctuation">,</span>Email<span class="token punctuation">,</span>NumberRange<span class="token punctuation">,</span>Length<span class="token punctuation">,</span>ValidationError<span class="token keyword">class</span> <span class="token class-name">RegisterForm</span><span class="token punctuation">(</span>Form<span class="token punctuation">)</span><span class="token punctuation">:</span>    email <span class="token operator">=</span> StringField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>DataRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                    Length<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                    Email<span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">'电子邮箱不符合规范'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> PasswordField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>        DataRequired<span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">'密码不可以为空，请输入正确的密码'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Length<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    nickname <span class="token operator">=</span> StringField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>        DataRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Length<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'昵称至少需要两个字符，最多10个字符'</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>@web<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    form <span class="token operator">=</span> RegisterForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>form<span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span> <span class="token operator">and</span> form<span class="token punctuation">.</span>validate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        user <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token punctuation">)</span>        user<span class="token punctuation">.</span>nickname <span class="token operator">=</span> form<span class="token punctuation">.</span>nickname<span class="token punctuation">.</span>data        user<span class="token punctuation">.</span>email <span class="token operator">=</span> form<span class="token punctuation">.</span>email<span class="token punctuation">.</span>data        user<span class="token punctuation">.</span>password <span class="token operator">=</span> form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>data        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'web.login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'auth/register.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span></code></pre><h3 id="密码加密策略"><a href="#密码加密策略" class="headerlink" title="密码加密策略"></a>密码加密策略</h3><p>但是这样存在隐患，通常密码并非明文存储，在werkzeug中，提供了加密和校验方法<code>generate_password_hash  check_password_hash</code>,将password定义为方法在转换成属性</p><p>改写User类</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>security <span class="token keyword">import</span> generate_password_hash<span class="token punctuation">,</span>check_password_hash<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    nickname <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    _password <span class="token operator">=</span> Column<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> String<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    status <span class="token operator">=</span> Column<span class="token punctuation">(</span>SmallInteger<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    @property    <span class="token keyword">def</span> <span class="token function">password</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_password    @password<span class="token punctuation">.</span>setter    <span class="token keyword">def</span> <span class="token function">password</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raw<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_password<span class="token operator">=</span>generate_password_hash<span class="token punctuation">(</span>raw<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">check_password</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raw<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        return: True or False        """</span>        <span class="token keyword">return</span> check_password_hash<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_password<span class="token punctuation">,</span> raw<span class="token punctuation">)</span></code></pre><h3 id="基础类继承"><a href="#基础类继承" class="headerlink" title="基础类继承"></a>基础类继承</h3><p>通常情况，User定义数据库类，在数据库角度看来，一个类就是一个表，每个表都有一些状态，创建时间等基础的数据，那么我们可以把它单独抽出，定义一个基础类</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    __abstract__ <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token comment" spellcheck="true"># create_time = Column()</span>    status <span class="token operator">=</span> Column<span class="token punctuation">(</span>SmallInteger<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    nickname <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    _password <span class="token operator">=</span> Column<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> String<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    @property    <span class="token keyword">def</span> <span class="token function">password</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_password    @password<span class="token punctuation">.</span>setter    <span class="token keyword">def</span> <span class="token function">password</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raw<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_password<span class="token operator">=</span>generate_password_hash<span class="token punctuation">(</span>raw<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">check_password</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raw<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> check_password_hash<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_password<span class="token punctuation">,</span> raw<span class="token punctuation">)</span></code></pre><h3 id="简化视图函数参数获取"><a href="#简化视图函数参数获取" class="headerlink" title="简化视图函数参数获取"></a>简化视图函数参数获取</h3><p>在试图函数中，有很多的参数需要获取<code>user.nickname = form.nickname.data</code>这样的类似操作，太多的获取会让视图函数看起来非常的臃肿，看起来操作类似，似乎又有逻辑可循<br>那么，我们有一些特殊的方法，是可以简化操作</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    __abstract__ <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token comment" spellcheck="true"># create_time = Column()</span>    status <span class="token operator">=</span> Column<span class="token punctuation">(</span>SmallInteger<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">set_attrs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attr_dict<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> attr_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">and</span> key <span class="token operator">!=</span> <span class="token string">'id'</span><span class="token punctuation">:</span>                setattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>@web<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    form <span class="token operator">=</span> RegisterForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>form<span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span> <span class="token operator">and</span> form<span class="token punctuation">.</span>validate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            user <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token punctuation">)</span>            user<span class="token punctuation">.</span>setattr<span class="token punctuation">(</span>form<span class="token punctuation">.</span>data<span class="token punctuation">)</span>            db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user<span class="token punctuation">)</span>            db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">raise</span> e        redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'web.login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'auth/register.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span></code></pre><h3 id="上下文管理器应用"><a href="#上下文管理器应用" class="headerlink" title="上下文管理器应用"></a>上下文管理器应用</h3><p>在每次提交数据，都会有<code>try except</code>操作，当有大量的试图函数时，这样看起来依然感觉试图函数臃肿</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemy <span class="token keyword">as</span> _SQLAlchamy<span class="token keyword">from</span> contextlib <span class="token keyword">import</span> contextmanager<span class="token keyword">class</span> <span class="token class-name">SQLAlchemy</span><span class="token punctuation">(</span>_SQLAlchamy<span class="token punctuation">)</span><span class="token punctuation">:</span>    @contextmanager    <span class="token keyword">def</span> <span class="token function">auth_commit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span>            self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">raise</span> edb <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span><span class="token punctuation">)</span>@web<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    form <span class="token operator">=</span> RegisterForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>form<span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span> <span class="token operator">and</span> form<span class="token punctuation">.</span>validate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> db<span class="token punctuation">.</span>auth_commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            user <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token punctuation">)</span>            user<span class="token punctuation">.</span>setattr<span class="token punctuation">(</span>form<span class="token punctuation">.</span>data<span class="token punctuation">)</span>            db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user<span class="token punctuation">)</span>        redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'web.login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'auth/register.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span></code></pre><h1 id="jinja2模板渲染"><a href="#jinja2模板渲染" class="headerlink" title="jinja2模板渲染"></a>jinja2模板渲染</h1><pre class=" language-python"><code class="language-python">trade_gifts <span class="token operator">=</span> Gift<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>isbn<span class="token operator">=</span>isbn<span class="token punctuation">,</span> launched<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>trade_gifts_model <span class="token operator">=</span> TradeInfo<span class="token punctuation">(</span>trade_gifts<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TradeInfo</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> goods<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>total <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>trades <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>__parse<span class="token punctuation">(</span>goods<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> goods<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>total <span class="token operator">=</span> len<span class="token punctuation">(</span>goods<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>trades <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>__map_to_trade<span class="token punctuation">(</span>single<span class="token punctuation">)</span> <span class="token keyword">for</span> single <span class="token keyword">in</span> goods<span class="token punctuation">]</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">__map_to_trade</span><span class="token punctuation">(</span>single<span class="token punctuation">)</span><span class="token punctuation">:</span>        time <span class="token operator">=</span> single<span class="token punctuation">.</span>create_datetime<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> single<span class="token punctuation">.</span>create_datetime <span class="token keyword">else</span> None        <span class="token keyword">return</span> dict<span class="token punctuation">(</span>            user_name<span class="token operator">=</span>single<span class="token punctuation">.</span>user<span class="token punctuation">.</span>nickname<span class="token punctuation">,</span>            time<span class="token operator">=</span>time<span class="token punctuation">,</span>            id<span class="token operator">=</span>single<span class="token punctuation">.</span>id        <span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> wtforms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wtforms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins pipeline</title>
      <link href="/2019/12/10/2019-12-10-Jenkins%20pipeline/"/>
      <url>/2019/12/10/2019-12-10-Jenkins%20pipeline/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Jenkins 使用流水线方式部署项目，使发布流程更加清晰透明<br>流水线采用Groovy语言，须安装pipeline插件<br>以下Demo：</p></blockquote><a id="more"></a><pre class=" language-groovy"><code class="language-groovy">node <span class="token punctuation">{</span>    <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">'1.更新'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dingTalk accessToken<span class="token punctuation">:</span> <span class="token string">'a2d0c8bc9da56ba02d0b560ase26341f9c9e4e94ddac0dcd8a9097edf75b53a9'</span><span class="token punctuation">,</span> imageUrl<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> jenkinsUrl<span class="token punctuation">:</span> <span class="token string">'http://jenkins_url:8080'</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'开始发布'</span><span class="token punctuation">,</span> notifyPeople<span class="token punctuation">:</span> <span class="token string">''</span>        git credentialsId<span class="token punctuation">:</span> <span class="token string">'6bbb1441-ab0b-4f91-b43e-cb4db5a174da'</span><span class="token punctuation">,</span> url<span class="token punctuation">:</span> <span class="token string">'http://gitlab_url/glory.git'</span>    <span class="token punctuation">}</span>    <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">'2.打包'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fileExists</span><span class="token punctuation">(</span><span class="token string">'/root/.jenkins/workspace/glory-online'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dir</span><span class="token punctuation">(</span><span class="token string">'/root/.jenkins/workspace/glory-online'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sh <span class="token string">'mvn clean install -U -Dmaven.test.skip -P online'</span>                archiveArtifacts <span class="token string">'glory-web/target/glory.war'</span> # 成品存档文件            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">'3.同步'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sshPublisher</span><span class="token punctuation">(</span>            publishers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">sshPublisherDesc</span><span class="token punctuation">(</span>                configName<span class="token punctuation">:</span> <span class="token string">'ssh96'</span><span class="token punctuation">,</span>                 transfers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">sshTransfer</span><span class="token punctuation">(</span>cleanRemote<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> excludes<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                     execCommand<span class="token punctuation">:</span> <span class="token string">'cp /home/admin/auto_deploy/wartemp/glory.war /home/admin/auto_deploy/production/glory/glory-online.war'</span><span class="token punctuation">,</span>                     execTimeout<span class="token punctuation">:</span> <span class="token number">120000</span><span class="token punctuation">,</span> flatten<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> makeEmptyDirs<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                     noDefaultExcludes<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                     patternSeparator<span class="token punctuation">:</span> <span class="token string">'[, ]+'</span><span class="token punctuation">,</span>                     remoteDirectory<span class="token punctuation">:</span> <span class="token string">'auto_deploy/wartemp'</span><span class="token punctuation">,</span>                     remoteDirectorySDF<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                     removePrefix<span class="token punctuation">:</span> <span class="token string">'glory-web/target/'</span><span class="token punctuation">,</span>                     sourceFiles<span class="token punctuation">:</span> <span class="token string">'glory-web/target/glory.war'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                usePromotionTimestamp<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> useWorkspaceInPromotion<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> verbose<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">'4.发布'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">sshPublisher</span><span class="token punctuation">(</span>            publishers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">sshPublisherDesc</span><span class="token punctuation">(</span>                configName<span class="token punctuation">:</span> <span class="token string">'ssh96'</span><span class="token punctuation">,</span>                 transfers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">sshTransfer</span><span class="token punctuation">(</span>cleanRemote<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> excludes<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                    execCommand<span class="token punctuation">:</span> <span class="token string">'sh /home/admin/scripts/deploy_glory_online.sh'</span><span class="token punctuation">,</span>                     execTimeout<span class="token punctuation">:</span> <span class="token number">1200000</span><span class="token punctuation">,</span> flatten<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> makeEmptyDirs<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                     noDefaultExcludes<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                     patternSeparator<span class="token punctuation">:</span> <span class="token string">'[, ]+'</span><span class="token punctuation">,</span>                     remoteDirectory<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> remoteDirectorySDF<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> removePrefix<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> sourceFiles<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 usePromotionTimestamp<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> useWorkspaceInPromotion<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> verbose<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        dingTalk accessToken<span class="token punctuation">:</span> <span class="token string">'a2d0c8bc9da56ba02d0b560ase26341f9c9e4e94ddac0dcd8a9097edf75b53a9'</span><span class="token punctuation">,</span> imageUrl<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> jenkinsUrl<span class="token punctuation">:</span> <span class="token string">'http://jenkins_url:8080'</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'发布完成'</span><span class="token punctuation">,</span> notifyPeople<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes-Namespace资源限制</title>
      <link href="/2019/11/20/2019-11-20-kubernetes-Namespace%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6/"/>
      <url>/2019/11/20/2019-11-20-kubernetes-Namespace%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p><a href="http://docs.kubernetes.org.cn/" target="_blank" rel="noopener">http://docs.kubernetes.org.cn/</a></p><h3 id="创建namespace"><a href="#创建namespace" class="headerlink" title="创建namespace"></a>创建namespace</h3><p>命令直接创建</p><pre class=" language-sh"><code class="language-sh">kubectl create namespace dev</code></pre><p>或者</p><a id="more"></a><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Namespace<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="为Namespace配置Pod配额限制"><a href="#为Namespace配置Pod配额限制" class="headerlink" title="为Namespace配置Pod配额限制"></a>为Namespace配置Pod配额限制</h3><p>k8s可以为命名空间进行限制，如进行Pod，Service的数量限制等等, 配额通过<code>ResourceQuota</code>对象设置</p><ol><li>设置<code>ResourceQuota</code>对象配置文件，pod-default.yaml  <pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ResourceQuota<span class="token key atrule">metadata</span><span class="token punctuation">:</span><span class="token key atrule">name</span><span class="token punctuation">:</span> namespace<span class="token punctuation">-</span>dev<span class="token key atrule">spec</span><span class="token punctuation">:</span><span class="token key atrule">hard</span><span class="token punctuation">:</span> <span class="token key atrule">pods</span><span class="token punctuation">:</span> <span class="token string">"2"</span> <span class="token key atrule">services</span><span class="token punctuation">:</span> <span class="token string">"1"</span></code></pre></li><li>将配置应用到相应的命名空间<pre class=" language-sh"><code class="language-sh">kubectl create -f pod-default.yaml --namespace=dev</code></pre></li><li>查看和验证资源限制<pre class=" language-sh"><code class="language-sh">#查看kubectl get quota --namespace=dev -o yaml#创建podkubectl run flaskapp --image=sakuragaara/flaskapp:v3 --port=5000 --replicas=3 --namespace=dev#查看pod及相关资源kubectl get all -n dev -o wideNAME                           READY   STATUS    RESTARTS   AGE   IP             NODE           NOMINATED NODE   READINESS GATESpod/flaskapp-5d4f4fb7c-bx5v2   1/1     Running   0          29s   172.30.91.36   192.168.1.36   <none>           <none>pod/flaskapp-5d4f4fb7c-hx6j9   1/1     Running   0          29s   172.30.53.30   192.168.1.35   <none>           <none></code></pre></li></ol><p>NAME                       READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES                    SELECTOR<br>deployment.apps/flaskapp   2/3     2            2           29s   flaskapp     sakuragaara/flaskapp:v3   run=flaskapp</p><p>NAME                                 DESIRED   CURRENT   READY   AGE   CONTAINERS   IMAGES                    SELECTOR<br>replicaset.apps/flaskapp-5d4f4fb7c   3         2         2       29s   flaskapp     sakuragaara/flaskapp:v3   pod-template-hash=5d4f4fb7c,run=flaskapp</p><pre><code>查看资源会发现，期望创建的pod3个，但就绪的状态只有2个.之后进行修改`ResourceQuota`资源pod数量，pod会自动更新成期望值3个.### 为Namespace配置默认CPU和Memory限制k8s可以为命名空间进行限制，如CPU,Memory等重要的资源, 配额通过`LimitRange`对象设置1. 设置`LimitRange`对象配置文件，cpu-mem-default.yaml```yamlapiVersion: v1kind: LimitRangemetadata:  name: cpu-mem-rangespec:  limits:  - default:      cpu: 0.5      memory: 256Mi    defaultRequest:      cpu: 0.3      memory: 128Mi    type: Container</code></pre><ol start="2"><li>将配置应用到相应的命名空间<pre class=" language-sh"><code class="language-sh">kubectl create -f cpu-mem-default.yaml --namespace=dev</code></pre></li><li>查看验证限制规则<pre class=" language-sh"><code class="language-sh">#查看kubectl get limitranges -n dev -o yaml#创建podkubectl run flaskapp-demo --image=sakuragaara/flaskapp:v3 --port=5000 --replicas=1 --namespace=dev#查看pod是否默认应用资源限制kubectl describe pod -n dev flaskapp-demo-5b9b976879-8qxbqName:               flaskapp-demo-5b9b976879-8qxbqNamespace:          devPriority:           0PriorityClassName:  <none>Node:               192.168.1.36/192.168.1.36Start Time:         Wed, 20 Nov 2019 17:39:46 +0800Labels:             pod-template-hash=5b9b976879                 run=flaskapp-demoAnnotations:        kubernetes.io/limit-ranger:                   LimitRanger plugin set: cpu, memory request for container flaskapp-demo; cpu, memory limit for container flaskapp-demo...........................Containers:flaskapp-demo: Container ID:   docker://c457d1aa261af58265064b937c0725746d2ef590015ac5cd9b850d1ebfc323bc Image:          sakuragaara/flaskapp:v3 Image ID:       docker-pullable://sakuragaara/flaskapp@sha256:fc52eb0cd726a3536babc2f0af8f3a55950665077b65e0da9c40c2d8d4561368 Port:           5000/TCP Host Port:      0/TCP State:          Running   Started:      Wed, 20 Nov 2019 17:39:47 +0800 Ready:          True Restart Count:  0 Limits:   cpu:     500m   memory:  256Mi Requests:   cpu:        300m   memory:     128Mi Environment:  <none>...........................</code></pre>之后对<code>LimitRange</code>对象进行修改并应用，但已经创建的pod是不会自动更新资源限制.<br>如果你在定义pod时，已经定义了资源限制，则不会应用默认的配置.</li></ol><h3 id="为Namespace配置单个pod最大CPU和Memory限制"><a href="#为Namespace配置单个pod最大CPU和Memory限制" class="headerlink" title="为Namespace配置单个pod最大CPU和Memory限制"></a>为Namespace配置单个pod最大CPU和Memory限制</h3><ol><li>通过<code>LimitRange</code>对象设置, cpu-mem-container-max.yaml<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> LimitRange<span class="token key atrule">metadata</span><span class="token punctuation">:</span><span class="token key atrule">name</span><span class="token punctuation">:</span> cpu<span class="token punctuation">-</span>mem<span class="token punctuation">-</span>container<span class="token punctuation">-</span>max<span class="token key atrule">spec</span><span class="token punctuation">:</span><span class="token key atrule">limits</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">max</span><span class="token punctuation">:</span>   <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"400m"</span>   <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"256Mi"</span> <span class="token key atrule">min</span><span class="token punctuation">:</span>   <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"200m"</span>   <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"128Mi"</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> Container</code></pre></li><li>将配置应用到相应的命名空间<pre class=" language-sh"><code class="language-sh">kubectl create -f cpu-mem-container-max.yaml --namespace=dev</code></pre></li><li>查看限制规则<pre class=" language-sh"><code class="language-sh">#查看kubectl get limitranges -n dev -o yaml</code></pre></li><li>创建一个超额的pod资源进行验证,pod.yaml<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span><span class="token key atrule">name</span><span class="token punctuation">:</span> default<span class="token punctuation">-</span>mem<span class="token punctuation">-</span>demo<span class="token key atrule">spec</span><span class="token punctuation">:</span><span class="token key atrule">containers</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> default<span class="token punctuation">-</span>mem<span class="token punctuation">-</span>demo <span class="token key atrule">image</span><span class="token punctuation">:</span> sakuragaara/flaskapp<span class="token punctuation">:</span>v3 <span class="token key atrule">resources</span><span class="token punctuation">:</span>   <span class="token key atrule">limits</span><span class="token punctuation">:</span>     <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"768Mi"</span></code></pre>创建时提示<pre class=" language-sh"><code class="language-sh">kubectl create -f pod.yaml -n devError from server (Forbidden): error when creating "pod.yaml": pods "default-mem-demo" is forbidden: maximum memory usage per Container is 256Mi, but limit is 768Mi.</code></pre></li></ol><h3 id="为Namespace最大CPU和Memory限制"><a href="#为Namespace最大CPU和Memory限制" class="headerlink" title="为Namespace最大CPU和Memory限制"></a>为Namespace最大CPU和Memory限制</h3><p>此配置为空间内运行的所有容器配置CPU和内存配额</p><p>namespace-limit.yaml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ResourceQuota<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> namespace<span class="token punctuation">-</span>limit<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">hard</span><span class="token punctuation">:</span>    <span class="token key atrule">requests.cpu</span><span class="token punctuation">:</span> <span class="token string">"0.5"</span>    <span class="token key atrule">requests.memory</span><span class="token punctuation">:</span> 512Mi    <span class="token key atrule">limits.cpu</span><span class="token punctuation">:</span> <span class="token string">"1"</span>    <span class="token key atrule">limits.memory</span><span class="token punctuation">:</span> 1Gi</code></pre><ul><li>每个容器必须设置内存请求（memory request），内存限额（memory limit），cpu请求（cpu request）和cpu限额（cpu limit）。</li><li>所有容器的内存请求总额不得超过500 MiB。</li><li>所有容器的内存限额总额不得超过1 GiB。</li><li>所有容器的CPU请求总额不得超过0.5 CPU。</li><li>所有容器的CPU限额总额不得超过1 CPU。</li></ul><p>deploy.yaml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> flask<span class="token punctuation">-</span>deploy  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> flask<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>     <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> flask  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> flask<span class="token punctuation">-</span>pod      <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> flask    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> flask<span class="token punctuation">-</span>container        <span class="token key atrule">image</span><span class="token punctuation">:</span> sakuragaara/flaskapp<span class="token punctuation">:</span>v3        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> http          <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">5000</span>        <span class="token key atrule">resources</span><span class="token punctuation">:</span>          <span class="token key atrule">requests</span><span class="token punctuation">:</span>            <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"128Mi"</span>            <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"0.2"</span>          <span class="token key atrule">limits</span><span class="token punctuation">:</span>            <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"256Mi"</span>            <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"0.4"</span></code></pre><p>根据验证，3个pod将超过总资源限制，会创建成功两个<br>而资源限制满了之后，在此空间下创建其他pod，则会提示</p><pre class=" language-sh"><code class="language-sh">kubectl create -f pod.yaml -n devError from server (Forbidden): error when creating "pod.yaml": pods "default-mem-demo" is forbidden: exceeded quota: namespace-limit, requested: limits.cpu=400m,requests.cpu=400m, used: limits.cpu=800m,requests.cpu=400m, limited: limits.cpu=1,requests.cpu=500m</code></pre>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes架构</title>
      <link href="/2019/10/31/2019-10-31-Kubernetes%E6%9E%B6%E6%9E%84/"/>
      <url>/2019/10/31/2019-10-31-Kubernetes%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="Kubernetes的总架构图"><a href="#Kubernetes的总架构图" class="headerlink" title="Kubernetes的总架构图"></a>Kubernetes的总架构图</h2><p><img src="/images/img/20191031/Kubernetes-schema.png" alt="master的工作流程图"> </p><a id="more"></a><h2 id="Kubernetes各个组件"><a href="#Kubernetes各个组件" class="headerlink" title="Kubernetes各个组件"></a>Kubernetes各个组件</h2><h3 id="kube-master-控制节点"><a href="#kube-master-控制节点" class="headerlink" title="kube-master[控制节点]"></a>kube-master[控制节点]</h3><ul><li>master的工作流程图<br><img src="/images/img/20191031/master-process.png" alt="master的工作流程图"> </li></ul><ol><li>Kubecfg将特定的请求，比如创建Pod，发送给Kubernetes Client。</li><li>Kubernetes Client将请求发送给API server。</li><li>API Server根据请求的类型，比如创建Pod时storage类型是pods，然后依此选择何种REST Storage API对请求作出处理。</li><li>REST Storage API对的请求作相应的处理。</li><li>将处理的结果存入高可用键值存储系统Etcd中。</li><li>在API Server响应Kubecfg的请求后，Scheduler会根据Kubernetes Client获取集群中运行Pod及Minion/Node信息。</li><li>依据从Kubernetes Client获取的信息，Scheduler将未分发的Pod分发到可用的Minion/Node节点上</li></ol><h4 id="API-Server-资源操作入口"><a href="#API-Server-资源操作入口" class="headerlink" title="API Server[资源操作入口]"></a>API Server[资源操作入口]</h4><ul><li><p>提供了资源对象的唯一操作入口，其他所有组件都必须通过它提供的API来操作资源数据，只有API Server与存储通信，其他模块通过API Server访问集群状态。<br>第一，是为了保证集群状态访问的安全。<br>第二，是为了隔离集群状态访问的方式和后端存储实现的方式：API Server是状态访问的方式，不会因为后端存储技术etcd的改变而改变。</p></li><li><p>作为kubernetes系统的入口，封装了核心对象的增删改查操作，以RESTFul接口方式提供给外部客户和内部组件调用。对相关的资源数据“全量查询”+“变化监听”，实时完成相关的业务功能。</p></li></ul><h4 id="Controller-Manager-内部管理控制中心"><a href="#Controller-Manager-内部管理控制中心" class="headerlink" title="Controller Manager[内部管理控制中心]"></a>Controller Manager[内部管理控制中心]</h4><p>实现集群故障检测和恢复的自动化工作，负责执行各种控制器，主要有：</p><ul><li>endpoint-controller：定期关联service和pod(关联信息由endpoint对象维护)，保证service到pod的映射总是最新的。</li><li>replication-controller：定期关联replicationController和pod，保证replicationController定义的复制数量与实际运行pod的数量总是一致的。</li></ul><h4 id="Scheduler-集群分发调度器"><a href="#Scheduler-集群分发调度器" class="headerlink" title="Scheduler[集群分发调度器]"></a>Scheduler[集群分发调度器]</h4><ol><li>Scheduler收集和分析当前Kubernetes集群中所有Minion节点的资源(内存、CPU)负载情况，然后依此分发新建的Pod到Kubernetes集群中可用的节点。</li><li>实时监测Kubernetes集群中未分发和已分发的所有运行的Pod。</li><li>Scheduler也监测Minion节点信息，由于会频繁查找Minion节点，Scheduler会缓存一份最新的信息在本地。</li><li>最后，Scheduler在分发Pod到指定的Minion节点后，会把Pod相关的信息Binding写回API Server。</li></ol><h4 id="etcd-存储组件"><a href="#etcd-存储组件" class="headerlink" title="etcd[存储组件]"></a>etcd[存储组件]</h4><p>支持一致性和高可用的名值对存储组件，Kubernetes集群的所有配置信息都存储在 etcd 中。</p><h3 id="kube-node-服务节点"><a href="#kube-node-服务节点" class="headerlink" title="kube-node[服务节点]"></a>kube-node[服务节点]</h3><ul><li>kubelet结构图<br><img src="/images/img/20191031/kubelet-schema.png" alt="kubelet结构图"> </li></ul><h4 id="Kubelet-节点上的Pod管家"><a href="#Kubelet-节点上的Pod管家" class="headerlink" title="Kubelet[节点上的Pod管家]"></a>Kubelet[节点上的Pod管家]</h4><ul><li><p>负责Node节点上pod的创建、修改、监控、删除等全生命周期的管理</p></li><li><p>定时上报本Node的状态信息给API Server。</p></li><li><p>kubelet是Master API Server和Minion之间的桥梁，接收Master API Server分配给它的commands和work，与持久性键值存储etcd、file、server和http进行交互，读取配置信息。</p></li><li><p>具体的工作如下：</p></li></ul><ol><li>设置容器的环境变量、给容器绑定Volume、给容器绑定Port、根据指定的Pod运行一个单一容器、给指定的Pod创建network 容器。</li><li>同步Pod的状态、同步Pod的状态、从cAdvisor获取Container info、 pod info、 root info、 machine info。</li><li>在容器中运行命令、杀死容器、删除Pod的所有容器。</li></ol><h4 id="Proxy-负载均衡、路由转发"><a href="#Proxy-负载均衡、路由转发" class="headerlink" title="Proxy[负载均衡、路由转发]"></a>Proxy[负载均衡、路由转发]</h4><p>Proxy是为了解决外部网络能够访问跨机器集群中容器提供的应用服务而设计的，运行在每个Node上。Proxy提供TCP/UDP sockets的proxy，每创建一种Service，Proxy主要从etcd获取Services和Endpoints的配置信息（也可以从file获取），然后根据配置信息在Minion上启动一个Proxy的进程并监听相应的服务端口，当外部请求发生时，Proxy会根据Load Balancer将请求分发到后端正确的容器处理。</p><p>Proxy不但解决了同一主宿机相同服务端口冲突的问题，还提供了Service转发服务端口对外提供服务的能力，Proxy后端使用了随机、轮循负载均衡算法。</p><h3 id="kubectl（kubelet-client）-集群管理命令行工具集"><a href="#kubectl（kubelet-client）-集群管理命令行工具集" class="headerlink" title="kubectl（kubelet client）[集群管理命令行工具集]"></a>kubectl（kubelet client）[集群管理命令行工具集]</h3><p>通过客户端的kubectl命令集操作，API Server响应对应的命令结果，从而达到对kubernetes集群的管理。</p><h3 id="Addons"><a href="#Addons" class="headerlink" title="Addons"></a>Addons</h3><p>使用 Kubernetes 资源（DaemonSet、Deployment等）实现集群的功能特性。由于他们提供集群级别的功能特性，addons使用到的Kubernetes资源都放置在 kube-system 名称空间下。</p><ul><li>DNS（kube-dns / core dns）<br>除了 DNS Addon 以外，其他的 addon 都不是必须的，所有 Kubernetes 集群都应该有 Cluster DNS</li><li>Web UI（Dashboard）<br>Dashboard 是一个Kubernetes集群的 Web 管理界面。用户可以通过该界面管理集群。</li><li>Kuboard<br>Kuboard 是一款基于Kubernetes的微服务管理界面.</li></ul>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>etcd用户及角色权限</title>
      <link href="/2019/10/10/2019-10-10-etcd%E7%94%A8%E6%88%B7%E5%8F%8A%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90/"/>
      <url>/2019/10/10/2019-10-10-etcd%E7%94%A8%E6%88%B7%E5%8F%8A%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>etcd用户和角色设置：<br>1.etcd默认没有用户<br>2.etcd默认角色guest和root<br>3.etcd默认关闭用户登录认证</p></blockquote><a id="more"></a><p>创建root用户<br>etcdctl user add root<br>查看用户<br>etcdctl user list<br>开启/关闭用户登录认证<br>etcdctl auth enable/disable</p><p>创建用户<br>etcdctl -u root user add etcduser<br>删除用户<br>etcdctl -u root user remove etcduser<br>用户修改密码<br>etcdctl -u root user passwd etcduser</p><p>创建角色<br>etcdctl -u root role add etcdrole<br>查看角色<br>etcdctl -u root role list<br>删除角色<br>etcdctl -u root role remove etcdrole<br>角色授权,角色没有密码，仅仅是定义的一组访问权限,角色的访问权限可以被赋予read（读）,write（写）,readwrite（读和写）权限<br>etcdctl -u root role grant etcdrole –path “/*” –read<br>etcdctl -u root role grant etcdrole –path “/*” –write<br>etcdctl -u root role grant etcdrole –path “/*” –rw<br>角色权限回收<br>etcdctl -u root role revoke etcdrole –path “/*” –write</p><p>用户和角色绑定、解除绑定<br>etcdctl -u root user grant –roles etcdrole etcduser<br>etcdctl -u root user revoke –roles etcdrole etcduser</p>]]></content>
      
      
      <categories>
          
          <category> etcd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> etcd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制k8s安装部署</title>
      <link href="/2019/08/25/2019-08-25-%E4%BA%8C%E8%BF%9B%E5%88%B6k8s%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/08/25/2019-08-25-%E4%BA%8C%E8%BF%9B%E5%88%B6k8s%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><blockquote><p>Centos7 所有操作全部用root使用者进行，高可用一般建议大于等于3台的奇数,我们使用3台master来做高可用<br>  <strong>k8s各版本组件下载地址:</strong><br>  <a href="https://github.com/kubernetes/kubernetes/tree/v1.14.3" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/tree/v1.14.3</a><br>  <em>kubernetes:</em><br>  wget <a href="https://storage.googleapis.com/kubernetes-release/release/v1.14.3/kubernetes-node-linux-amd64.tar.gz" target="_blank" rel="noopener">https://storage.googleapis.com/kubernetes-release/release/v1.14.3/kubernetes-node-linux-amd64.tar.gz</a><br>  wget <a href="https://storage.googleapis.com/kubernetes-release/release/v1.14.3/kubernetes-client-linux-amd64.tar.gz" target="_blank" rel="noopener">https://storage.googleapis.com/kubernetes-release/release/v1.14.3/kubernetes-client-linux-amd64.tar.gz</a><br>  wget <a href="https://storage.googleapis.com/kubernetes-release/release/v1.14.3/kubernetes-server-linux-amd64.tar.gz" target="_blank" rel="noopener">https://storage.googleapis.com/kubernetes-release/release/v1.14.3/kubernetes-server-linux-amd64.tar.gz</a><br>  wget <a href="https://storage.googleapis.com/kubernetes-release/release/v1.14.3/kubernetes.tar.gz" target="_blank" rel="noopener">https://storage.googleapis.com/kubernetes-release/release/v1.14.3/kubernetes.tar.gz</a><br>  <em>etcd:</em><br>  wget <a href="https://github.com/etcd-io/etcd/releases/download/v3.3.13/etcd-v3.3.13-linux-amd64.tar.gz" target="_blank" rel="noopener">https://github.com/etcd-io/etcd/releases/download/v3.3.13/etcd-v3.3.13-linux-amd64.tar.gz</a><br>  <em>flannel:</em><br>  wget <a href="https://github.com/coreos/flannel/releases/download/v0.11.0/flannel-v0.11.0-linux-amd64.tar.gz" target="_blank" rel="noopener">https://github.com/coreos/flannel/releases/download/v0.11.0/flannel-v0.11.0-linux-amd64.tar.gz</a><br>  <em>cni-plugins:</em><br>  wget <a href="https://github.com/containernetworking/plugins/releases/download/v0.8.1/cni-plugins-linux-amd64-v0.8.1.tgz" target="_blank" rel="noopener">https://github.com/containernetworking/plugins/releases/download/v0.8.1/cni-plugins-linux-amd64-v0.8.1.tgz</a><br>  <em>docker:</em><br>  wget <a href="https://download.docker.com/linux/static/stable/x86_64/docker-18.09.6.tgz" target="_blank" rel="noopener">https://download.docker.com/linux/static/stable/x86_64/docker-18.09.6.tgz</a><br>  <em>cfssl:</em><br>  wget <a href="https://pkg.cfssl.org/R1.2/cfssl_linux-amd64" target="_blank" rel="noopener">https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</a><br>  wget <a href="https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64" target="_blank" rel="noopener">https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</a><br>  wget <a href="https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64" target="_blank" rel="noopener">https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</a><br>  <em>heapster:</em><br>  wget <a href="https://github.com/kubernetes-retired/heapster/archive/v1.5.4.tar.gz" target="_blank" rel="noopener">https://github.com/kubernetes-retired/heapster/archive/v1.5.4.tar.gz</a>  </p></blockquote><a id="more"></a><h4 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h4><p>master: kube-apiserver,kube-controller-manager,kube-scheduler,flanneId<br>node: kubelet,kube-proxy,flanneId<br>Service_CIDR: 10.254.0.0/16 服务网段，部署前路由不可达，部署后集群内部使用IP:Port可达<br>Cluster_CIDR：172.30.0.0/16 pod网段，部署前路由不可达，部署后路由可达(flanneld 保证)  </p><table><thead><tr><th>hostname</th><th>IP</th><th>部署软件</th></tr></thead><tbody><tr><td>k8s-master1</td><td>192.168.1.31</td><td>etcd+keepalived+haproxy+master</td></tr><tr><td>k8s-master2</td><td>192.168.1.32</td><td>etcd+keepalived+haproxy+master</td></tr><tr><td>k8s-master3</td><td>192.168.1.33</td><td>etcd+keepalived+haproxy+master</td></tr><tr><td>k8s-worker1</td><td>192.168.1.35</td><td>docker+node</td></tr><tr><td>VIP</td><td>192.168.1.10</td><td>VIP</td></tr></tbody></table><h4 id="配置主机环境"><a href="#配置主机环境" class="headerlink" title="配置主机环境"></a>配置主机环境</h4><p>/etc/hosts，设置master免密登陆</p><blockquote><p>192.168.1.31 k8s-master1<br>  192.168.1.32 k8s-master2<br>  192.168.1.33 k8s-master3</p></blockquote><h4 id="安装前配置"><a href="#安装前配置" class="headerlink" title="安装前配置"></a>安装前配置</h4><ul><li><p>禁止selinux,防火墙,swap分区</p><pre class=" language-sh"><code class="language-sh">setenforce 0sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/configsystemctl stop firewalldsystemctl disable firewalldswapoff -a</code></pre></li><li><p>安装软件包</p><pre class=" language-sh"><code class="language-sh">yum -y install ntpdate gcc git vim wget </code></pre></li><li><p>时间统一定时更新</p><pre class=" language-sh"><code class="language-sh">*/5 * * * * /usr/sbin/ntpdate ntp.api.bz >/dev/null 2>&1</code></pre></li><li><p>修改文件句柄数  </p><pre class=" language-sh"><code class="language-sh">cat /etc/security/limits.conf* soft nofile 65536* hard nofile 65536* soft nproc 65536* hard nproc 65536* soft  memlock  unlimited* hard memlock  unlimited</code></pre></li></ul><ul><li>ipvs安装    <pre class=" language-sh"><code class="language-sh">yum install ipvsadm ipset sysstat conntrack libseccomp -y  </code></pre></li></ul><ul><li><p>开机加载内核模块，并设置开机自动加载</p><pre class=" language-sh"><code class="language-sh">cat /etc/sysconfig/modules/ipvs.modules#!/bin/bashmodprobe -- ip_vsmodprobe -- ip_vs_rrmodprobe -- ip_vs_wrrmodprobe -- ip_vs_shmodprobe -- nf_conntrack_ipv4chmod 755 /etc/sysconfig/modules/ipvs.modules && bash /etc/sysconfig/modules/ipvs.moduleslsmod | grep -e ip_vs -e nf_conntrack_ipv4</code></pre></li></ul><ul><li><p>修改系统参数</p><pre class=" language-sh"><code class="language-sh">cat /etc/sysctl.d/k8s.confnet.ipv4.tcp_keepalive_time = 600net.ipv4.tcp_keepalive_intvl = 30net.ipv4.tcp_keepalive_probes = 10net.ipv6.conf.all.disable_ipv6 = 1net.ipv6.conf.default.disable_ipv6 = 1net.ipv6.conf.lo.disable_ipv6 = 1net.ipv4.neigh.default.gc_stale_time = 120net.ipv4.conf.all.rp_filter = 0net.ipv4.conf.default.rp_filter = 0net.ipv4.conf.default.arp_announce = 2net.ipv4.conf.lo.arp_announce = 2net.ipv4.conf.all.arp_announce = 2net.ipv4.ip_forward = 1net.ipv4.tcp_max_tw_buckets = 5000net.ipv4.tcp_syncookies = 1net.ipv4.tcp_max_syn_backlog = 1024net.ipv4.tcp_synack_retries = 2net.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1net.netfilter.nf_conntrack_max = 2310720fs.inotify.max_user_watches=89100fs.may_detach_mounts = 1fs.file-max = 52706963fs.nr_open = 52706963net.bridge.bridge-nf-call-arptables = 1vm.swappiness = 0vm.overcommit_memory=1vm.panic_on_oom=0sysctl --system</code></pre></li><li><p>预留内存,避免由于内存耗尽导致ssh连不上主机,比如100M，资源充足建议大点</p><pre class=" language-sh"><code class="language-sh">echo 'vm.min_free_kbytes=100000' >> /etc/sysctl.confsysctl -p</code></pre></li></ul><h3 id="部署docker"><a href="#部署docker" class="headerlink" title="部署docker"></a>部署docker</h3><ol><li>安装yum源工具包<pre class=" language-sh"><code class="language-sh">yum install -y yum-utils device-mapper-persistent-data lvm2</code></pre></li><li>下载docker-ce官方的yum源配置文件 <pre class=" language-sh"><code class="language-sh">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></pre></li><li>安装docker-ce相应版本<pre class=" language-sh"><code class="language-sh">yum -y install docker-ce.x86_64</code></pre></li><li>配置daemon, 因为kubelet的启动环境变量要与docker的cgroup-driver驱动相同<pre class=" language-sh"><code class="language-sh">mkdir -p /etc/docker && cat /etc/docker/daemon.json {"exec-opts": ["native.cgroupdriver=systemd"],"log-driver": "json-file","log-opts": { "max-size": "100m"},"storage-driver": "overlay2","storage-opts": [ "overlay2.override_kernel_check=true"],"registry-mirrors": ["https://uyah70su.mirror.aliyuncs.com"]}</code></pre></li><li>设置开机自启动<pre class=" language-sh"><code class="language-sh">systemctl restart docker && systemctl enable docker && systemctl status docker</code></pre></li></ol><h3 id="部署etcd"><a href="#部署etcd" class="headerlink" title="部署etcd"></a>部署etcd</h3><p>etcd是用来保存集群所有状态的 Key/Value 存储系统，常用于服务发现、共享配置以及并发控制（如 leader 选举、分布式锁等）。kubernetes 使用 etcd 存储所有运行数据。</p><p>所有 Kubernetes 组件会通过 API Server 来跟 Etcd 进行沟通从而保存或读取资源状态。有条件的可以单独几台机器跑,不过需要配置apiserver指向etcd集群。</p><h4 id="安装cfssl"><a href="#安装cfssl" class="headerlink" title="安装cfssl"></a>安装cfssl</h4><pre class=" language-sh"><code class="language-sh">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 -O /usr/local/bin/cfsslwget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 -O /usr/local/bin/cfssljsonwget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64 -O /usr/local/bin/cfssl-certinfochmod +x /usr/local/bin/cfssl*</code></pre><h4 id="安装配置etcd"><a href="#安装配置etcd" class="headerlink" title="安装配置etcd"></a>安装配置etcd</h4><ol><li><p>配置etcd证书</p><pre class=" language-sh"><code class="language-sh">mkdir /root/ssl && cd /root/sslcat ca-config.json{"signing": {"default": { "expiry": "8760h"},"profiles": { "kubernetes": {   "usages": [       "signing",       "key encipherment",       "server auth",       "client auth"   ],   "expiry": "8760h" }}}}cat ca-csr.json {"CN": "kubernetes","key": {"algo": "rsa","size": 2048},"names": [{ "C": "CN", "ST": "ShangHai", "L": "ShangHai", "O": "k8s", "OU": "System"}]}cat etcd-csr.json { "CN": "etcd", "hosts": [   "127.0.0.1",   "192.168.1.31",   "192.168.1.32",   "192.168.1.33" ], "key": {   "algo": "rsa",   "size": 2048 }, "names": [   {     "C": "CN",     "ST": "ShangHai",     "L": "ShangHai",     "O": "k8s",     "OU": "System"   } ]}</code></pre></li><li><p>创建etcd证书</p><pre class=" language-sh"><code class="language-sh">cfssl gencert -initca ca-csr.json | cfssljson -bare cacfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes etcd-csr.json | cfssljson -bare etcd</code></pre><p>生产后证书包含文件如下，共9个</p><blockquote><p>ca-config.json<br>ca.csr<br>ca-csr.json<br>ca-key.pem<br>ca.pem<br>etcd.csr<br>etcd-csr.json<br>etcd-key.pem<br>etcd.pem</p></blockquote></li></ol><ol><li><p>将生成好的etcd.pem和etcd-key.pem以及ca.pem三个文件拷贝到etcd机器上</p><pre class=" language-sh"><code class="language-sh">mkdir -p /etc/kubernetes/ssl && cp *.pem /etc/kubernetes/ssl/ssh -n 192.168.1.32 "mkdir -p /etc/kubernetes/ssl && exit"ssh -n 192.168.1.33 "mkdir -p /etc/kubernetes/ssl && exit"scp -r /etc/kubernetes/ssl/*.pem 192.168.1.32:/etc/kubernetes/ssl/scp -r /etc/kubernetes/ssl/*.pem 192.168.1.33:/etc/kubernetes/ssl/</code></pre></li><li><p>配置部署etcd</p><pre class=" language-sh"><code class="language-sh">wget https://github.com/etcd-io/etcd/releases/download/v3.3.13/etcd-v3.3.13-linux-amd64.tar.gztar -zxvf etcd-v3.3.13-linux-amd64.tar.gzcp etcd-v3.3.13-linux-amd64/etcd* /usr/local/binscp etcd-v3.3.13-linux-amd64/etcd* 192.168.1.32:/usr/local/binscp etcd-v3.3.13-linux-amd64/etcd* 192.168.1.33:/usr/local/bin</code></pre></li><li><p>创建启动配置文件(三台配置文件不同)</p></li></ol><ul><li><p>k8s-master1:</p><pre class=" language-sh"><code class="language-sh">cat /etc/systemd/system/etcd.service[Unit]Description=Etcd ServerAfter=network.targetAfter=network-online.targetWants=network-online.targetDocumentation=https://github.com/coreos[Service]Type=notifyWorkingDirectory=/var/lib/etcd/ExecStart=/usr/local/bin/etcd \  --name k8s-master1 \  --cert-file=/etc/kubernetes/ssl/etcd.pem \  --key-file=/etc/kubernetes/ssl/etcd-key.pem \  --trusted-ca-file=/etc/kubernetes/ssl/ca.pem \  --peer-cert-file=/etc/kubernetes/ssl/etcd.pem \  --peer-key-file=/etc/kubernetes/ssl/etcd-key.pem \  --peer-trusted-ca-file=/etc/kubernetes/ssl/ca.pem \  --initial-advertise-peer-urls https://192.168.1.31:2380 \  --listen-peer-urls https://192.168.1.31:2380 \  --listen-client-urls https://192.168.1.31:2379,http://127.0.0.1:2379 \  --advertise-client-urls https://192.168.1.31:2379 \  --initial-cluster-token etcd-cluster-0 \  --initial-cluster k8s-master1=https://192.168.1.31:2380,k8s-master2=https://192.168.1.32:2380,k8s-master3=https://192.168.1.33:2380 \  --initial-cluster-state new \  --data-dir=/var/lib/etcdRestart=on-failureRestartSec=5LimitNOFILE=65536[Install]WantedBy=multi-user.target#启动etcd服务mkdir /var/lib/etcdsystemctl daemon-reload && systemctl enable etcd.service && systemctl start etcd.service && systemctl status etcd</code></pre></li><li><p>k8s-master2:</p><pre class=" language-sh"><code class="language-sh">cat /etc/systemd/system/etcd.service[Unit]Description=Etcd ServerAfter=network.targetAfter=network-online.targetWants=network-online.targetDocumentation=https://github.com/coreos[Service]Type=notifyWorkingDirectory=/var/lib/etcd/ExecStart=/usr/local/bin/etcd \  --name k8s-master2 \  --cert-file=/etc/kubernetes/ssl/etcd.pem \  --key-file=/etc/kubernetes/ssl/etcd-key.pem \  --trusted-ca-file=/etc/kubernetes/ssl/ca.pem \  --peer-cert-file=/etc/kubernetes/ssl/etcd.pem \  --peer-key-file=/etc/kubernetes/ssl/etcd-key.pem \  --peer-trusted-ca-file=/etc/kubernetes/ssl/ca.pem \  --initial-advertise-peer-urls https://192.168.1.32:2380 \  --listen-peer-urls https://192.168.1.32:2380 \  --listen-client-urls https://192.168.1.32:2379,http://127.0.0.1:2379 \  --advertise-client-urls https://192.168.1.32:2379 \  --initial-cluster-token etcd-cluster-0 \  --initial-cluster k8s-master1=https://192.168.1.31:2380,k8s-master2=https://192.168.1.32:2380,k8s-master3=https://192.168.1.33:2380 \  --initial-cluster-state new \  --data-dir=/var/lib/etcdRestart=on-failureRestartSec=5LimitNOFILE=65536[Install]WantedBy=multi-user.target#启动etcd服务mkdir /var/lib/etcdsystemctl daemon-reload && systemctl enable etcd.service && systemctl start etcd.service && systemctl status etcd</code></pre></li><li><p>k8s-master3:</p><pre class=" language-sh"><code class="language-sh">cat /etc/systemd/system/etcd.service[Unit]Description=Etcd ServerAfter=network.targetAfter=network-online.targetWants=network-online.targetDocumentation=https://github.com/coreos[Service]Type=notifyWorkingDirectory=/var/lib/etcd/ExecStart=/usr/local/bin/etcd \  --name k8s-master3 \  --cert-file=/etc/kubernetes/ssl/etcd.pem \  --key-file=/etc/kubernetes/ssl/etcd-key.pem \  --trusted-ca-file=/etc/kubernetes/ssl/ca.pem \  --peer-cert-file=/etc/kubernetes/ssl/etcd.pem \  --peer-key-file=/etc/kubernetes/ssl/etcd-key.pem \  --peer-trusted-ca-file=/etc/kubernetes/ssl/ca.pem \  --initial-advertise-peer-urls https://192.168.1.33:2380 \  --listen-peer-urls https://192.168.1.33:2380 \  --listen-client-urls https://192.168.1.33:2379,http://127.0.0.1:2379 \  --advertise-client-urls https://192.168.1.33:2379 \  --initial-cluster-token etcd-cluster-0 \  --initial-cluster k8s-master1=https://192.168.1.31:2380,k8s-master2=https://192.168.1.32:2380,k8s-master3=https://192.168.1.33:2380 \  --initial-cluster-state new \  --data-dir=/var/lib/etcdRestart=on-failureRestartSec=5LimitNOFILE=65536[Install]WantedBy=multi-user.target#启动etcd服务mkdir /var/lib/etcdsystemctl daemon-reload && systemctl enable etcd.service && systemctl start etcd.service && systemctl status etcd</code></pre></li></ul><ol><li>验证集群<pre class=" language-sh"><code class="language-sh">etcdctl --ca-file=/etc/kubernetes/ssl/ca.pem --cert-file=/etc/kubernetes/ssl/etcd.pem --key-file=/etc/kubernetes/ssl/etcd-key.pem cluster-health</code></pre>返回如下正常<blockquote><p>member 22a9d61e6821c4d is healthy: got healthy result from <a href="https://192.168.1.32:2379" target="_blank" rel="noopener">https://192.168.1.32:2379</a><br>member 68afffba56612fd is healthy: got healthy result from <a href="https://192.168.1.31:2379" target="_blank" rel="noopener">https://192.168.1.31:2379</a><br>member ff1f72bab5edb59f is healthy: got healthy result from <a href="https://192.168.1.33:2379" target="_blank" rel="noopener">https://192.168.1.33:2379</a><br>cluster is healthy</p></blockquote></li></ol><h3 id="部署flannel"><a href="#部署flannel" class="headerlink" title="部署flannel"></a>部署flannel</h3><p>所有的节点都需要安装flannel，，主要目的是跨主机的docker能够互相通信，也是保障kubernetes集群的网络基础和保障</p><ol><li><p>生产TLS证书，是让kubectl当做client证书使用,(证书只需要生成一次)</p><pre class=" language-sh"><code class="language-sh">cd /root/sslcat flanneld-csr.json {"CN": "flanneld","hosts": [],"key": { "algo": "rsa", "size": 2048},"names": [ {   "C": "CN",   "ST": "ShangHai",   "L": "ShangHai",   "O": "k8s",   "OU": "System" }]}</code></pre></li><li><p>生成证书和私钥</p><pre class=" language-sh"><code class="language-sh">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes flanneld-csr.json | cfssljson -bare flanneld#包含以下文件flanneld.csrflanneld-csr.jsonflanneld-key.pemflanneld.pem#然后将证书拷贝到所有节点下cp flanneld*.pem /etc/kubernetes/sslscp flanneld*.pem 192.168.1.32:/etc/kubernetes/sslscp flanneld*.pem 192.168.1.33:/etc/kubernetes/ssl</code></pre></li><li><p>安装flannel</p><pre class=" language-sh"><code class="language-sh">wget https://github.com/coreos/flannel/releases/download/v0.11.0/flannel-v0.11.0-linux-amd64.tar.gztar -zvxf flannel-v0.11.0-linux-amd64.tar.gzcp flanneld mk-docker-opts.sh /usr/local/bincp flanneld mk-docker-opts.sh /usr/local/binscp flanneld mk-docker-opts.sh 192.168.1.32:/usr/local/binscp flanneld mk-docker-opts.sh 192.168.1.33:/usr/local/bin</code></pre></li><li><p>向etcd写入集群Pod网段信息，在etcd集群中任意一台执行一次即可</p><pre class=" language-sh"><code class="language-sh">etcdctl \--endpoints=https://192.168.1.31:2379,https://192.168.1.32:2379,https://192.168.1.33:2379 \--ca-file=/etc/kubernetes/ssl/ca.pem \--cert-file=/etc/kubernetes/ssl/flanneld.pem \--key-file=/etc/kubernetes/ssl/flanneld-key.pem \mk /kubernetes/network/config '{"Network":"172.30.0.0/16", "SubnetLen": 24, "Backend": {"Type": "vxlan"}}'#返回结果{"Network":"172.30.0.0/16", "SubnetLen": 24, "Backend": {"Type": "vxlan"}#验证#列出键值存储的目录etcdctl \--ca-file=/etc/kubernetes/ssl/ca.pem \--cert-file=/etc/kubernetes/ssl/flanneld.pem \--key-file=/etc/kubernetes/ssl/flanneld-key.pem ls -r#查看键值存储etcdctl \--ca-file=/etc/kubernetes/ssl/ca.pem \--cert-file=/etc/kubernetes/ssl/flanneld.pem \--key-file=/etc/kubernetes/ssl/flanneld-key.pem get /kubernetes/network/config#查看已分配pod的子网列表（暂时没有为docker分配子网，启动flannel可以查看）etcdctl \--ca-file=/etc/kubernetes/ssl/ca.pem \--cert-file=/etc/kubernetes/ssl/flanneld.pem \--key-file=/etc/kubernetes/ssl/flanneld-key.pem ls  /kubernetes/network/subnets</code></pre></li><li><p>创建flannel.service文件</p><pre class=" language-sh"><code class="language-sh">cat /etc/systemd/system/flannel.service[Unit]Description=Flanneld overlay address etcd agentAfter=network.targetAfter=network-online.targetWants=network-online.targetAfter=etcd.serviceBefore=docker.service[Service]Type=notifyExecStart=/usr/local/bin/flanneld \ -etcd-cafile=/etc/kubernetes/ssl/ca.pem \ -etcd-certfile=/etc/kubernetes/ssl/flanneld.pem \ -etcd-keyfile=/etc/kubernetes/ssl/flanneld-key.pem \ -etcd-endpoints=https://192.168.1.31:2379,https://192.168.1.32:2379,https://192.168.1.33:2379 \ -etcd-prefix=/kubernetes/networkExecStartPost=/usr/local/bin/mk-docker-opts.sh -k DOCKER_NETWORK_OPTIONS -d /run/flannel/dockerRestart=on-failure[Install]WantedBy=multi-user.targetRequiredBy=docker.service</code></pre></li><li><p>启动flannel服务</p><pre class=" language-sh"><code class="language-sh">systemctl daemon-reload && systemctl enable flannel && systemctl start flannel && systemctl status flannel</code></pre></li><li><p>验证flannel服务</p><pre class=" language-sh"><code class="language-sh">cat /run/flannel/docker#/run/flannel/docker是flannel分配给docker的子网信息，显示如下DOCKER_OPT_BIP="--bip=172.30.10.1/24"DOCKER_OPT_IPMASQ="--ip-masq=true"DOCKER_OPT_MTU="--mtu=1450"DOCKER_NETWORK_OPTIONS=" --bip=172.30.10.1/24 --ip-masq=true --mtu=1450"ip add | grep flannel 4: flannel.1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1450 qdisc noqueue state UNKNOWN group default    inet 172.30.10.0/32 scope global flannel.1cat /run/flannel/subnet.envFLANNEL_NETWORK=172.30.0.0/16FLANNEL_SUBNET=172.30.10.1/24FLANNEL_MTU=1450FLANNEL_IPMASQ=false</code></pre></li><li><p>配置docker支持flannel</p><pre class=" language-sh"><code class="language-sh">vim /etc/systemd/system/multi-user.target.wants/docker.serviceEnvironmentFile=/run/flannel/dockerExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock $DOCKER_NETWORK_OPTIONS</code></pre></li><li><p>重启docker,然后可以查看到已分配pod的子网列表</p><pre class=" language-sh"><code class="language-sh">systemctl daemon-reload && systemctl restart docker && systemctl status dockerip add | grep docker3: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default    inet 172.30.10.1/24 brd 172.30.10.255 scope global docker0</code></pre></li><li><p>设置CNI插件支持flannel</p><pre class=" language-sh"><code class="language-sh">wget https://github.com/containernetworking/plugins/releases/download/v0.8.1/cni-plugins-linux-amd64-v0.8.1.tgzmkdir /opt/cnitar -zxvf cni-plugins-linux-amd64-v0.8.1.tgz -C /opt/cnimkdir -p /etc/cni/net.dcat /etc/cni/net.d/10-default.conf {   "name": "flannel",   "type": "flannel",   "delegate": {       "bridge": "docker0",       "isDefaultGateway": true,       "mtu": 1400   }}cp /opt/cni/* /usr/local/binscp /opt/cni/* 192.168.1.32:/usr/local/binscp /opt/cni/* 192.168.1.33:/usr/local/binssh -n 192.168.1.32 "mkdir -p /etc/cni/net.d && exit"ssh -n 192.168.1.33 "mkdir -p /etc/cni/net.d && exit"scp /etc/cni/net.d/10-default.conf 192.168.1.32:/etc/cni/net.d/scp /etc/cni/net.d/10-default.conf 192.168.1.33:/etc/cni/net.d/</code></pre></li></ol><h3 id="部署keepalived-haproxy"><a href="#部署keepalived-haproxy" class="headerlink" title="部署keepalived+haproxy"></a>部署keepalived+haproxy</h3><p>keepalived 提供 kube-apiserver 对外服务的 VIP；haproxy 监听 VIP，后端连接所有 kube-apiserver 实例，提供健康检查和负载均衡功能  </p><p>本文档复用 master 节点的三台机器，haproxy 监听的端口(8443) 需要与 kube-apiserver 的端口 6443 不同，避免冲突。  </p><p>keepalived 在运行过程中周期检查本机的 haproxy 进程状态，如果检测到 haproxy 进程异常，则触发重新选主的过程，VIP 将飘移到新选出来的主节点，从而实现 VIP 的高可用。<br>所有组件（如 kubeclt、apiserver、controller-manager、scheduler 等）都通过 VIP 和 haproxy 监听的 8443 端口访问 kube-apiserver 服务。  </p><h4 id="部署haproxy"><a href="#部署haproxy" class="headerlink" title="部署haproxy"></a>部署haproxy</h4><ol><li><p>安装配置haproxy</p><pre class=" language-sh"><code class="language-sh">yum install -y haproxycat /etc/haproxy/haproxy.cfgglobal   log         127.0.0.1 local2   chroot      /var/lib/haproxy   pidfile     /var/run/haproxy.pid   maxconn     4000   user        haproxy   group       haproxy   daemondefaults   mode                    tcp   log                     global   retries                 3   timeout connect         10s   timeout client          1m   timeout server          1mlisten  admin_stats   bind 0.0.0.0:9090   mode http   log 127.0.0.1 local0 err   stats refresh 30s   stats uri /status   stats realm welcome login\ Haproxy   stats auth admin:123456   stats hide-version   stats admin if TRUEfrontend kubernetes   bind *:8443   mode tcp   default_backend kubernetes-masterbackend kubernetes-master   balance roundrobin   server k8s-master1 192.168.1.31:6443 check maxconn 2000   server k8s-master2 192.168.1.32:6443 check maxconn 2000   server k8s-master3 192.168.1.33:6443 check maxconn 2000</code></pre></li><li><p>启动haproxy</p><pre class=" language-sh"><code class="language-sh">systemctl enable haproxy && systemctl start haproxy && systemctl status haproxy</code></pre></li></ol><h4 id="部署keepalived"><a href="#部署keepalived" class="headerlink" title="部署keepalived"></a>部署keepalived</h4><ol><li>安装keepalived<pre class=" language-sh"><code class="language-sh">yum install -y keepalived</code></pre></li><li>keepalived配置文件，注意网卡interface未必全部一样，配置VIP为192.168.1.10</li></ol><ul><li><p>k8s-master1:</p><pre class=" language-sh"><code class="language-sh">cat  /etc/keepalived/keepalived.confglobal_defs {   router_id LVS_k8s}vrrp_script CheckK8sMaster {    script "curl -k https://192.168.1.10:8443"    interval 3    timeout 9    fall 2    rise 2}vrrp_instance VI_1 {    state MASTER    interface ens160    virtual_router_id 100    priority 100    advert_int 1    mcast_src_ip 192.168.1.31    nopreempt    authentication {        auth_type PASS        auth_pass fana123    }    unicast_peer {        192.168.1.32        192.168.1.33    }    virtual_ipaddress {        192.168.1.10/24    }    track_script {        CheckK8sMaster    }}</code></pre></li><li><p>k8s-master2:</p><pre class=" language-sh"><code class="language-sh">cat /etc/keepalived/keepalived.confglobal_defs {   router_id LVS_k8s}vrrp_script CheckK8sMaster {    script "curl -k https://192.168.1.10:8443"    interval 3    timeout 9    fall 2    rise 2}vrrp_instance VI_1 {    state BACKUP    interface ens32    virtual_router_id 100    priority 90    advert_int 1    mcast_src_ip 192.168.1.32    nopreempt    authentication {        auth_type PASS        auth_pass fana123    }    unicast_peer {        192.168.1.31        192.168.1.33    }    virtual_ipaddress {        192.168.1.10/24    }    track_script {        CheckK8sMaster    }}</code></pre></li><li><p>k8s-master3:</p><pre class=" language-sh"><code class="language-sh">cat  /etc/keepalived/keepalived.confglobal_defs {   router_id LVS_k8s}vrrp_script CheckK8sMaster {    script "curl -k https://192.168.1.10:8443"    interval 3    timeout 9    fall 2    rise 2}vrrp_instance VI_1 {    state BACKUP    interface ens160    virtual_router_id 100    priority 80    advert_int 1    mcast_src_ip 192.168.1.33    nopreempt    authentication {        auth_type PASS        auth_pass fana123    }    unicast_peer {        192.168.1.31        192.168.1.32    }    virtual_ipaddress {        192.168.1.10/24    }    track_script {        CheckK8sMaster    }}</code></pre></li></ul><ol><li>启动keepalived<pre class=" language-sh"><code class="language-sh">systemctl restart keepalived && systemctl enable keepalived && systemctl status keepalived</code></pre></li><li>查看三台vip(只有一台为VIP)<pre class=" language-sh"><code class="language-sh">ip addr |grep 1.10 inet 192.168.1.10/24 scope global secondary ens160</code></pre></li></ol><h3 id="部署master"><a href="#部署master" class="headerlink" title="部署master"></a>部署master</h3><p>kube-scheduler，kube-controller-manager 和 kube-apiserver 三者的功能紧密相关；同时kube-scheduler 和 kube-controller-manager 只能有一个进程处于工作状态，如果运行多个，则需要通过选举产生一个 leader；</p><h4 id="部署kubectl命令工具"><a href="#部署kubectl命令工具" class="headerlink" title="部署kubectl命令工具"></a>部署kubectl命令工具</h4><ol><li><p>创建CA证书</p><pre class=" language-sh"><code class="language-sh">wget https://storage.googleapis.com/kubernetes-release/release/v1.14.3/kubernetes-server-linux-amd64.tar.gztar -zxvf kubernetes-server-linux-amd64.tar.gzcd kubernetes/server/bincp kube-apiserver kubeadm kube-controller-manager kubectl kube-scheduler /usr/local/binscp -r kube-apiserver kubeadm kube-controller-manager kubectl kube-scheduler k8s-master2:/usr/local/binscp -r kube-apiserver kubeadm kube-controller-manager kubectl kube-scheduler k8s-master3:/usr/local/bin</code></pre></li><li><p>创建CA证书</p><pre class=" language-sh"><code class="language-sh">cd /root/sslcat admin-csr.json {"CN": "admin","hosts": [],"key": { "algo": "rsa", "size": 2048},"names": [ {   "C": "CN",   "ST": "ShangHai",   "L": "ShangHai",   "O": "system:masters",   "OU": "System" }]}</code></pre></li><li><p>生成证书和私钥</p><pre class=" language-sh"><code class="language-sh">cfssl gencert -ca=ca.pem \-ca-key=ca-key.pem \-config=ca-config.json \-profile=kubernetes admin-csr.json | cfssljson -bare admin</code></pre></li><li><p>创建($HOME)/.kube/config文件</p><pre class=" language-sh"><code class="language-sh">kubectl config set-cluster kubernetes \--certificate-authority=ca.pem \--embed-certs=true \--server=https://192.168.1.10:8443 \--kubeconfig=kubectl.kubeconfig</code></pre></li><li><p>设置客户端认证参数</p><pre class=" language-sh"><code class="language-sh">kubectl config set-credentials admin \--client-certificate=admin.pem \--client-key=admin-key.pem \--embed-certs=true \--kubeconfig=kubectl.kubeconfig</code></pre></li><li><p>设置上下文参数</p><pre class=" language-sh"><code class="language-sh">kubectl config set-context kubernetes \--cluster=kubernetes \--user=admin \--kubeconfig=kubectl.kubeconfig</code></pre></li><li><p>设置默认上下文</p><pre class=" language-sh"><code class="language-sh">kubectl config use-context kubernetes --kubeconfig=kubectl.kubeconfig</code></pre></li><li><p>拷贝kubectl.kubeconfig文件</p><pre class=" language-sh"><code class="language-sh">cp kubectl.kubeconfig ~/.kube/configssh -n 192.168.1.32 "mkdir -p /root/.kube && exit"ssh -n 192.168.1.33 "mkdir -p /root/.kube && exit"scp kubectl.kubeconfig 192.168.1.32:/root/.kube/configscp kubectl.kubeconfig 192.168.1.33:/root/.kube/configcp admin*.pem /etc/kubernetes/ssl/scp admin*.pem 192.168.1.32:/etc/kubernetes/ssl/scp admin*.pem 192.168.1.33:/etc/kubernetes/ssl/</code></pre></li></ol><h4 id="部署api-server"><a href="#部署api-server" class="headerlink" title="部署api-server"></a>部署api-server</h4><ol><li><p>创建CA证书,hosts字段指定授权使用该证书的IP或域名列表，这里列出了VIP/apiserver节点IP/kubernetes服务IP和域名  </p><pre class=" language-sh"><code class="language-sh">cd /root/sslcat kubernetes-csr.json{"CN": "kubernetes","hosts": [ "127.0.0.1", "192.168.1.31", "192.168.1.32", "192.168.1.33", "192.168.1.10", "10.254.0.1", "kubernetes", "kubernetes.default", "kubernetes.default.svc", "kubernetes.default.svc.cluster", "kubernetes.default.svc.cluster.local"],"key": { "algo": "rsa", "size": 2048},"names": [ {   "C": "CN",   "ST": "ShangHai",   "L": "ShangHai",   "O": "k8s",   "OU": "System" }]}</code></pre></li><li><p>生成证书和私钥</p><pre class=" language-sh"><code class="language-sh">cfssl gencert -ca=ca.pem \-ca-key=ca-key.pem \-config=ca-config.json \-profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes</code></pre></li><li><p>将证书拷贝到其他master节点</p><pre class=" language-sh"><code class="language-sh">cp kubernetes*.pem /etc/kubernetes/ssl/scp kubernetes*.pem 192.168.1.32:/etc/kubernetes/ssl/scp kubernetes*.pem 192.168.1.33:/etc/kubernetes/ssl/</code></pre></li><li><p>创建加密配置文件，创建kube-apiserver使用的客户端令牌文件</p><pre class=" language-sh"><code class="language-sh">cat encryption-config.yamlkind: EncryptionConfigapiVersion: v1resources: - resources:     - secrets   providers:     - aescbc:         keys:           - name: key1             secret: $(head -c 32 /dev/urandom | base64)     - identity: {}cat  bootstrap-token.csv$(head -c 32 /dev/urandom | base64),kubelet-bootstrap,10001,"system:kubelet-bootstrap"</code></pre></li><li><p>将加密文件拷贝到其他master节点</p><pre class=" language-sh"><code class="language-sh">cp encryption-config.yaml bootstrap-token.csv /etc/kubernetes/sslscp encryption-config.yaml bootstrap-token.csv 192.168.1.32:/etc/kubernetes/sslscp encryption-config.yaml bootstrap-token.csv 192.168.1.33:/etc/kubernetes/ssl</code></pre></li><li><p>创建kube-apiserver.service文件</p><pre class=" language-sh"><code class="language-sh">cat /etc/systemd/system/kube-apiserver.service[Unit]Description=Kubernetes API ServerDocumentation=https://github.com/GoogleCloudPlatform/kubernetesAfter=network.target[Service]ExecStart=/usr/local/bin/kube-apiserver \ --enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \ --anonymous-auth=false \ --experimental-encryption-provider-config=/etc/kubernetes/ssl/encryption-config.yaml \ --advertise-address=0.0.0.0 \ --bind-address=0.0.0.0 \ --insecure-bind-address=127.0.0.1 \ --secure-port=6443 \ --insecure-port=0 \ --authorization-mode=Node,RBAC \ --runtime-config=api/all \ --enable-bootstrap-token-auth \ --service-cluster-ip-range=10.254.0.0/16 \ --service-node-port-range=30000-32700 \ --tls-cert-file=/etc/kubernetes/ssl/kubernetes.pem \ --tls-private-key-file=/etc/kubernetes/ssl/kubernetes-key.pem \ --client-ca-file=/etc/kubernetes/ssl/ca.pem \ --kubelet-client-certificate=/etc/kubernetes/ssl/kubernetes.pem \ --kubelet-client-key=/etc/kubernetes/ssl/kubernetes-key.pem \ --service-account-key-file=/etc/kubernetes/ssl/ca-key.pem \ --etcd-cafile=/etc/kubernetes/ssl/ca.pem \ --etcd-certfile=/etc/kubernetes/ssl/kubernetes.pem \ --etcd-keyfile=/etc/kubernetes/ssl/kubernetes-key.pem \ --etcd-servers=https://192.168.1.31:2379,https://192.168.1.32:2379,https://192.168.1.33:2379 \ --enable-swagger-ui=true \ --allow-privileged=true \ --apiserver-count=3 \ --audit-log-maxage=30 \ --audit-log-maxbackup=3 \ --audit-log-maxsize=100 \ --audit-log-path=/var/log/kubernetes/kube-apiserver-audit.log \ --event-ttl=1h \ --alsologtostderr=true \ --logtostderr=false \ --log-dir=/var/log/kubernetes \ --v=2Restart=on-failureRestartSec=5Type=notifyLimitNOFILE=65536[Install]WantedBy=multi-user.targetmkdir -p /var/log/kubernetesssh -n 192.168.1.32 "mkdir -p /var/log/kubernetes && exit"ssh -n 192.168.1.33 "mkdir -p /var/log/kubernetes && exit"scp /etc/systemd/system/kube-apiserver.service 192.168.1.32:/etc/systemd/system/scp /etc/systemd/system/kube-apiserver.service 192.168.1.33:/etc/systemd/system/# --bind-address --insecure-bind-address 填固定IPv4地址，不然启动为ipv6，controller-manager总是报错</code></pre></li><li><p>启动服务</p><pre class=" language-sh"><code class="language-sh">systemctl daemon-reload && systemctl enable kube-apiserver && systemctl start kube-apiserver && systemctl status kube-apiserver</code></pre></li><li><p>授予kubernetes证书访问kubelet api权限。在执行kubectl exec、run、logs 等命令时，apiserver会转发到kubelet。这里定义 RBAC规则，授权apiserver调用kubelet API。</p><pre class=" language-sh"><code class="language-sh">kubectl create clusterrolebinding kube-apiserver:kubelet-apis --clusterrole=system:kubelet-api-admin --user kubernetes＃预定义的ClusterRole system:kubelet-api-admin授予访问kubelet所有 API 的权限kubectl describe clusterrole system:kubelet-api-admin</code></pre></li><li><p>检查api-server和集群状态</p><pre class=" language-sh"><code class="language-sh">netstat -tnlp|grep 6443tcp6       0      0 :::6443                 :::*                    LISTEN      23462/kube-apiserve kubectl cluster-infoKubernetes master is running at https://192.168.1.10:8443To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.kubectl get all --all-namespacesNAMESPACE   NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGEdefault     service/kubernetes   ClusterIP   10.254.0.1   <none>        443/TCP   6m44skubectl get componentstatusesNAME                 STATUS      MESSAGE                                                                                     ERRORscheduler            Unhealthy   Get http://127.0.0.1:10251/healthz: dial tcp 127.0.0.1:10251: connect: connection refused   controller-manager   Unhealthy   Get http://127.0.0.1:10252/healthz: dial tcp 127.0.0.1:10252: connect: connection refused   etcd-0               Healthy     {"health":"true"}                                                                           etcd-1               Healthy     {"health":"true"}                                                                           etcd-2               Healthy     {"health":"true"}</code></pre></li></ol><h4 id="部署kube-controller-manager"><a href="#部署kube-controller-manager" class="headerlink" title="部署kube-controller-manager"></a>部署kube-controller-manager</h4><p>该集群包含 3 个节点，启动后将通过竞争选举机制产生一个 leader 节点，其它节点为阻塞状态。当 leader 节点不可用后，剩余节点将再次进行选举产生新的 leader 节点，从而保证服务的可用性。  </p><ol><li><p>创建CA证书</p><pre class=" language-sh"><code class="language-sh">cd /root/sslcat kube-controller-manager-csr.json { "CN": "system:kube-controller-manager", "key": {     "algo": "rsa",     "size": 2048 }, "hosts": [   "127.0.0.1",   "192.168.1.31",   "192.168.1.32",   "192.168.1.33" ], "names": [   {     "C": "CN",     "ST": "ShangHai",     "L": "ShangHai",     "O": "system:kube-controller-manager",     "OU": "System"   } ]}</code></pre></li><li><p>生成证书</p><pre class=" language-sh"><code class="language-sh">cfssl gencert -ca=ca.pem \-ca-key=ca-key.pem \-config=ca-config.json \-profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager</code></pre></li><li><p>将证书拷贝到其他master节点</p><pre class=" language-sh"><code class="language-sh">cp kube-controller-manager*.pem /etc/kubernetes/ssl/scp kube-controller-manager*.pem 192.168.1.32:/etc/kubernetes/ssl/scp kube-controller-manager*.pem 192.168.1.33:/etc/kubernetes/ssl/</code></pre></li><li><p>创建kubeconfig文件</p><pre class=" language-sh"><code class="language-sh">kubectl config set-cluster kubernetes \ --certificate-authority=ca.pem \ --embed-certs=true \ --server=https://192.168.1.10:8443 \ --kubeconfig=kube-controller-manager.kubeconfigkubectl config set-credentials system:kube-controller-manager \ --client-certificate=kube-controller-manager.pem \ --client-key=kube-controller-manager-key.pem \ --embed-certs=true \ --kubeconfig=kube-controller-manager.kubeconfigkubectl config set-context system:kube-controller-manager \ --cluster=kubernetes \ --user=system:kube-controller-manager \ --kubeconfig=kube-controller-manager.kubeconfigkubectl config use-context system:kube-controller-manager --kubeconfig=kube-controller-manager.kubeconfig</code></pre></li><li><p>拷贝kube-controller-manager.kubeconfig到其他master节点</p><pre class=" language-sh"><code class="language-sh">cp kube-controller-manager.kubeconfig /etc/kubernetes/ssl/scp kube-controller-manager.kubeconfig 192.168.1.32:/etc/kubernetes/ssl/scp kube-controller-manager.kubeconfig 192.168.1.33:/etc/kubernetes/ssl/</code></pre></li><li><p>创建kube-controller-manager.service文件</p><pre class=" language-sh"><code class="language-sh">cat /etc/systemd/system/kube-controller-manager.service [Unit]Description=Kubernetes Controller ManagerDocumentation=https://github.com/GoogleCloudPlatform/kubernetes[Service]ExecStart=/usr/local/bin/kube-controller-manager \ --address=127.0.0.1 \ --master=https://192.168.1.10:8443 \ --kubeconfig=/etc/kubernetes/ssl/kube-controller-manager.kubeconfig \ --allocate-node-cidrs=true \ --authentication-kubeconfig=/etc/kubernetes/ssl/kube-controller-manager.kubeconfig \ --service-cluster-ip-range=10.254.0.0/16 \ --cluster-cidr=172.30.0.0/16 \ --cluster-name=kubernetes \ --cluster-signing-cert-file=/etc/kubernetes/ssl/ca.pem \ --cluster-signing-key-file=/etc/kubernetes/ssl/ca-key.pem \ --experimental-cluster-signing-duration=8760h \ --leader-elect=true \ --feature-gates=RotateKubeletServerCertificate=true \ --controllers=*,bootstrapsigner,tokencleaner \ --horizontal-pod-autoscaler-use-rest-clients=true \ --horizontal-pod-autoscaler-sync-period=10s \ --tls-cert-file=/etc/kubernetes/ssl/kube-controller-manager.pem \ --tls-private-key-file=/etc/kubernetes/ssl/kube-controller-manager-key.pem \ --service-account-private-key-file=/etc/kubernetes/ssl/ca-key.pem \ --root-ca-file=/etc/kubernetes/ssl/ca.pem \ --use-service-account-credentials=true \ --alsologtostderr=true \ --logtostderr=false \ --log-dir=/var/log/kubernetes \ --v=2Restart=onRestart=on-failureRestartSec=5[Install]WantedBy=multi-user.target</code></pre></li><li><p>拷贝到其他master节点，然后启动服务</p><pre class=" language-sh"><code class="language-sh">scp /etc/systemd/system/kube-controller-manager.service 192.168.1.32:/etc/systemd/system/scp /etc/systemd/system/kube-controller-manager.service 192.168.1.33:/etc/systemd/system/systemctl daemon-reload && systemctl enable kube-controller-manager && systemctl start kube-controller-manager && systemctl status kube-controller-manager</code></pre></li><li><p>检查服务</p><pre class=" language-sh"><code class="language-sh">netstat -tnlp|grep kube-controlltcp        0      0 127.0.0.1:10252         0.0.0.0:*               LISTEN      24125/kube-controll tcp6       0      0 :::10257                :::*                    LISTEN      24125/kube-controllkubectl get csNAME                 STATUS      MESSAGE                                                                                     ERRORscheduler            Unhealthy   Get http://127.0.0.1:10251/healthz: dial tcp 127.0.0.1:10251: connect: connection refused   controller-manager   Healthy     ok                                                                                          etcd-0               Healthy     {"health":"true"}                                                                           etcd-1               Healthy     {"health":"true"}                                                                           etcd-2               Healthy     {"health":"true"}检查leader所在机器,如下k8s-master1选为leaderkubectl get endpoints kube-controller-manager --namespace=kube-system -o yamlapiVersion: v1kind: Endpointsmetadata: annotations:   control-plane.alpha.kubernetes.io/leader: '{"holderIdentity":"k8s-master1_836ddc44-c586-11e9-94e1-000c29178d85","leaseDurationSeconds":15,"acquireTime":"2019-08-23T09:15:13Z","renewTime":"2019-08-23T09:16:49Z","leaderTransitions":0}' creationTimestamp: "2019-08-23T09:15:13Z" name: kube-controller-manager namespace: kube-system resourceVersion: "654" selfLink: /api/v1/namespaces/kube-system/endpoints/kube-controller-manager uid: 8371cd23-c586-11e9-b643-000c29327412</code></pre></li></ol><h4 id="部署kube-scheduler"><a href="#部署kube-scheduler" class="headerlink" title="部署kube-scheduler"></a>部署kube-scheduler</h4><p>该集群包含 3 个节点，启动后将通过竞争选举机制产生一个 leader 节点，其它节点为阻塞状态。当 leader 节点不可用后，剩余节点将再次进行选举产生新的 leader 节点，从而保证服务的可用性</p><ol><li><p>创建CA证书</p><pre class=" language-sh"><code class="language-sh">cd /root/sslcat kube-scheduler-csr.json { "CN": "system:kube-scheduler", "hosts": [   "127.0.0.1",   "192.168.1.31",   "192.168.1.32",   "192.168.1.33" ], "key": {     "algo": "rsa",     "size": 2048 }, "names": [   {     "C": "CN",     "ST": "ShangHai",     "L": "ShangHai",     "O": "system:kube-scheduler",     "OU": "System"   } ]}</code></pre></li><li><p>生成证书</p><pre class=" language-sh"><code class="language-sh">cfssl gencert -ca=ca.pem \-ca-key=ca-key.pem \-config=ca-config.json \-profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler</code></pre></li><li><p>创建kube-scheduler.kubeconfig文件</p><pre class=" language-sh"><code class="language-sh">kubectl config set-cluster kubernetes \ --certificate-authority=ca.pem \ --embed-certs=true \ --server=https://192.168.1.10:8443 \ --kubeconfig=kube-scheduler.kubeconfigkubectl config set-credentials system:kube-scheduler \ --client-certificate=kube-scheduler.pem \ --client-key=kube-scheduler-key.pem \ --embed-certs=true \ --kubeconfig=kube-scheduler.kubeconfigkubectl config set-context system:kube-scheduler \ --cluster=kubernetes \ --user=system:kube-scheduler \ --kubeconfig=kube-scheduler.kubeconfigkubectl config use-context system:kube-scheduler --kubeconfig=kube-scheduler.kubeconfig</code></pre></li><li><p>拷贝kubeconfig到其他master节点</p><pre class=" language-sh"><code class="language-sh">cp kube-scheduler.kubeconfig kube-scheduler*.pem /etc/kubernetes/ssl/scp kube-scheduler.kubeconfig kube-scheduler*.pem 192.168.1.32:/etc/kubernetes/ssl/scp kube-scheduler.kubeconfig kube-scheduler*.pem 192.168.1.33:/etc/kubernetes/ssl/</code></pre></li><li><p>创建kube-scheduler.service文件</p><pre class=" language-sh"><code class="language-sh">cat /etc/systemd/system/kube-scheduler.service [Unit]Description=Kubernetes SchedulerDocumentation=https://github.com/GoogleCloudPlatform/kubernetes[Service]ExecStart=/usr/local/bin/kube-scheduler \ --address=127.0.0.1 \ --master=https://192.168.1.10:8443 \ --kubeconfig=/etc/kubernetes/ssl/kube-scheduler.kubeconfig \ --leader-elect=true \ --alsologtostderr=true \ --logtostderr=false \ --log-dir=/var/log/kubernetes \ --v=2Restart=on-failureRestartSec=5[Install]WantedBy=multi-user.targetEOF</code></pre></li><li><p>将kube-scheduler.service拷贝到其他master节点，然后启动服务</p><pre class=" language-sh"><code class="language-sh">scp /etc/systemd/system/kube-scheduler.service 192.168.1.32:/etc/systemd/systemscp /etc/systemd/system/kube-scheduler.service 192.168.1.33:/etc/systemd/systemsystemctl daemon-reload && systemctl enable kube-scheduler && systemctl start kube-scheduler && systemctl status kube-scheduler</code></pre></li><li><p>检查服务</p><pre class=" language-sh"><code class="language-sh">netstat -lnpt|grep kube-schedtcp        0      0 127.0.0.1:10251         0.0.0.0:*               LISTEN      24760/kube-schedule tcp6       0      0 :::10259                :::*                    LISTEN      24760/kube-schedule kubectl get csNAME                 STATUS    MESSAGE             ERRORcontroller-manager   Healthy   ok                  scheduler            Healthy   ok                  etcd-2               Healthy   {"health":"true"}   etcd-0               Healthy   {"health":"true"}   etcd-1               Healthy   {"health":"true"} kubectl get endpoints kube-scheduler --namespace=kube-system  -o yamlapiVersion: v1kind: Endpointsmetadata: annotations:   control-plane.alpha.kubernetes.io/leader: '{"holderIdentity":"k8s-master3_74560974-c588-11e9-b994-000c297ea248","leaseDurationSeconds":15,"acquireTime":"2019-08-23T09:29:07Z","renewTime":"2019-08-23T09:30:38Z","leaderTransitions":0}' creationTimestamp: "2019-08-23T09:29:07Z" name: kube-scheduler namespace: kube-system resourceVersion: "1365" selfLink: /api/v1/namespaces/kube-system/endpoints/kube-scheduler uid: 74ec81d5-c588-11e9-b643-000c29327412</code></pre></li></ol><h4 id="在所有master节点上查看功能是否正常"><a href="#在所有master节点上查看功能是否正常" class="headerlink" title="在所有master节点上查看功能是否正常"></a>在所有master节点上查看功能是否正常</h4><pre class=" language-sh"><code class="language-sh">kubectl get componentstatusesNAME                 STATUS    MESSAGE             ERRORcontroller-manager   Healthy   ok                  scheduler            Healthy   ok                  etcd-2               Healthy   {"health":"true"}   etcd-1               Healthy   {"health":"true"}   etcd-0               Healthy   {"health":"true"}</code></pre><h3 id="部署node"><a href="#部署node" class="headerlink" title="部署node"></a>部署node</h3><p>node节点运行 <code>docker flannel kubelet kube-proxy</code></p><p><strong><em>先配置Centos环境,完成安装前配置和Docker，flannel的安装</em></strong></p><ol><li>安装flanneld<br><strong><em>将master上的文件cp到worker节点，并且安装启动flanneld</em></strong><pre class=" language-sh"><code class="language-sh">ssh -n 192.168.1.35 "mkdir -p /etc/kubernetes/ssl && exit"scp ca.pem 192.168.1.35:/etc/kubernetes/sslscp flanneld*.pem 192.168.1.35:/etc/kubernetes/ssl</code></pre>之后完成部署flannel中的安装flannel</li></ol><h4 id="部署kubelet"><a href="#部署kubelet" class="headerlink" title="部署kubelet"></a>部署kubelet</h4><p>kubelet运行在每个 worker 节点上，接收 kube-apiserver 发送的请求，管理 Pod 容器，执行交互式命令，如 exec、run、logs 等。kubelet 启动时自动向 kube-apiserver注册节点信息，内置的 cadvisor 统计和监控节点的资源使用情况。</p><ol><li>下载解压包，拷贝命令(worker节点)<pre class=" language-sh"><code class="language-sh">wget https://storage.googleapis.com/kubernetes-release/release/v1.14.3/kubernetes-node-linux-amd64.tar.gztar -zxvf kubernetes-node-linux-amd64.tar.gzcp kubectl kubelet kube-proxy /usr/local/bin</code></pre></li><li>创建kubelet-bootstrap.kubeconfig文件,要创建3次分别是(k8s-master1,k8s-master2,k8s-master3),都在master1上执行</li></ol><ul><li><p>k8s-master1:</p><pre class=" language-sh"><code class="language-sh">#创建tokencd /root/sslexport BOOTSTRAP_TOKEN=$(kubeadm token create \  --description kubelet-bootstrap-token \  --groups system:bootstrappers:k8s-master1 \  --kubeconfig ~/.kube/config)#设置集群参数kubectl config set-cluster kubernetes \  --certificate-authority=ca.pem \  --embed-certs=true \  --server=https://192.168.1.10:8443 \  --kubeconfig=kubelet-bootstrap-k8s-master1.kubeconfig#设置客户端认证参数kubectl config set-credentials kubelet-bootstrap \  --token=${BOOTSTRAP_TOKEN} \  --kubeconfig=kubelet-bootstrap-k8s-master1.kubeconfig#设置上下文参数kubectl config set-context default \  --cluster=kubernetes \  --user=kubelet-bootstrap \  --kubeconfig=kubelet-bootstrap-k8s-master1.kubeconfig#设置默认上下文kubectl config use-context default --kubeconfig=kubelet-bootstrap-k8s-master1.kubeconfig</code></pre></li><li><p>k8s-master2:</p><pre class=" language-sh"><code class="language-sh">#创建tokencd /root/sslexport BOOTSTRAP_TOKEN=$(kubeadm token create \  --description kubelet-bootstrap-token \  --groups system:bootstrappers:k8s-master2 \  --kubeconfig ~/.kube/config)#设置集群参数kubectl config set-cluster kubernetes \  --certificate-authority=ca.pem \  --embed-certs=true \  --server=https://192.168.1.10:8443 \  --kubeconfig=kubelet-bootstrap-k8s-master2.kubeconfig#设置客户端认证参数kubectl config set-credentials kubelet-bootstrap \  --token=${BOOTSTRAP_TOKEN} \  --kubeconfig=kubelet-bootstrap-k8s-master2.kubeconfig#设置上下文参数kubectl config set-context default \  --cluster=kubernetes \  --user=kubelet-bootstrap \  --kubeconfig=kubelet-bootstrap-k8s-master2.kubeconfig#设置默认上下文kubectl config use-context default --kubeconfig=kubelet-bootstrap-k8s-master2.kubeconfig</code></pre></li><li><p>k8s-master3:</p><pre class=" language-sh"><code class="language-sh">#创建tokencd /root/sslexport BOOTSTRAP_TOKEN=$(kubeadm token create \  --description kubelet-bootstrap-token \  --groups system:bootstrappers:k8s-master3 \  --kubeconfig ~/.kube/config)#设置集群参数kubectl config set-cluster kubernetes \  --certificate-authority=ca.pem \  --embed-certs=true \  --server=https://192.168.1.10:8443 \  --kubeconfig=kubelet-bootstrap-k8s-master3.kubeconfig#设置客户端认证参数kubectl config set-credentials kubelet-bootstrap \  --token=${BOOTSTRAP_TOKEN} \  --kubeconfig=kubelet-bootstrap-k8s-master3.kubeconfig#设置上下文参数kubectl config set-context default \  --cluster=kubernetes \  --user=kubelet-bootstrap \  --kubeconfig=kubelet-bootstrap-k8s-master3.kubeconfig#设置默认上下文kubectl config use-context default --kubeconfig=kubelet-bootstrap-k8s-master3.kubeconfig</code></pre></li></ul><ol><li><p>查看kubeadm为各节点创建的token(各master节点都可以查看)</p><pre class=" language-sh"><code class="language-sh">kubeadm token list --kubeconfig ~/.kube/config#显示如下TOKEN                     TTL       EXPIRES                     USAGES                   DESCRIPTION               EXTRA GROUPS3exm03.8530h7t1j1v1sfl5   22h       2019-08-28T18:00:05+08:00   authentication,signing   kubelet-bootstrap-token   system:bootstrappers:k8s-master16p1ewd.om5m45f26imnd7an   22h       2019-08-28T18:00:05+08:00   authentication,signing   kubelet-bootstrap-token   system:bootstrappers:k8s-master2l9yyz0.6g13y8ffsdab9lo5   22h       2019-08-28T18:00:05+08:00   authentication,signing   kubelet-bootstrap-token   system:bootstrappers:k8s-master3# 如果需要删除创建的tokenkubeadm token --kubeconfig ~/.kube/config delete l9yyz0.6g13y8ffsdab9lo5# 查看各token关联的secretkubectl get secrets  -n kube-system</code></pre></li><li><p>拷贝bootstrap kubeconfig文件到各个node机器上</p><pre class=" language-sh"><code class="language-sh">ssh -n 192.168.1.35 "mkdir -p /etc/kubernetes/ssl && exit"scp kubelet-bootstrap-k8s-master1.kubeconfig 192.168.1.35:/etc/kubernetes/ssl/kubelet-bootstrap.kubeconfigscp kubelet-bootstrap-k8s-master2.kubeconfig 192.168.1.35:/etc/kubernetes/ssl/kubelet-bootstrap.kubeconfigscp kubelet-bootstrap-k8s-master3.kubeconfig 192.168.1.35:/etc/kubernetes/ssl/kubelet-bootstrap.kubeconfig</code></pre></li><li><p>创建kubelet配置文件</p><pre class=" language-sh"><code class="language-sh">cd /root/sslcat kubelet.config.json {"kind": "KubeletConfiguration","apiVersion": "kubelet.config.k8s.io/v1beta1","authentication": { "x509": {   "clientCAFile": "/etc/kubernetes/ssl/ca.pem" }, "webhook": {   "enabled": true,   "cacheTTL": "2m0s" }, "anonymous": {   "enabled": false }},"authorization": { "mode": "Webhook", "webhook": {   "cacheAuthorizedTTL": "5m0s",   "cacheUnauthorizedTTL": "30s" }},"address": "192.168.1.35","port": 10250,"readOnlyPort": 0,"cgroupDriver": "cgroupfs","hairpinMode": "promiscuous-bridge","serializeImagePulls": false,"featureGates": { "RotateKubeletClientCertificate": true, "RotateKubeletServerCertificate": true},"clusterDomain": "cluster.local","clusterDNS": ["10.254.0.2"]}</code></pre></li><li><p>拷贝到其他主机,注意，可以修改address为本机IP地址</p><pre class=" language-sh"><code class="language-sh">cp kubelet.config.json /etc/kubernetes/sslscp kubelet.config.json 192.168.1.35:/etc/kubernetes/ssl</code></pre></li><li><p>创建kubelet.service文件(worker节点)</p><pre class=" language-sh"><code class="language-sh">mkdir -p /var/log/kubernetes && mkdir -p /var/lib/kubeletcat  /etc/systemd/system/kubelet.service [Unit]Description=Kubernetes KubeletDocumentation=https://github.com/GoogleCloudPlatform/kubernetesAfter=docker.serviceRequires=docker.service[Service]WorkingDirectory=/var/lib/kubeletExecStart=/usr/local/bin/kubelet \ --bootstrap-kubeconfig=/etc/kubernetes/ssl/kubelet-bootstrap.kubeconfig \ --cert-dir=/etc/kubernetes/ssl \ --network-plugin=cni \ --cni-conf-dir=/etc/cni/net.d \ --cni-bin-dir=/usr/local/bin/ \ --fail-swap-on=false \ --kubeconfig=/etc/kubernetes/ssl/kubelet-bootstrap.kubeconfig \ --config=/etc/kubernetes/ssl/kubelet.config.json \ --hostname-override=192.168.1.35 \ --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1 \ --allow-privileged=true \ --alsologtostderr=true \ --logtostderr=false \ --cgroup-driver=systemd \ --log-dir=/var/log/kubernetes \ --v=2Restart=on-failureRestartSec=5[Install]WantedBy=multi-user.target</code></pre></li></ol><p><strong><em>Bootstrap Token Auth 和授予权限 ,需要先将bootstrap-token文件中的kubelet-bootstrap用户赋予system:node-bootstrapper角色，然后kubelet才有权限创建认证请求</em></strong></p><pre class=" language-sh"><code class="language-sh">kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --group=system:bootstrappers</code></pre><ol><li><p>启动kubele服务</p><pre class=" language-sh"><code class="language-sh">systemctl daemon-reload && systemctl enable kubelet && systemctl restart kubelet && systemctl status kubelet</code></pre></li><li><p>检查服务</p><pre class=" language-sh"><code class="language-sh">netstat -lantp|grep kubelet# 通过kubelet 的TLS 证书请求，kubelet 首次启动时向kube-apiserver 发送证书签名请求，必须通过后kubernetes 系统才会将该 Node 加入到集群。查看未授权的CSR 请求kubectl get csrNAME                                                   AGE   REQUESTOR                 CONDITIONnode-csr-F0yftUyMpWGyDFRPUoGfF5XgbtPFEfyakLidUu9GY6c   99m   system:bootstrap:balnwx   Pending</code></pre></li><li><p>approve kubelet csr请求(手动和自动选其一)</p></li><li><p>手动approve csr请求(推荐自动的方式)</p><pre class=" language-sh"><code class="language-sh">kubectl certificate approve node-csr-YNCI2r5QgwPTj4JR7X0VswSR0klbgG2rZ6R7rb_NIcs#显示certificatesigningrequest.certificates.k8s.io/node-csr-YNCI2r5QgwPTj4JR7X0VswSR0klbgG2rZ6R7rb_NIcs approved#查看结果kubectl describe csr node-csr-YNCI2r5QgwPTj4JR7X0VswSR0klbgG2rZ6R7rb_NIcsName:               node-csr-YNCI2r5QgwPTj4JR7X0VswSR0klbgG2rZ6R7rb_NIcsLabels:             <none>Annotations:        <none>CreationTimestamp:  Tue, 27 Aug 2019 17:23:29 +0800Requesting User:    system:bootstrap:balnwxStatus:             Approved,IssuedSubject:       Common Name:    system:node:192.168.1.35       Serial Number:         Organization:   system:nodesEvents:  <none></code></pre></li><li><p>自动approve csr请求方式</p><pre class=" language-sh"><code class="language-sh">#创建ClusterRoleBinding，分别用于自动 approve client、renew client、renew server 证书cd /root/sslcat csr-crb.yaml # Approve all CSRs for the group "system:bootstrappers" kind: ClusterRoleBinding apiVersion: rbac.authorization.k8s.io/v1 metadata:   name: auto-approve-csrs-for-group subjects: - kind: Group   name: system:bootstrappers   apiGroup: rbac.authorization.k8s.io roleRef:   kind: ClusterRole   name: system:certificates.k8s.io:certificatesigningrequests:nodeclient   apiGroup: rbac.authorization.k8s.io--- # To let a node of the group "system:bootstrappers" renew its own credentials kind: ClusterRoleBinding apiVersion: rbac.authorization.k8s.io/v1 metadata:   name: node-client-cert-renewal subjects: - kind: Group   name: system:bootstrappers   apiGroup: rbac.authorization.k8s.io roleRef:   kind: ClusterRole   name: system:certificates.k8s.io:certificatesigningrequests:selfnodeclient   apiGroup: rbac.authorization.k8s.io---# A ClusterRole which instructs the CSR approver to approve a node requesting a# serving cert matching its client cert.kind: ClusterRoleapiVersion: rbac.authorization.k8s.io/v1metadata:  name: approve-node-server-renewal-csrrules:- apiGroups: ["certificates.k8s.io"]  resources: ["certificatesigningrequests/selfnodeserver"]  verbs: ["create"]--- # To let a node of the group "system:nodes" renew its own server credentials kind: ClusterRoleBinding apiVersion: rbac.authorization.k8s.io/v1 metadata:   name: node-server-cert-renewal subjects: - kind: Group   name: system:nodes   apiGroup: rbac.authorization.k8s.io roleRef:   kind: ClusterRole   name: approve-node-server-renewal-csr   apiGroup: rbac.authorization.k8s.io#拷贝到其他master节点上cp csr-crb.yaml /etc/kubernetes/sslscp csr-crb.yaml 192.168.1.32:/etc/kubernetes/sslscp csr-crb.yaml 192.168.1.33:/etc/kubernetes/ssl#生效配置kubectl apply -f /etc/kubernetes/ssl/csr-crb.yaml</code></pre></li><li><p>查看</p><pre class=" language-sh"><code class="language-sh">kubectl get --all-namespaces -o wide nodesNAME           STATUS   ROLES    AGE   VERSION   INTERNAL-IP    EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION               CONTAINER-RUNTIME192.168.1.35   Ready    <none>   7m    v1.14.3   192.168.1.35   <none>        CentOS Linux 7 (Core)   3.10.0-957.27.2.el7.x86_64   docker://19.3.1</code></pre></li></ol><h4 id="部署kube-proxy"><a href="#部署kube-proxy" class="headerlink" title="部署kube-proxy"></a>部署kube-proxy</h4><p>kube-proxy 运行在所有 worker 节点上，，它监听 apiserver 中 service 和 Endpoint 的变化情况，创建路由规则来进行服务负载均衡。</p><ol><li><p>创建kube-proxy证书</p><pre class=" language-sh"><code class="language-sh">cd /root/sslcat kube-proxy-csr.json {"CN": "system:kube-proxy","key": { "algo": "rsa", "size": 2048},"names": [ {   "C": "CN",   "ST": "ShangHai",   "L": "ShangHai",   "O": "k8s",   "OU": "System" }]}</code></pre></li><li><p>生成证书和私钥</p><pre class=" language-sh"><code class="language-sh">cfssl gencert -ca=ca.pem \-ca-key=ca-key.pem \-config=ca-config.json \-profile=kubernetes  kube-proxy-csr.json | cfssljson -bare kube-proxy</code></pre></li><li><p>创建kubeconfig文件</p><pre class=" language-sh"><code class="language-sh">#设置集群参数kubectl config set-cluster kubernetes \ --certificate-authority=ca.pem \ --embed-certs=true \ --server=https://192.168.1.10:8443 \ --kubeconfig=kube-proxy.kubeconfig#设置客户端认证参数kubectl config set-credentials kube-proxy \ --client-certificate=kube-proxy.pem \ --client-key=kube-proxy-key.pem \ --embed-certs=true \ --kubeconfig=kube-proxy.kubeconfig#设置上下文参数kubectl config set-context default \ --cluster=kubernetes \ --user=kube-proxy \ --kubeconfig=kube-proxy.kubeconfig#设置默认上下文kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig</code></pre></li><li><p>拷贝到worker节点</p><pre class=" language-sh"><code class="language-sh">scp kube-proxy*.pem kube-proxy.kubeconfig 192.168.1.35:/etc/kubernetes/ssl/</code></pre></li><li><p>创建kube-proxy配置文件</p><pre class=" language-sh"><code class="language-sh">cd /root/sslcatkube-proxy.config.yaml apiVersion: kubeproxy.config.k8s.io/v1alpha1bindAddress: 192.168.1.35clientConnection:kubeconfig: /etc/kubernetes/ssl/kube-proxy.kubeconfigclusterCIDR: 172.30.0.0/16healthzBindAddress: 192.168.1.35:10256hostnameOverride: 192.168.1.35kind: KubeProxyConfigurationmetricsBindAddress: 192.168.1.35:10249mode: "ipvs"</code></pre></li><li><p>拷贝到其他节点</p><pre class=" language-sh"><code class="language-sh">scp kube-proxy.config.yaml 192.168.1.35:/etc/kubernetes/ssl/</code></pre></li><li><p>创建kube-proxy.service文件(worker节点)</p><pre class=" language-sh"><code class="language-sh">cat /etc/systemd/system/kube-proxy.service[Unit]Description=Kubernetes Kube-Proxy ServerDocumentation=https://github.com/GoogleCloudPlatform/kubernetesAfter=network.target[Service]WorkingDirectory=/var/lib/kube-proxyExecStart=/usr/local/bin/kube-proxy \ --config=/etc/kubernetes/ssl/kube-proxy.config.yaml \ --alsologtostderr=true \ --logtostderr=false \ --log-dir=/var/log/kubernetes/kube-proxy \ --v=2Restart=on-failureRestartSec=5LimitNOFILE=65536[Install]WantedBy=multi-user.target</code></pre></li><li><p>启动kube-proxy服务(worker节点)</p><pre class=" language-sh"><code class="language-sh">mkdir -p /var/lib/kube-proxy && mkdir -p /var/log/kubernetes/kube-proxysystemctl daemon-reload && systemctl enable kube-proxy && systemctl restart kube-proxy && systemctl status kube-proxy</code></pre></li><li><p>检查</p><pre class=" language-sh"><code class="language-sh">netstat -lnpt|grep kube-proxytcp        0      0 192.168.1.35:10249      0.0.0.0:*               LISTEN      1031/kube-proxy     tcp        0      0 192.168.1.35:10256      0.0.0.0:*               LISTEN      1031/kube-proxy  ipvsadm -ln#显示如下IP Virtual Server version 1.2.1 (size=4096)Prot LocalAddress:Port Scheduler Flags -> RemoteAddress:Port           Forward Weight ActiveConn InActConnTCP  10.254.0.1:443 rr -> 192.168.1.31:6443            Masq    1      0          0          -> 192.168.1.32:6443            Masq    1      0          0          -> 192.168.1.33:6443            Masq    1      0          0         TCP  10.254.189.67:80 rr -> 172.30.87.3:80               Masq    1      0          0</code></pre></li><li><p>测试集群可用性</p><pre class=" language-sh"><code class="language-sh">#创建一个podkubectl run nginx --image=nginx#查看pod状态kubectl get pod -o wideNAME                     READY   STATUS    RESTARTS   AGE   IP            NODE           NOMINATED NODE   READINESS GATESnginx-7db9fccd9b-glrx5   1/1     Running   0          27m   172.30.87.3   192.168.1.35   <none>           <none>#测试IP是否ping通ping -c4 172.30.87.3PING 172.30.87.3 (172.30.87.3) 56(84) bytes of data.64 bytes from 172.30.87.3: icmp_seq=1 ttl=63 time=0.372 ms64 bytes from 172.30.87.3: icmp_seq=2 ttl=63 time=0.188 ms64 bytes from 172.30.87.3: icmp_seq=3 ttl=63 time=0.160 ms64 bytes from 172.30.87.3: icmp_seq=4 ttl=63 time=0.169 ms--- 172.30.87.3 ping statistics ---4 packets transmitted, 4 received, 0% packet loss, time 2999msrtt min/avg/max/mdev = 0.160/0.222/0.372/0.087 ms#创建服务kubectl expose deployment nginx --name=nginx --port=80 --target-port=80 --type=NodePortservice/nginx exposed#查看服务kubectl get svc -o wideNAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE    SELECTORkubernetes   ClusterIP   10.254.0.1      <none>        443/TCP        2d1h   <none>nginx        NodePort    10.254.215.97   <none>        80:31401/TCP   31s    run=nginx#访问curl访问node_ip：nodeportcurl -I 192.168.1.35:31401HTTP/1.1 200 OKServer: nginx/1.17.3Date: Wed, 28 Aug 2019 10:06:40 GMTContent-Type: text/htmlContent-Length: 612Last-Modified: Tue, 13 Aug 2019 08:50:00 GMTConnection: keep-aliveETag: "5d5279b8-264"Accept-Ranges: bytes#在flannel worker主机上访问集群IPip add | grep 10.254   inet 10.254.0.1/32 brd 10.254.0.1 scope global kube-ipvs0   inet 10.254.189.67/32 brd 10.254.189.67 scope global kube-ipvs0   inet 10.254.215.97/32 brd 10.254.215.97 scope global kube-ipvs0curl -I http://10.254.189.67:80HTTP/1.1 200 OKServer: nginx/1.17.3Date: Wed, 28 Aug 2019 10:10:26 GMTContent-Type: text/htmlContent-Length: 612Last-Modified: Tue, 13 Aug 2019 08:50:00 GMTConnection: keep-aliveETag: "5d5279b8-264"Accept-Ranges: bytes</code></pre></li></ol><h3 id="部署coredns插件"><a href="#部署coredns插件" class="headerlink" title="部署coredns插件"></a>部署coredns插件</h3><p>插件是集群的附件组件，丰富和完善了集群的功能</p><pre class=" language-sh"><code class="language-sh">  #将kubernetes-server-linux-amd64.tar.gz解压后，再解压其中的 kubernetes-src.tar.gz 文件,获取coredns配置文件  tar -zxvf kubernetes-server-linux-amd64.tar.gz  cd kubernetes  mkdir src  tar -zxvf kubernetes-src.tar.gz -C src  cd src/cluster/addons/dns/coredns  cp coredns.yaml.base /etc/kubernetes/coredns.yaml  sed -i "s/__PILLAR__DNS__DOMAIN__/cluster.local/g" /etc/kubernetes/coredns.yaml  sed -i "s/__PILLAR__DNS__SERVER__/10.254.0.2/g" /etc/kubernetes/coredns.yaml  #创建coredns  kubectl create -f /etc/kubernetes/coredns.yaml  serviceaccount/coredns created  clusterrole.rbac.authorization.k8s.io/system:coredns created  clusterrolebinding.rbac.authorization.k8s.io/system:coredns created  configmap/coredns created  deployment.apps/coredns created  service/kube-dns created  #检查codedns功能  kubectl -n kube-system get all -o wide  NAME                           READY   STATUS             RESTARTS   AGE     IP            NODE           NOMINATED NODE   READINESS GATES  pod/coredns-5b969f4c88-7l7c9   0/1     ImagePullBackOff   0          4m18s   172.30.87.4   192.168.1.35   <none>           <none>  NAME               TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE     SELECTOR  service/kube-dns   ClusterIP   10.254.0.2   <none>        53/UDP,53/TCP,9153/TCP   4m18s   k8s-app=kube-dns  NAME                      READY   UP-TO-DATE   AVAILABLE   AGE     CONTAINERS   IMAGES                     SELECTOR  deployment.apps/coredns   0/1     1            0           4m18s   coredns      k8s.gcr.io/coredns:1.3.1   k8s-app=kube-dns  NAME                                 DESIRED   CURRENT   READY   AGE     CONTAINERS   IMAGES                     SELECTOR  replicaset.apps/coredns-5b969f4c88   1         1         0       4m18s   coredns      k8s.gcr.io/coredns:1.3.1   k8s-app=kube-dns,pod-template-hash=5b969f4c88  # ImagePullBackOff 镜像下载失败，修改  sed -i "s/k8s.gcr.io/coredns/g" /etc/kubernetes/coredns.yaml  kubectl apply -f /etc/kubernetes/coredns.yaml     Warning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectl apply  serviceaccount/coredns configured  Warning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectl apply  clusterrole.rbac.authorization.k8s.io/system:coredns configured  Warning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectl apply  clusterrolebinding.rbac.authorization.k8s.io/system:coredns configured  Warning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectl apply  configmap/coredns configured  Warning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectl apply  deployment.apps/coredns configured  Warning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectl apply  service/kube-dns configured  # 再次查看  kubectl -n kube-system get all -o wide</code></pre><h3 id="部署dashboard插件"><a href="#部署dashboard插件" class="headerlink" title="部署dashboard插件"></a>部署dashboard插件</h3><p>将kubernetes-server-linux-amd64.tar.gz 解压后，再解压其中的 kubernetes-src.tar.gz 文件。dashboard 对应的目录是：cluster/addons/dashboard ，拷贝dashboard的文件</p><pre class=" language-sh"><code class="language-sh">#配置文件  cd kubernetes/src/cluster/addons/dashboard  mkdir -p /etc/kubernetes/dashboard  cp *.yaml /etc/kubernetes/dashboard/  cd /etc/kubernetes/dashboard  sed -i "s@image:.*@image: registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.10.1@g" dashboard-controller.yaml  sed -i "/spec/a\  type: NodePort" dashboard-service.yaml  sed -i "/targetPort/a\    nodePort: 32700" dashboard-service.yaml  #执行所有  kubectl create -f /etc/kubernetes/dashboard  configmap/kubernetes-dashboard-settings created  serviceaccount/kubernetes-dashboard created  deployment.apps/kubernetes-dashboard created  role.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created  rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created  secret/kubernetes-dashboard-certs created  secret/kubernetes-dashboard-key-holder created  service/kubernetes-dashboard created  #查看分配的NodePort  kubectl -n kube-system get all -o wide  kubectl get pod -o wide -n kube-system        NAME                                    READY   STATUS    RESTARTS   AGE    IP            NODE           NOMINATED NODE   READINESS GATES  coredns-8854569d4-7w7gb                 1/1     Running   0          21m    172.30.87.5   192.168.1.35   <none>           <none>  kubernetes-dashboard-7d5f7c58f5-c5nxc   1/1     Running   0          3m6s   172.30.87.7   192.168.1.35   <none>           <none>  kubectl get svc -o wide -n kube-system   NAME                   TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE     SELECTOR  kube-dns               ClusterIP   10.254.0.2       <none>        53/UDP,53/TCP,9153/TCP   28m     k8s-app=kube-dns  kubernetes-dashboard   NodePort    10.254.219.188   <none>        443:32700/TCP            3m13s   k8s-app=kubernetes-dashboard  #此时可访问dashboard https://192.168.1.35:32700，但需要口令，使用帮助命令  kubectl exec -n kube-system -it kubernetes-dashboard-7d5f7c58f5-c5nxc -- /dashboard --help  #创建登录token  kubectl create sa dashboard-admin -n kube-system  serviceaccount/dashboard-admin created  kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin  clusterrolebinding.rbac.authorization.k8s.io/dashboard-admin created  ADMIN_SECRET=$(kubectl get secrets -n kube-system | grep dashboard-admin | awk '{print $1}')  DASHBOARD_LOGIN_TOKEN=$(kubectl describe secret -n kube-system ${ADMIN_SECRET} | grep -E '^token' | awk '{print $2}')  echo ${DASHBOARD_LOGIN_TOKEN} # 使用输出的DASHBOARD_LOGIN_TOKEN登录</code></pre><p><a href="https://www.cnblogs.com/fan-gx/p/11108276.html" target="_blank" rel="noopener"><strong>本文来源参照</strong></a>  <a href="https://www.cnblogs.com/fan-gx/p/11108276.html" target="_blank" rel="noopener"><strong>本文来源参照</strong></a>  <a href="https://www.cnblogs.com/fan-gx/p/11108276.html" target="_blank" rel="noopener"><strong>本文来源参照</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hive添加用户权限</title>
      <link href="/2019/07/02/2019-07-02-hive%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/"/>
      <url>/2019/07/02/2019-07-02-hive%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在前面<a href="https://ngames-dev.cn/2019/06/30/hadoop+hive+hbase%E7%8E%AF%E5%A2%83/">hadoop+hive+hbase环境</a>里面，hive部分简单的配置了基于MySQL的本地模式安装<br>但是考虑到安全，需要给hive添加认证登陆<br>而且，使用hive命令beeline链接hive，也是强行需要密码的</p></blockquote><p>在之前的hive-site.xml配置中，<code>hive.server2.authentication</code> 的配置为NONE，表示没有用户认证。<br>而HiveServer2支持多种用户安全认证方式：NONE,NOSASL, KERBEROS, LDAP, PAM ,CUSTOM等等，在此，我们使用CUSTOM自定义安全认证  </p><a id="more"></a><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>安全认证代码  </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hive<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>HiveConf<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>service<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>PasswdAuthenticationProvider<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>security<span class="token punctuation">.</span>sasl<span class="token punctuation">.</span>AuthenticationException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author SakuraGaara * @date 2019/07/01 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomPasswdAuthenticator</span> <span class="token keyword">implements</span> <span class="token class-name">PasswdAuthenticationProvider</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Logger LOG <span class="token operator">=</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>CustomPasswdAuthenticator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String HIVE_JDBC_PASSWD_AUTH_PREFIX <span class="token operator">=</span> <span class="token string">"hive.jdbc_passwd.auth.%s"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Configuration conf <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Authenticate</span><span class="token punctuation">(</span>String userName<span class="token punctuation">,</span> String passwd<span class="token punctuation">)</span>            <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>        LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"user: "</span> <span class="token operator">+</span> userName <span class="token operator">+</span> <span class="token string">" try login."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String passwdConf <span class="token operator">=</span> <span class="token function">getConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>HIVE_JDBC_PASSWD_AUTH_PREFIX<span class="token punctuation">,</span> userName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>passwdConf <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String message <span class="token operator">=</span> <span class="token string">"user's ACL configration is not found. user:"</span> <span class="token operator">+</span> userName<span class="token punctuation">;</span>            LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>passwd<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>passwdConf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String message <span class="token operator">=</span> <span class="token string">"user name and password is mismatch. user:"</span> <span class="token operator">+</span> userName<span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Configuration <span class="token function">getConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>conf <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HiveConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> conf<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setConf</span><span class="token punctuation">(</span>Configuration conf<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>conf <span class="token operator">=</span> conf<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>将以上代码打包<a href="/images/file/hive-1.0-SNAPSHOT.jar">hive-1.0-SNAPSHOT.jar</a>，将jar放置<code>$HIVE_HOME/lib</code>目录  </p><p>修改hive-site.xml文件配置<br>hive.server2.authentication  // 指定认证方式CUSTOM<br>hive.server2.custom.authentication.class  // 指定认证方式接口<br>hive.jdbc_passwd.auth // 设置用户为admin，value为用户密码  </p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.server2.authentication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>CUSTOM<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      Expects one of [nosasl, none, ldap, kerberos, pam, custom].    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.server2.custom.authentication.class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.hive.CustomPasswdAuthenticator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      Custom authentication class. Used when property    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.jdbc_passwd.auth.admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>12345678<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p>重新启动hiveserver2,此时可jps看出RunJar进程，则启动成功  </p><pre class=" language-sh"><code class="language-sh">nohup ./bin/hiveserver2 > /dev/null 2>&1 &</code></pre><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>使用beeline命令链接，此时需要用户密码</p><pre class=" language-sh"><code class="language-sh">shell> beeline SLF4J: Class path contains multiple SLF4J bindings.SLF4J: Found binding in [jar:file:/yibao/data/app/hive-2.3.5/lib/log4j-slf4j-impl-2.6.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: Found binding in [jar:file:/yibao/data/app/hadoop-2.7.7/share/hadoop/common/lib/slf4j-log4j12-1.7.10.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.SLF4J: Actual binding is of type [org.apache.logging.slf4j.Log4jLoggerFactory]Beeline version 2.3.5 by Apache Hivebeeline> !connect jdbc:hive2://master:10000Connecting to jdbc:hive2://master:10000Enter username for jdbc:hive2://master:10000: adminEnter password for jdbc:hive2://master:10000: ********Error: Could not open client transport with JDBC Uri: jdbc:hive2://master:10000: Failed to open new session: java.lang.RuntimeException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.security.authorize.AuthorizationException): User: admin is not allowed to impersonate (state=08S01,code=0)</code></pre><p>此时会发现，虽然配置了hive认证，但是使用beeline或者其他客户端，依旧无法连接hive</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>1，首先确定hive是否开启<br>2，然后再hadoop下的core-site.xml加入配置</p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.proxyuser.admin.hosts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.proxyuser.admin.groups<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p>注意配置中的“admin”代表的是一个用户，你异常中User后面的用户写的是哪个，你在这里就配置哪个。<br>hadoop.proxyuser.admin.hosts 配置成*的意义，表示任意节点使用hadoop集群的代理用户admin都能访问hdfs集群<br>hadoop.proxyuser.admin.groups 表示代理用户的组所属  </p><p>3，然后在hadoop下的hdfs-site.xml中加入配置  </p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.webhdfs.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><p>4, 重启hadoop集群和hive,然后beeline重新连接hive</p><pre class=" language-sh"><code class="language-sh">shell> beeline SLF4J: Class path contains multiple SLF4J bindings.SLF4J: Found binding in [jar:file:/yibao/data/app/hive-2.3.5/lib/log4j-slf4j-impl-2.6.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: Found binding in [jar:file:/yibao/data/app/hadoop-2.7.7/share/hadoop/common/lib/slf4j-log4j12-1.7.10.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.SLF4J: Actual binding is of type [org.apache.logging.slf4j.Log4jLoggerFactory]Beeline version 2.3.5 by Apache Hivebeeline> !connect jdbc:hive2://master:10000 Connecting to jdbc:hive2://master:10000Enter username for jdbc:hive2://master:10000: adminEnter password for jdbc:hive2://master:10000: ********Connected to: Apache Hive (version 2.3.5)Driver: Hive JDBC (version 2.3.5)Transaction isolation: TRANSACTION_REPEATABLE_READ0: jdbc:hive2://master:10000> show databases;+----------------+| database_name  |+----------------+| default        || sakura         |+----------------+2 rows selected (0.341 seconds)0: jdbc:hive2://master:10000></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop+hive+hbase环境</title>
      <link href="/2019/06/30/2019-06-30-hadoop+hive+hbase%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/06/30/2019-06-30-hadoop+hive+hbase%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<blockquote><p>相关软件准备 apache-hive-2.3.5-bin.tar.gz  hadoop-2.7.7.tar.gz  hbase-1.3.5-bin.tar.gz  mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz  mysql-connector-java-5.1.42-bin.jar  zookeeper-3.4.14.tar.gz</p></blockquote><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><ol><li>准备三台服务器，修改hostname主机名，分别为master, slave1, slave2,并将三台主机名添加到/etc/hosts中</li></ol><blockquote><p>10.27.214.15 slave1<br>  10.26.234.215 slave2<br>  10.26.108.150 master</p></blockquote><ol start="2"><li>准备好相关的安装目录，mkdir /yibao/data/app (所有的项目都会安装在次目录下)</li><li>配置三台服务器之间无密码登陆<a id="more"></a></li></ol><h3 id="配置Java环境"><a href="#配置Java环境" class="headerlink" title="配置Java环境"></a>配置Java环境</h3><p>三台都需要配置</p><pre class=" language-sh"><code class="language-sh">JAVA_HOME=/usr/local/java/jdk1.8.0_60/JAVA_BIN=/usr/local/java/jdk1.8.0_60/binJRE_HOME=/usr/local/java/jdk1.8.0_60/jrePATH=$PATH:/usr/local/java/jdk1.8.0_60/bin:/usr/local/java/jdk1.8.0_60/jre/binCLASSPATH=/usr/local/java/jdk1.8.0_60/jre/lib:/usr/local/java/jdk1.8.0_60/lib:/usr/local/java/jdk1.8.0_60/jre/lib/charsets.jarexport  JAVA_HOME  JAVA_BIN JRE_HOME  PATH  CLASSPATH</code></pre><h3 id="安装hadoop集群"><a href="#安装hadoop集群" class="headerlink" title="安装hadoop集群"></a>安装hadoop集群</h3><h4 id="解压hadoop到相关安装目录"><a href="#解压hadoop到相关安装目录" class="headerlink" title="解压hadoop到相关安装目录"></a>解压hadoop到相关安装目录</h4><pre class=" language-sh"><code class="language-sh">tar zxvf hadoop-2.7.7.tar.gz -C /yibao/data/app/</code></pre><h4 id="添加hadoop环境变量"><a href="#添加hadoop环境变量" class="headerlink" title="添加hadoop环境变量"></a>添加hadoop环境变量</h4><p>/etc/profile</p><pre class=" language-sh"><code class="language-sh">export HADOOP_HOME=/yibao/data/app/hadoop-2.7.7</code></pre><h4 id="配置hadoop中的配置文件"><a href="#配置hadoop中的配置文件" class="headerlink" title="配置hadoop中的配置文件"></a>配置hadoop中的配置文件</h4><p>主要配置四个配置文件，在hadoop-2.7.7/etc/hadoop目录中，分别为<br>core-site.xml<br>hdfs-site.xml<br>yarn-site.xml<br>mapred-site.xml(由mapred-site.xml.template拷贝）<br>slaves<br>hadoop-env.sh  </p><ol><li><p>修改core-site.xml  </p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/yibao/data/app/hadoop-2.7.7/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://master:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>修改hdfs-site.xml  </p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.secondary.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:9001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:/yibao/data/app/hadoop-2.7.7/namenode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.datanode.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:/yibao/data/app/hadoop-2.7.7/datanode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.webhdfs.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.permissions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.web.ugi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>supergroup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>修改mapred-site.xml  </p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.jobhistory.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:10020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.jobhistory.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:19888<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>修改yarn-site.xml  </p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.hadoop.mapred.ShuffleHandler<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:8032<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.scheduler.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:8030<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.resource-tracker.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:8031<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.admin.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:8033<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:8078<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>slaves  </p><pre class=" language-sh"><code class="language-sh">slave1slave2</code></pre></li><li><p>hadoop-env.sh</p><pre class=" language-sh"><code class="language-sh">export JAVA_HOME=/usr/local/java/jdk1.8.0_60export HADOOP_SSH_OPTS="-p 22222"  #由于三台主机的ssh端口都是22222,所以此处添加</code></pre></li><li><p>将目录cp到slave1,slave2两台服务器中</p><pre class=" language-sh"><code class="language-sh">scp -r -P 22222 hadoop-2.7.7 slave1:/yibao/data/app/scp -r -P 22222 hadoop-2.7.7 slave2:/yibao/data/app/</code></pre></li><li><p>在slave1,slave2中/etc/profile添加HADOOP_HOME环境变量</p><pre class=" language-sh"><code class="language-sh">export HADOOP_HOME=/yibao/data/app/hadoop-2.7.7source /etc/profile</code></pre></li></ol><h4 id="验证并启动hadoop"><a href="#验证并启动hadoop" class="headerlink" title="验证并启动hadoop"></a>验证并启动hadoop</h4><ol start="9"><li>验证，在master节点中初始化namenode节点,确认无误后，启动hadoop集群<pre class=" language-sh"><code class="language-sh">./bin/hadoop namenode -format #初始化namenode节点./sbin/start-all.sh  #启动hadoop集群</code></pre></li><li>之后可以使用jps命令查看每台机器上的Java进程<br>master节点：<pre class=" language-sh"><code class="language-sh">28368 Jps11287 SecondaryNameNode11534 ResourceManager11055 NameNode</code></pre>slave1节点:<pre class=" language-sh"><code class="language-sh">32020 DataNode13626 Jps32142 NodeManager</code></pre>slave2节点：<pre class=" language-sh"><code class="language-sh">2608 NodeManager2469 DataNode21542 Jps</code></pre>此时可查看NameNode进程端口50070,访问 <a href="http://master:50070,可以看到熟悉的Hadoop界面">http://master:50070,可以看到熟悉的Hadoop界面</a></li></ol><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><h4 id="解压mysql并安装"><a href="#解压mysql并安装" class="headerlink" title="解压mysql并安装"></a>解压mysql并安装</h4><pre class=" language-sh"><code class="language-sh">sudo -i #使用root用户安装tar zxvf mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz -C /yibao/data/app/cd /yibao/data/appmv mysql-5.7.22-linux-glibc2.12-x86_64 mysqlcd mysqlgroupadd mysqlgroupadd mysqluseradd -r -g mysql -s /sbin/nologin mysqlchown -R mysql.mysql ../bin/mysqld --initialize --user=mysql --basedir=/yibao/data/app/mysql --datadir=/yibao/data/app/mysql/data  #返回root@localhost密码</code></pre><h4 id="创建mysql配置文件"><a href="#创建mysql配置文件" class="headerlink" title="创建mysql配置文件"></a>创建mysql配置文件</h4><p>vim /etc/my.cnf</p><pre class=" language-sh"><code class="language-sh">[mysqld]basedir=/yibao/data/app/mysql datadir=/yibao/data/app/mysql/dataport=3306character_set_server=utf8socket=/tmp/mysql.sock#skip-grant-tables#innodb_buffer_pool_size=1Ginnodb_log_file_size=256Mmax_allowed_packet=64Msql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</code></pre><h4 id="mysql加入服务"><a href="#mysql加入服务" class="headerlink" title="mysql加入服务"></a>mysql加入服务</h4><pre class=" language-sh"><code class="language-sh">cp support-files/mysql.server /etc/init.d/mysqldchmod +x /etc/init.d/mysqld chkconfig --add mysqldchkconfig mysqld onservice mysqld start</code></pre><h3 id="安装hive"><a href="#安装hive" class="headerlink" title="安装hive"></a>安装hive</h3><p>基于MySQL的本地模式安装（hive只需安装master即可）</p><h4 id="解压hive安装包"><a href="#解压hive安装包" class="headerlink" title="解压hive安装包"></a>解压hive安装包</h4><pre class=" language-sh"><code class="language-sh">tar zxvf apache-hive-2.3.5-bin.tar.gz -C /yibao/data/app/cd /yibao/data/appmv apache-hive-2.3.5-bin hive-2.3.5</code></pre><h4 id="配置hive"><a href="#配置hive" class="headerlink" title="配置hive"></a>配置hive</h4><ol><li>将mysql驱动包放置hive-2.3.5/lib目录<pre class=" language-sh"><code class="language-sh">cp mysql-connector-java-5.1.42-bin.jar hive-2.3.5/lib/</code></pre></li><li>登陆mysql创建hive链接需要的账号，和数据库<pre class=" language-sh"><code class="language-sh">mysql -uroot -p -hlocalhostmysql> GRANT ALL PRIVILEGES ON *.* TO 'hive'@'localhost' IDENTIFIED BY "hive_password";mysql> FLUSH PRIVILEGES;mysql> CREATE DATABASE hive;</code></pre></li><li>配置hive环境变量<br>将以下加入/etc/profile文件<pre class=" language-sh"><code class="language-sh">export HIVE_HOME=/yibao/data/app/hive-2.3.5PATH=$PATH:$HIVE_HOME/bin</code></pre></li><li>配置hive配置文件hive-site.xml(由hive-default.xml.template复制生成)  </li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.warehouse.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/yibao/data/app/hivedata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>location of default database for the warehouse<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.server2.authentication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>NONE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionDriverName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Driver class name for a JDBC metastore<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionURL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>jdbc:mysql://localhost:3306/hive?createDatabaseIfNotExist=true<span class="token entity" title="&amp;">&amp;amp;</span>useSSL=false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>        JDBC connect string for a JDBC metastore.        To use SSL to encrypt/authenticate the connection, provide database-specific SSL flag in the connection URL.        For example, jdbc:postgresql://myhost/db?ssl=true for postgres database.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionUserName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hive<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Username to use against metastore database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionPassword<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hive_password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>password to use against metastore database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.exec.local.scratchdir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/yibao/data/app/hive_tmp/HiveJobsLog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Local scratch space for Hive jobs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.downloaded.resources.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/yibao/data/app/hive_tmp/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Temporary local directory for added resources in the remote file system.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.querylog.location<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/yibao/data/app/hive_tmp/HiveRunLog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Location of Hive run time structured log file<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.server2.logging.operation.log.location<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/yibao/data/app/hive_tmp/OpertitionLog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Top level directory where operation logs are stored if logging functionality is enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre><ol start="5"><li>创建hivedata,hive_tmp文件夹<pre class=" language-sh"><code class="language-sh">mkdir -p /yibao/data/app/hivedata /yibao/data/app/hive_tmp</code></pre></li><li>修改hive-env.sh文件（由hive-env.sh.template拷贝生成）<pre class=" language-sh"><code class="language-sh">export JAVA_HOME=/usr/local/java/jdk1.8.0_60export HADOOP_HOME=/yibao/data/app/hadoop-2.7.7export HIVE_HOME=/yibao/data/app/hive-2.3.5export HIVE_CONF_DIR=$HIVE_HOME/confexport HIVE_AUX_JARS_PATH=$HIVE_HOME/lib</code></pre></li></ol><h4 id="初始化并启动"><a href="#初始化并启动" class="headerlink" title="初始化并启动"></a>初始化并启动</h4><ol start="7"><li>hive初始化元数据<pre class=" language-sh"><code class="language-sh">bin/schematool -initSchema -dbType mysql</code></pre></li><li>使用hive命令启动hive<pre class=" language-sh"><code class="language-sh">hive> show databases;OKdefaultTime taken: 7.743 seconds, Fetched: 1 row(s)</code></pre></li></ol><h3 id="安装zookeeper集群"><a href="#安装zookeeper集群" class="headerlink" title="安装zookeeper集群"></a>安装zookeeper集群</h3><p>zookeeper集群三台都需要安装,先配置master,之后scp到slave</p><h4 id="解压zookeeper"><a href="#解压zookeeper" class="headerlink" title="解压zookeeper"></a>解压zookeeper</h4><pre class=" language-sh"><code class="language-sh">tar zxvf zookeeper-3.4.14.tar.gz -C /yibao/data/app/cd /yibao/data/app/zookeeper-3.4.14/confcp zoo_sample.cfg zoo.cfg</code></pre><h4 id="配置zookeeper"><a href="#配置zookeeper" class="headerlink" title="配置zookeeper"></a>配置zookeeper</h4><ol><li><p>修改zoo.cfg</p><pre class=" language-sh"><code class="language-sh">tickTime=2000initLimit=10syncLimit=5dataDir=/yibao/data/app/zookeeper-3.4.14/dataclientPort=2181server.0=master:2888:3888server.1=slave1:2888:3888server.2=slave2:2888:3888</code></pre></li><li><p>创建zookeeper data目录</p><pre class=" language-sh"><code class="language-sh">mkdir /yibao/data/app/zookeeper-3.4.14/dataecho 0 > /yibao/data/app/zookeeper-3.4.14/data/myid</code></pre></li><li><p>将zookeeper-3.4.14同步至slave</p><pre class=" language-sh"><code class="language-sh">scp -r -P 22222 zookeeper-3.4.14 slave1:/yibao/data/app/scp -r -P 22222 zookeeper-3.4.14 slave2:/yibao/data/app/</code></pre></li><li><p>修改zookeeper id<br>slave1 下/yibao/data/app/zookeeper-3.4.14/data/myid 改为1<br>slave2 下/yibao/data/app/zookeeper-3.4.14/data/myid 改为2</p></li><li><p>配置zookeeper环境变量,加入/etc/profile</p><pre class=" language-sh"><code class="language-sh">export ZOOKEEPER_HOME=/yibao/data/app/zookeeper-3.4.14export PATH=$PATH:$ZOOKEEPER_HOME/bin</code></pre></li><li><p>启动zookeeper<br>master: ./bin/zkServer.sh start<br>slave1: ./bin/zkServer.sh start<br>slave2: ./bin/zkServer.sh start  </p></li><li><p>验证<br>master上执行</p><pre class=" language-sh"><code class="language-sh">./bin/zkCli.sh2019-06-30 15:30:12,558 [myid:] - INFO  [main:Environment@100] - Client .......................WatchedEvent state:SyncConnected type:None path:null[zk: localhost:2181(CONNECTED) 0] create /sakura GaaraCreated /sakura[zk: localhost:2181(CONNECTED) 1] get /sakuraGaara...................[zk: localhost:2181(CONNECTED) 2]</code></pre><p>slave1, slave2上去验证</p><pre class=" language-sh"><code class="language-sh">./bin/zkCli.shConnecting to localhost:21812019-06-30 15:33:03,582 [myid:] - INFO  [main:Environment@100] - Client .......................WatchedEvent state:SyncConnected type:None path:null[zk: localhost:2181(CONNECTED) 0] get /sakuraGaara...........[zk: localhost:2181(CONNECTED) 1] </code></pre></li></ol><h3 id="安装hbase集群"><a href="#安装hbase集群" class="headerlink" title="安装hbase集群"></a>安装hbase集群</h3><h4 id="解压hbase"><a href="#解压hbase" class="headerlink" title="解压hbase"></a>解压hbase</h4><pre class=" language-sh"><code class="language-sh">tar zxvf hbase-1.3.5-bin.tar.gz -C /yibao/data/appcd hbase-1.3.5/conf</code></pre><h4 id="配置hbase"><a href="#配置hbase" class="headerlink" title="配置hbase"></a>配置hbase</h4><ol><li>修改hbase-site.xml<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.rootdir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://master:9000/yibao/data/app/hbase-1.3.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.cluster.distributed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.master<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:60000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.property.dataDir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/yibao/data/app/hbase-1.3.5/zookeeperdata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master,slave1,slave2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.property.clientPort<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/yibao/data/app/hbase-1.3.5/tmpdata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li>在conf下创建backup-masters文件，设置slave1为Backup Masters  <pre class=" language-sh"><code class="language-sh">echo "slave1" > backup-masters</code></pre></li><li>修改regionservers，设置slave1,slave2为Region Servers  <pre class=" language-sh"><code class="language-sh">cat regionservers slave1slave2</code></pre></li><li>修改hbase-env.sh<pre class=" language-sh"><code class="language-sh">export HBASE_SSH_OPTS="-p 22222" # 由于ssh端口是22222，所以此处添加export JAVA_HOME=/usr/local/java/jdk1.8.0_60export HBASE_CLASSPATH=/yibao/data/app/hbase-1.3.5/confexport HBASE_MANAGES_ZK=falseexport HBASE_HOME=/yibao/data/app/hbase-1.3.5export HADOOP_HOME=/yibao/data/app/hadoop-2.7.7export HBASE_LOG_DIR=/yibao/data/app/hbase-1.3.5/logs</code></pre></li><li>创建hbase配置所需的文件夹<pre class=" language-sh"><code class="language-sh">cd /yibao/data/app/hbase-1.3.5mkdir -p tmpdata zookeeperdata</code></pre></li><li>将hbase-1.3.5同步到slave1,slave2<pre class=" language-sh"><code class="language-sh">scp -r -P 22222 hbase-1.3.5 slave1:/yibao/data/app/scp -r -P 22222 hbase-1.3.5 slave2:/yibao/data/app/</code></pre></li><li>三台服务器配置hbase环境变量<pre class=" language-sh"><code class="language-sh">export HBASE_HOME=/yibao/data/app/hbase-1.3.5export PATH=$PATH:$HBASE_HOME/bin</code></pre></li></ol><h4 id="启动hbase"><a href="#启动hbase" class="headerlink" title="启动hbase"></a>启动hbase</h4><ol start="8"><li><p>master上启动hbase,启动之前确认ZK已经启动</p><pre class=" language-sh"><code class="language-sh">cd $HBASE_HOMEbin/start-hbase.sh</code></pre></li><li><p>启动后jps验证<br>master: jps<br>启动的HMaster进程为hbase进程</p><pre class=" language-sh"><code class="language-sh">25588 HMaster4678 Jps11287 SecondaryNameNode6552 QuorumPeerMain11534 ResourceManager11055 NameNode</code></pre><p>slave1: jps<br>启动的HMaster进程为配置slave1为Backup Masters，HRegionServer进程为Region Servers</p><pre class=" language-sh"><code class="language-sh">24402 Jps10402 HRegionServer11267 QuorumPeerMain32020 DataNode31546 Bootstrap10508 HMaster32142 NodeManager</code></pre><p>slave2: jps<br>启动的HRegionServer进程为Region Servers</p><pre class=" language-sh"><code class="language-sh">2608 NodeManager2388 Bootstrap2469 DataNode14135 QuorumPeerMain18442 HRegionServer32431 Jps</code></pre></li><li><p>web界面访问master主机HMaster进程的端口16010<br>也可以看出详细的信息，显示Master，Region Servers，Backup Masters，Tables等更多的详细信息</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hive </tag>
            
            <tag> hadoop </tag>
            
            <tag> hbase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置url重写</title>
      <link href="/2019/06/06/2019-06-06-nginx%E9%85%8D%E7%BD%AEurl%E9%87%8D%E5%86%99/"/>
      <url>/2019/06/06/2019-06-06-nginx%E9%85%8D%E7%BD%AEurl%E9%87%8D%E5%86%99/</url>
      
        <content type="html"><![CDATA[<blockquote><p>url重写是指通过配置conf文件，以让网站的url中达到某种状态时则定向/跳转到某个规则<br>比如常见的伪静态、301重定向、浏览器定向等</p></blockquote><h2 id="rewrite语法"><a href="#rewrite语法" class="headerlink" title="rewrite语法"></a>rewrite语法</h2><p>在配置文件的server块中写，如：</p><pre class=" language-sh"><code class="language-sh">server {    rewrite 规则 定向路径 重写类型;}</code></pre><a id="more"></a><p>规则：可以是字符串或者正则来表示想匹配的目标url<br>定向路径：表示匹配到规则后要定向的路径，如果规则里有正则，则可以使用$index来表示正则里的捕获分组<br>重写类型：<br>last 相当于Apache里德(L)标记，表示完成rewrite，浏览器地址栏URL地址不变<br>break 本条规则匹配完成后，终止匹配，不再匹配后面的规则，浏览器地址栏URL地址不变<br>redirect 返回302临时重定向，浏览器地址会显示跳转后的URL地址<br>permanent 返回301永久重定向，浏览器地址栏会显示跳转后的URL地址  </p><p><strong>简单例子</strong>  </p><pre class=" language-sh"><code class="language-sh">server {    # 访问 /last.html 的时候，页面内容重写到 /index.html 中    rewrite /last.html /index.html last;    # 访问 /break.html 的时候，页面内容重写到 /index.html 中，并停止后续的匹配    rewrite /break.html /index.html break;    # 访问 /redirect.html 的时候，页面直接302定向到 /index.html中    rewrite /redirect.html /index.html redirect;    # 访问 /permanent.html 的时候，页面直接301定向到 /index.html中    rewrite /permanent.html /index.html permanent;    # 把 /html/*.html => /post/*.html ，301定向    rewrite ^/html/(.+?).html$ /post/$1.html permanent;    # 把 /search/key => /search.html?keyword=key    rewrite ^/search\/([^\/]+?)(\/|$) /search.html?keyword=$1 permanent;}</code></pre><p><strong>last和break的区别</strong><br>因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解  </p><p>last一般写在server和if中，而break一般使用在location中<br>last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配<br>break和last都能组织继续执行后面的rewrite指令<br>在location里一旦返回break则直接生效并停止后续的匹配location  </p><pre class=" language-sh"><code class="language-sh">server {    location / {        rewrite /last/ /q.html last;        rewrite /break/ /q.html break;    }    location = /q.html {        return 400;    }}</code></pre><p>访问/last/时重写到/q.html，然后使用新的uri再匹配，正好匹配到locatoin = /q.html然后返回了400<br>访问/break时重写到/q.html，由于返回了break，则直接停止了  </p><h2 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h2><p>只是上面的简单重写很多时候满足不了需求，比如需要判断当文件不存在时、当路径包含xx时等条件，则需要用到if  </p><p><strong>语法</strong></p><pre class=" language-sh"><code class="language-sh">if (表达式) {}</code></pre><p>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false<br>直接比较变量和内容时，使用=或!=<br><code>~正则表达式匹配，~*不区分大小写的匹配，!~区分大小写的不匹配</code><br>一些内置的条件判断：<br>-f和!-f用来判断是否存在文件<br>-d和!-d用来判断是否存在目录<br>-e和!-e用来判断是否存在文件或目录<br>-x和!-x用来判断文件是否可执行  </p><p><strong>内置的全局变量</strong>  </p><pre class=" language-sh"><code class="language-sh">$args ：这个变量等于请求行中的参数，同$query_string$content_length ： 请求头中的Content-length字段。$content_type ： 请求头中的Content-Type字段。$document_root ： 当前请求在root指令中指定的值。$host ： 请求主机头字段，否则为服务器名称。$http_user_agent ： 客户端agent信息$http_cookie ： 客户端cookie信息$limit_rate ： 这个变量可以限制连接速率。$request_method ： 客户端请求的动作，通常为GET或POST。$remote_addr ： 客户端的IP地址。$remote_port ： 客户端的端口。$remote_user ： 已经经过Auth Basic Module验证的用户名。$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。$scheme ： HTTP方法（如http，https）。$server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。$server_name ： 服务器名称。$server_port ： 请求到达服务器的端口号。$request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。$uri ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。$document_uri ： 与$uri相同。</code></pre><p>如：</p><p>访问链接是：<a href="http://localhost:88/test1/test2/test.php" target="_blank" rel="noopener">http://localhost:88/test1/test2/test.php</a><br>网站路径是：/var/www/html  </p><pre class=" language-sh"><code class="language-sh">$host：localhost$server_port：88$request_uri：http://localhost:88/test1/test2/test.php$document_uri：/test1/test2/test.php$document_root：/var/www/html$request_filename：/var/www/html/test1/test2/test.php</code></pre><p>例子<br>如果文件不存在则返回400  </p><pre class=" language-sh"><code class="language-sh">if (!-f $request_filename) {    return 400;}</code></pre><p>如果host不是xuexb.com，则301到xuexb.com中  </p><pre class=" language-sh"><code class="language-sh">if ( $host != "xuexb.com" ){    rewrite ^/(.*)$ https://xuexb.com/$1 permanent;}</code></pre><p>如果请求类型不是POST则返回405  </p><pre class=" language-sh"><code class="language-sh">if ($request_method = POST) {    return 405;}</code></pre><p>如果参数中有 a=1 则301到指定域名  </p><pre class=" language-sh"><code class="language-sh">if ($args ~ a=1) {    rewrite ^ http://example.com/ permanent;}</code></pre><p>在某种场景下可结合location规则来使用，如：<br>访问 /test.html 时  </p><pre class=" language-sh"><code class="language-sh">location = /test.html {    # 默认值为xiaowu    set $name xiaowu;    # 如果参数中有 name=xx 则使用该值    if ($args ~* name=(\w+?)(&|$)) {        set $name $1;    }    # 301    rewrite ^ /$name.html permanent;}</code></pre><p>上面表示：  </p><p>/test.html =&gt; /xiaowu.html<br>/test.html?name=ok =&gt; /ok.html?name=ok</p><h2 id="location语法"><a href="#location语法" class="headerlink" title="location语法"></a>location语法</h2><p>在server块中使用，如：  </p><pre class=" language-sh"><code class="language-sh">server {    location 表达式 {    }}</code></pre><p>location表达式类型  </p><p>如果直接写一个路径，则匹配该路径下的<br>~ 表示执行一个正则匹配，区分大小写<br><code>~* 表示执行一个正则匹配，不区分大小写</code><br>^~ 表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其他location。<br>= 进行普通字符精确匹配。也就是完全匹配。<br>优先级<br>等号类型（=）的优先级最高。一旦匹配成功，则不再查找其他匹配项。<br><code>^~类型表达式。一旦匹配成功，则不再查找其他匹配项。</code><br>正则表达式类型（~ ~*）的优先级次之。如果有多个location的正则能匹配的话，则使用正则表达式最长的那个。<br>常规字符串匹配类型。按前缀匹配。  </p><p><strong>例子 - 假地址掩饰真地址</strong>  </p><pre class=" language-sh"><code class="language-sh">server {    # 用 xxoo_admin 来掩饰 admin    location / {        # 使用break拿一旦匹配成功则忽略后续location        rewrite /xxoo_admin /admin break;    }    # 访问真实地址直接报没权限    location /admin {        return 403;    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Page添加网易云音乐</title>
      <link href="/2019/04/26/2019-04-26-Git%20Page%E6%B7%BB%E5%8A%A0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/"/>
      <url>/2019/04/26/2019-04-26-Git%20Page%E6%B7%BB%E5%8A%A0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/</url>
      
        <content type="html"><![CDATA[<ul><li>添加到 <code>_post.html</code> 合适的位置 </li><li>在写好的markdown文档的头文件中添加：<code>music-id: xxx</code> 配置项。具体的id号就是选取的歌曲的外链中的id号。  </li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">marginwidth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">marginheight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span>330</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span>86</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//music.163.com/outchain/player?type<span class="token punctuation">=</span>2&amp;id<span class="token punctuation">=</span>{ { page.music-id } }&amp;auto<span class="token punctuation">=</span>1&amp;height<span class="token punctuation">=</span>66<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span></code></pre><a id="more"></a><p>但是这个好像被网易云屏蔽了</p><hr><p>/assets/mp3/duli.mp3</p>_includes中添加文件open-embed.html， [文件内容](https://github.com/SakuraGaara/sakuragaara.github.io/blob/master/_includes/open-embed.html)  <p>而后在_includes/_layout.html文件中添加 <code>\{\% include open-embed.html \%\}</code> ，以每次打开页面都能加载open-embed.html中的内容  </p><p>最后添加音乐之需要在md文件中添加</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>http://xxxx.mp3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>获取网易云音乐id</p><p><a href="http://music.163.com/song/media/outer/url?id=id.mp3" target="_blank" rel="noopener">http://music.163.com/song/media/outer/url?id=id.mp3</a></p>]]></content>
      
      
      <categories>
          
          <category> 网易云 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网易云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一图掌握kubernetes客户端命令kubectl</title>
      <link href="/2019/04/26/2019-04-26-%E4%B8%80%E5%9B%BE%E6%8E%8C%E6%8F%A1kubernetes%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%91%BD%E4%BB%A4kubectl/"/>
      <url>/2019/04/26/2019-04-26-%E4%B8%80%E5%9B%BE%E6%8E%8C%E6%8F%A1kubernetes%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%91%BD%E4%BB%A4kubectl/</url>
      
        <content type="html"><![CDATA[<blockquote><p>kubectl客户端命令</p></blockquote><p><a href="https://sakuragaara.github.io/images/img/20190426/kubernetes-kubectl-cheatsheet.png" target="_blank" rel="noopener">https://sakuragaara.github.io/images/img/20190426/kubernetes-kubectl-cheatsheet.png</a></p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> kubectl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes Pod控制器</title>
      <link href="/2019/04/23/2019-04-23-kuberneres%20Pod%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
      <url>/2019/04/23/2019-04-23-kuberneres%20Pod%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Pod是kubernetes的最小单元, 自主式创建的Pod删除之后就没有了，但是通过资源控制器创建的Pod如果被删除还会重建<br>  <strong>自主式Pod：</strong> 创建一个Pod资源清单，<code>kubectl create -f xxxx.yaml</code><br>  <strong>资源控制器：</strong> <code>kubectl run xxxx --image=xxxx --replicas=2 --port=80</code> 默认属于 <code>deployment</code>控制器管理<br>  <strong>Pod控制器</strong>  就是用于实现代替我们去管理pod的中间层，并帮助我们确保每一个Pod资源处于我们所定义或期望的目标状态pod资源出现故障首先要重启，如果一直重启有问题的话会基于某种策略重新编排。自动适应期望pod数量<br>  <strong><a href="https://sakuragaara.github.io/kubernetes/2019/04/18/kubernetes-Pod%E8%B5%84%E6%BA%90%E6%B8%85%E5%8D%95%E6%B3%A8%E8%A7%A3/#" target="_blank" rel="noopener">Pod资源清单</a> 作为模板内嵌在Pod控制器内进行创建</strong>  </p></blockquote><a id="more"></a><h2 id="Pod控制器"><a href="#Pod控制器" class="headerlink" title="Pod控制器"></a>Pod控制器</h2><h3 id="ReplicaSet"><a href="#ReplicaSet" class="headerlink" title="ReplicaSet"></a>ReplicaSet</h3><p><strong>ReplicaSet: 新一代的ReplicationController</strong><br>代用户创建指定数量的Pod副本数量，并确保Pod副本一直满足用户期望的数量状态，多退少补，而且还支持自动扩缩容机制<br><strong><em>但是kuberneters不建议直接使用ReporcaSet</em></strong><br>ReporcaSet主要由三个重要组件组成：<br>（1） 管控用户期望的Pod副本数量<br>（2） 标签选择器，判定归自己管理可控制的Pod副本<br>（3） Pod资源模板（当现存的pod副本数量不足，会根据Pod资源模板进行新建，帮助用户管理无状态的Pod资源，精确反应用户定义的目标数量）  </p><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p><strong>Deployment： 无状态，守护进程类，只关注群体不关注个体</strong><br>工作在ReplicaSet之上，通过ReplicaSet管理无状态Pod资源，是目前来说最好的控制器(意味着满足ReplicaSet的所有功能)<br>除此之外，支持滚动更新和回滚等机制，而且还提供声明式配置，可随时通过修改声明来定义目标期望状态  </p><h3 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h3><p><strong><em>DaemonSet：无状态，守护进程类，只关注群体不关注个体 Pod与Node一对一的关系</em></strong><br>确保集群中每一个节点上只运行一个特定的Pod副本，系统级的后台任务，新增节点他都会自动添加pod<br>也可以是满足条件的节点上运行特定的副本  </p><h3 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h3><p><strong><em>Job：有状态，一次性任务</em></strong><br>只要完成就立即退出，不需要重启或重建，没有完成重构job。只能执行一次性任务　  </p><h3 id="Cronjob"><a href="#Cronjob" class="headerlink" title="Cronjob"></a>Cronjob</h3><p><strong><em>Cronjob：有状态，周期性任务</em></strong><br>周期性任务控制，不需要持续后台运行  </p><h3 id="StatefulSet"><a href="#StatefulSet" class="headerlink" title="StatefulSet"></a>StatefulSet</h3><p><strong><em>StatefulSet：管理有状态应用</em></strong><br>管理有状态应用（redis cluster）针对管理的应用器配置管理是不一样的，没有什么共通的规律，需要人为的封装在脚本中实行，相当之大的逻辑处理。（运维技能封装到运维脚本中）  </p><h2 id="Pod控制器应用"><a href="#Pod控制器应用" class="headerlink" title="Pod控制器应用"></a>Pod控制器应用</h2><h3 id="ReplicaSet-1"><a href="#ReplicaSet-1" class="headerlink" title="ReplicaSet"></a>ReplicaSet</h3><p>help:<code>kubectl explain ReplicaSet</code> 简写 <code>rs</code><br>ReplicaSet先定义控制器 <code>apiVersion</code>,<code>kind</code>,<code>metadata</code>,<code>spec</code>等资源<br>而在<code>spec</code>资源中，定义Pod数量，控制器标签选择器和Pod的模板<br>模板中定义Pod<code>metadata</code>,<code>spec</code>等资源，metadata中Pod的标签必须需要继承控制器的标签属性<br>支持动态修改<code>kubectl edit rs myapp</code> , 但是并不支持修改模板中的Pod内容，因为控制器定义的数量不变,除非人为手动删除控制器中的pod  </p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ReplicaSet<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2    </span><span class="token comment" spellcheck="true"># Pod数量</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 定义ReplicaSet标签</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> flask<span class="token punctuation">-</span>app      <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default      <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 必须继承ReplicaSet标签，否则一直创建</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp        <span class="token key atrule">ifram</span><span class="token punctuation">:</span> flask    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> flaskapp          <span class="token key atrule">image</span><span class="token punctuation">:</span> sakuragaara/flaskapp<span class="token punctuation">:</span>v1          <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent          <span class="token key atrule">ports</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> http            <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">5000</span>          <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>            <span class="token key atrule">tcpSocket</span><span class="token punctuation">:</span>                <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5000</span>            <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">3</span>      <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Always</code></pre><h3 id="Deployment-1"><a href="#Deployment-1" class="headerlink" title="Deployment"></a>Deployment</h3><p>help: <code>kubectl explain deployment</code>  简写 <code>deploy</code><br>Deployment与ReplicaSet一样，定义控制器<code>apiVersion</code>,<code>kind</code>,<code>metadata</code>,<code>spec</code>等资源<br>而在<code>spec</code>资源中，定义Pod数量，控制器标签选择器和Pod的模板<br>支持动态修改Pod副本数量，更新资源镜像，支持回滚<br>  修改Pod副本数量,更新资源Pod镜像<br>  可以使用<code>kubectl edit deployment flask-deploy</code>编辑修改，也可以编辑文件flask-deploy.yaml之后，<code>kubectl apply -f flask-deploy.yaml</code>更新，默认为滚动更新方式<br>  更新Pod镜像资源后，可以使用<code>kubectl get rs -o wide</code>查看,默认的rs模板被保留，这就是备份，随时可以使用它进行回滚  </p><h4 id="创建和查看"><a href="#创建和查看" class="headerlink" title="创建和查看"></a>创建和查看</h4><p>  <img src="/images/img/20190423/kubectl_create.png" alt="创建和查看">  </p><h4 id="更新副本数量"><a href="#更新副本数量" class="headerlink" title="更新副本数量"></a>更新副本数量</h4><ul><li>可使用修改yaml更新，可以<code>kubectl edit</code>或者<code>kubectl scale</code>更新<br><img src="/images/img/20190423/kubectl_update1.png" alt="更新副本数量">  </li></ul><h4 id="更新镜像"><a href="#更新镜像" class="headerlink" title="更新镜像"></a>更新镜像</h4><ul><li>使用修改yaml更新，也可以使用<code>kubectl set image</code>的方式进行更新<br><img src="/images/img/20190423/kubectl_update2.png" alt="更新镜像"><br><img src="/images/img/20190423/kubectl_update3.png" alt="更新镜像">  </li></ul><h4 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h4><ul><li>使用<code>kubectl rollout history deployment flask-deploy</code>,可查看Deployment更新历史版本,<code>--revision=1</code> 可查看Deployment的详细信息，在<code>kubectl apply</code>时添加<code>--record</code>才会查看到更新命令备注信息  </li><li>使用<code>kubectl rollout undo deployment flask-deploy --to-revision=1</code> 进行回滚<br><img src="/images/img/20190423/kubectl_rollout.png" alt="回滚">  </li></ul><h4 id="使用修改补丁方式"><a href="#使用修改补丁方式" class="headerlink" title="使用修改补丁方式"></a>使用修改补丁方式</h4><p>  如<code>kubectl patch deployment flask-deploy -p &#39;{&quot;spec&quot;:{&quot;replicas&quot;:5}}&#39;</code> -p参数，只支持json格式修改  </p><h4 id="灰度发布（金丝雀发布）"><a href="#灰度发布（金丝雀发布）" class="headerlink" title="灰度发布（金丝雀发布）"></a>灰度发布（金丝雀发布）</h4><p>  Deployment默认为滚动更新方式，<code>kubectl describe deployment flask-deploy</code> 可以查看，可以修改其发布方式为灰度发布<br>  <code>spec.strategy.rollingUpdate.maxUnavailable</code><br>  用来控制不可用Pod数量的最大值，从而在删除旧Pod时保证一定数量的可用Pod。当replicas=3，如果配置为1，则更新过程中会保证至少有2个可用Pod。默认为1<br>  <code>spec.strategy.rollingUpdate.maxSurge</code><br>  用来控制超过期望数量的Pod数量最大值，从而在创建新Pod时限制总量。当replicas=3,如配置为1,则更新过着中会保证Pod总数量最多有4个。默认为1<br>  （1）补丁方式更新为灰度发布<br>    <code>kubectl patch deploy  flask-deploy -p &#39;{&quot;spec&quot;:{&quot;strategy&quot;:{&quot;rollingUpdate&quot;:{&quot;maxSurge&quot;:1,&quot;maxUnavailable&quot;:0}}}}&#39;</code><br>  <img src="/images/img/20190423/kubectl_strategyType.png" alt="灰度发布"><br>  （2）更新镜像，暂停,并监控pod更新状态<br>    <img src="/images/img/20190423/k1.png" alt="k1"><br>    <img src="/images/img/20190423/k2.png" alt="k2"><br>    <img src="/images/img/20190423/k3.png" alt="k3">  </p><pre class=" language-yaml"><code class="language-yaml">cat flask<span class="token punctuation">-</span>deploy.yaml<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> flask<span class="token punctuation">-</span>deploy  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> flask  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> flask<span class="token punctuation">-</span>pod      <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> flask        <span class="token key atrule">langure</span><span class="token punctuation">:</span> python    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> flask<span class="token punctuation">-</span>container        <span class="token key atrule">image</span><span class="token punctuation">:</span> sakuragaara/flaskapp<span class="token punctuation">:</span>v1        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> http          <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">5000</span>        <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>          <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>            <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5000</span>            <span class="token key atrule">scheme</span><span class="token punctuation">:</span> HTTP            <span class="token key atrule">path</span><span class="token punctuation">:</span> /index          <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>          <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask蓝图</title>
      <link href="/2019/04/18/2019-04-18-Flask%E8%93%9D%E5%9B%BE/"/>
      <url>/2019/04/18/2019-04-18-Flask%E8%93%9D%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Flask蓝图提供了模块化管理程序路由的功能，使程序结构清晰、简单易懂<br>首先，让我们来看下flask应用与蓝图之间的关系。蓝图代表着应用的一个个功能模块，能做到即插即用。</p></blockquote><p><img src="/images/img/2019-04-18-buleprint.png" alt="buleprint"></p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><pre><code>project├── app│   ├── __init__.py│   └── web│       ├── __init__.py│       └── login.py└── app.py</code></pre><a id="more"></a><h3 id="Demo-Code"><a href="#Demo-Code" class="headerlink" title="Demo Code"></a>Demo Code</h3><ul><li>app/__init__.py</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">def</span> <span class="token function">create_app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>    app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">'XxxxxxX'</span>    registry_blueprint<span class="token punctuation">(</span>app<span class="token punctuation">)</span>    <span class="token keyword">return</span> app<span class="token keyword">def</span> <span class="token function">registry_blueprint</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> app<span class="token punctuation">.</span>web <span class="token keyword">import</span> web    app<span class="token punctuation">.</span>register_blueprint<span class="token punctuation">(</span>web<span class="token punctuation">)</span></code></pre><ul><li>app.py</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> app <span class="token keyword">import</span> create_appapp <span class="token operator">=</span> create_app<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>web/__init__.py</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Blueprintweb <span class="token operator">=</span> Blueprint<span class="token punctuation">(</span><span class="token string">'web'</span><span class="token punctuation">,</span> __name__<span class="token punctuation">)</span><span class="token keyword">from</span> app<span class="token punctuation">.</span>web <span class="token keyword">import</span> login</code></pre><ul><li>web/login.py</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> web@web<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login/&lt;username>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> username</code></pre>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes Pod资源清单注解</title>
      <link href="/2019/04/18/2019-04-18-kubernetes%20Pod%E8%B5%84%E6%BA%90%E6%B8%85%E5%8D%95%E6%B3%A8%E8%A7%A3/"/>
      <url>/2019/04/18/2019-04-18-kubernetes%20Pod%E8%B5%84%E6%BA%90%E6%B8%85%E5%8D%95%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>创建资源的方法：<br>定义yaml格式提供配置清单,将资源清单提交给apiServer<br>  apiServer可自动将其转换为json格式，而后提交给Scheduler(集群中的调度器)<br>  由Scheduler完成调度，调度目标节点完成创建，并启动相关服务  </p></blockquote><h2 id="Pod核心资源配置清单："><a href="#Pod核心资源配置清单：" class="headerlink" title="Pod核心资源配置清单："></a>Pod核心资源配置清单：</h2><blockquote><p>资源清单定义帮助 <code>kubectl explain</code> <code>kubectl explain pods</code> 等查看可嵌套字段  </p></blockquote><h3 id="apiVersion"><a href="#apiVersion" class="headerlink" title="apiVersion"></a>apiVersion</h3><blockquote><p>格式为group/version，所属群组版本<br>支持的版本 <code>kubectl api-versions</code> 可查看  </p></blockquote><h3 id="kind"><a href="#kind" class="headerlink" title="kind"></a>kind</h3><blockquote><p>定义资源类别，Pod,Service,Deployment,Event,Secret等(注意大小写)  </p></blockquote><a id="more"></a><h3 id="metadata"><a href="#metadata" class="headerlink" title="metadata"></a>metadata</h3><blockquote><p>元数据 <code>kubectl explain pods.metadata</code> 查看帮助  </p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">metadata</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> pod_name    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 名称空间      <span class="token key atrule">labels</span><span class="token punctuation">:</span> <span class="token punctuation">-</span><span class="token punctuation">-</span> 标签         <span class="token key atrule">key</span><span class="token punctuation">:</span> value    <span class="token key atrule">annotations</span><span class="token punctuation">:</span> 资源注解</code></pre><h3 id="spec"><a href="#spec" class="headerlink" title="spec"></a>spec</h3><blockquote><p>disired state 期望状态, <code>kubectl explain pods.spec</code>查看帮助  </p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spec</span><span class="token punctuation">:</span>    <span class="token key atrule">containers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> &lt;string<span class="token punctuation">></span>      <span class="token key atrule">image</span><span class="token punctuation">:</span> &lt;string<span class="token punctuation">></span>      <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> &lt;string<span class="token punctuation">></span> <span class="token punctuation">[</span>IfNotPresent<span class="token punctuation">,</span>Always<span class="token punctuation">,</span>Never<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># Always：不管镜像是否存在都会进行一次拉取。  </span>        <span class="token comment" spellcheck="true"># Never：不管镜像是否存在都不会进行拉取  </span>        <span class="token comment" spellcheck="true"># IfNotPresent：只有镜像不存在时，才会进行镜像拉取,默认为IfNotPresent，但:latest标签的镜像默认为Always</span>      <span class="token key atrule">ports</span><span class="token punctuation">:</span> &lt;<span class="token punctuation">[</span><span class="token punctuation">]</span>Object<span class="token punctuation">></span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> &lt;string<span class="token punctuation">></span>        <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> &lt;integer<span class="token punctuation">></span>      <span class="token key atrule">command</span><span class="token punctuation">:</span> &lt;<span class="token punctuation">[</span><span class="token punctuation">]</span>string<span class="token punctuation">></span> <span class="token comment" spellcheck="true"># 运行的应用程序，类似docker的entrypoint,并且这里的命令不会允许中shell中</span>      <span class="token key atrule">args</span><span class="token punctuation">:</span> &lt;<span class="token punctuation">[</span><span class="token punctuation">]</span>string<span class="token punctuation">></span> <span class="token comment" spellcheck="true"># args将参数传给command</span>      <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>        <span class="token key atrule">postStart</span><span class="token punctuation">:</span> &lt;Object<span class="token punctuation">></span>             <span class="token comment" spellcheck="true"># 容器创建成功后，运行前的任务，用于资源部署、环境准备等，在完成之前，容器处于ContainerCreating状态</span>        <span class="token key atrule">preStop</span><span class="token punctuation">:</span> &lt;Object<span class="token punctuation">></span>           <span class="token comment" spellcheck="true"># 在容器被终止前的任务，用于优雅关闭应用程序、通知其他系统等等</span>      <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span> &lt;Object<span class="token punctuation">></span>         <span class="token comment" spellcheck="true"># 存活探针,确定何时重启容器当应用程序处于运行状态但无法做进一步操作，</span>        <span class="token comment" spellcheck="true"># liveness探针将捕获到deadlock，重启处于该状态下的容器 </span>        <span class="token comment" spellcheck="true"># Kubernetes支持3种类型的应用健康检查动作，分别为HTTP Get、Container Exec和TCP Socket  </span>      <span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span> &lt;Object<span class="token punctuation">></span>        <span class="token comment" spellcheck="true"># 就绪探针,确定容器是否已经就绪可以接受流量,</span>        <span class="token comment" spellcheck="true"># 只有当Pod中的容器都处于就绪状态时kubelet才会认定该Pod处于就绪状态</span>        <span class="token comment" spellcheck="true"># 就绪状态, pod才会按照标签加入service  </span>        <span class="token comment" spellcheck="true">########### livenessProbe,readinessProbe 中接受属性</span>        <span class="token key atrule">exec</span><span class="token punctuation">:</span> &lt;Object<span class="token punctuation">></span>          <span class="token key atrule">command</span><span class="token punctuation">:</span> &lt;<span class="token punctuation">[</span><span class="token punctuation">]</span>string<span class="token punctuation">></span>          <span class="token key atrule">httpGet</span><span class="token punctuation">:</span> &lt;Object<span class="token punctuation">></span>          <span class="token key atrule">host</span><span class="token punctuation">:</span> &lt;string<span class="token punctuation">></span> <span class="token comment" spellcheck="true"># 连接的主机名，默认连接到pod的IP。你可能想在http header中设置”Host”而不是使用IP</span>          <span class="token key atrule">httpHeaders</span><span class="token punctuation">:</span> &lt;<span class="token punctuation">[</span><span class="token punctuation">]</span>Object<span class="token punctuation">></span>  <span class="token comment" spellcheck="true"># 自定义请求的header。HTTP运行重复的header</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> &lt;string<span class="token punctuation">></span> <span class="token comment" spellcheck="true"># 访问的HTTP server的path</span>          <span class="token key atrule">port</span><span class="token punctuation">:</span> &lt;string<span class="token punctuation">></span> <span class="token comment" spellcheck="true"># 访问的容器的端口名字或者端口号。端口号必须介于1和65525之间</span>          <span class="token key atrule">scheme</span><span class="token punctuation">:</span> &lt;string<span class="token punctuation">></span> <span class="token comment" spellcheck="true"># 连接使用的schema，默认HTTP</span>        <span class="token key atrule">tcpSocket</span><span class="token punctuation">:</span> &lt;Object<span class="token punctuation">></span>          <span class="token key atrule">host</span><span class="token punctuation">:</span> &lt;string<span class="token punctuation">></span>          <span class="token key atrule">port</span><span class="token punctuation">:</span> &lt;string<span class="token punctuation">></span>        <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> &lt;integer<span class="token punctuation">></span> <span class="token comment" spellcheck="true"># 容器启动后，等待多少秒之后进行第一次探测</span>        <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> &lt;integer<span class="token punctuation">></span> <span class="token comment" spellcheck="true"># 执行探测的频率。默认是10秒，最小1秒</span>        <span class="token key atrule">successThreshold</span><span class="token punctuation">:</span> &lt;integer<span class="token punctuation">></span> <span class="token comment" spellcheck="true"># 探测失败后，最少连续探测成功多少次才被认定为成功。默认是1。对于liveness必须是1。最小值是1</span>        <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> &lt;integer<span class="token punctuation">></span> <span class="token comment" spellcheck="true"># 探测成功后，最少连续探测失败多少次才被认定为失败。默认是3。最小值是1</span>        <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> &lt;integer<span class="token punctuation">></span> <span class="token comment" spellcheck="true"># 探测超时时间。默认1秒，最小1秒</span>      <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># CPU的单位是milicpu，单位后缀m代表“千分之一核心”，500mcpu=0.5cpu；而内存的单位则包括E, P, T, G, M, K, Ei, Pi, Ti, Gi, Mi, Ki等</span>        <span class="token key atrule">requests</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 请求</span>          <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"300m"</span>          <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"64Mi"</span>        <span class="token key atrule">limits</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 上限</span>          <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"500m"</span>          <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"128Mi"</span>    <span class="token key atrule">initContainers</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># Init Container在所有容器运行之前执行（run-to-completion），常用来初始化配置</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> &lt;string<span class="token punctuation">></span>    <span class="token key atrule">nodeName</span><span class="token punctuation">:</span> nodename 指定node节点    <span class="token key atrule">nodeSelector</span><span class="token punctuation">:</span> &lt;map<span class="token punctuation">[</span>string<span class="token punctuation">]</span>string<span class="token punctuation">></span> 指定node的label标签    <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> &lt;string<span class="token punctuation">></span> Always<span class="token punctuation">,</span> OnFailure<span class="token punctuation">,</span> Never. Default to Always.    <span class="token comment" spellcheck="true"># Always：只要退出就重启</span>    <span class="token comment" spellcheck="true"># OnFailure：失败退出（exit code不等于0）时重启</span>    <span class="token comment" spellcheck="true"># Never：只要退出就不再重启</span></code></pre><h3 id="status"><a href="#status" class="headerlink" title="status"></a>status</h3><blockquote><p>当前状态 current state(只读), 由kubernetes集群维护,不需要用户自己定义</p></blockquote><h2 id="Demo-Code"><a href="#Demo-Code" class="headerlink" title="Demo Code"></a>Demo Code</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> flaskapp<span class="token punctuation">-</span>pod<span class="token punctuation">-</span>v1  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> flaskapp    <span class="token key atrule">version</span><span class="token punctuation">:</span> v1  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>     <span class="token key atrule">note</span><span class="token punctuation">:</span> <span class="token string">"This is Flask app."</span><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> flaskapp<span class="token punctuation">-</span>container<span class="token punctuation">-</span>v1    <span class="token key atrule">image</span><span class="token punctuation">:</span> sakuragaara/flaskapp<span class="token punctuation">:</span>v1    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> Never    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> http        <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">5000</span>    <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>      <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5000</span>        <span class="token key atrule">path</span><span class="token punctuation">:</span> /index      <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">30</span>      <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>      <span class="token key atrule">successThreshold</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">8</span>    <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MY_NODE_NAME          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>            <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>              <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> spec.nodeName        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MY_POD_NAME          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>            <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>              <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> metadata.name        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MY_POD_NAMESPACE          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>            <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>              <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> metadata.namespace        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MY_POD_IP          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>            <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>              <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> status.podIP        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MY_APP_NAME          <span class="token key atrule">value</span><span class="token punctuation">:</span> Flask APP    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token key atrule">requests</span><span class="token punctuation">:</span>        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"0.1"</span>        <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"56Mi"</span>      <span class="token key atrule">limits</span><span class="token punctuation">:</span>        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"1"</span>        <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"128Mi"</span></code></pre><p><strong><em>tcpSocket没有加host，主要是host默认为containers的IP，而flask启动是0.0.0.0，使用127.0.0.1监听会报错</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS云搭建安全简单免费的VPN服务</title>
      <link href="/2019/04/16/2019-04-16-AWS%E4%BA%91%E6%90%AD%E5%BB%BA%E5%AE%89%E5%85%A8%E7%AE%80%E5%8D%95%E5%85%8D%E8%B4%B9%E7%9A%84VPN%E6%9C%8D%E5%8A%A1/"/>
      <url>/2019/04/16/2019-04-16-AWS%E4%BA%91%E6%90%AD%E5%BB%BA%E5%AE%89%E5%85%A8%E7%AE%80%E5%8D%95%E5%85%8D%E8%B4%B9%E7%9A%84VPN%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Reference resources:<br><a href="https://www.webdigi.co.uk/blog/2015/how-to-setup-your-own-private-secure-free-vpn-on-the-amazon-aws-cloud-in-10-minutes/" target="_blank" rel="noopener">https://www.webdigi.co.uk/blog/2015/how-to-setup-your-own-private-secure-free-vpn-on-the-amazon-aws-cloud-in-10-minutes/</a>   </p></blockquote><h2 id="Creating-your-Private-VPN-Server"><a href="#Creating-your-Private-VPN-Server" class="headerlink" title="Creating your Private VPN Server"></a>Creating your Private VPN Server</h2><p>================================</p><p>1. Setup a free Amazon (AWS) cloud account.<br>Visit <a href="https://www.webdigi.co.ukhttp://aws.amazon.com/free/" target="_blank" rel="noopener">http://aws.amazon.com/free/ </a> and complete the signup. If you already have an Amazon AWS account then please login and follow on.</p><a id="more"></a><ol start="2"><li>Select a region for your VPN server.<br>The VPN server can be in the following locations – North Virginia, Oregon, California, Ireland, Frankfurt, Singapore, Tokyo, Sydney, São Paulo. All your traffic will flow through the region that your VPN server is hosted. The selected region will appear in bold next to your name on the top header bar.</li></ol><p><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/AWS-Region.png" alt="AWS-Region "></p><p>3. Open CloudFormation in the Amazon AWS control panel.<br>You can follow this <a href="https://www.webdigi.co.ukhttps://console.aws.amazon.com/cloudformation/home" target="_blank" rel="noopener">link </a> or click on the cloud formation link from the AWS page.</p><p><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/Cloud-Formation.png" alt="Cloud-Formation "></p><p>4. Start creating a stack with CloudFormation. Click on “Create Stack” button on top of the page.</p><p><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/CloudFormation-CreateStack.png" alt="CloudFormation-CreateStack "></p><p>5. Setting up the template for the stack<br>Enter a stack Name say MyVPN (you use what you like). Then under Template, Source, select “Specify an Amazon S3 template URL” and paste in this URL <strong><a href="https://s3.amazonaws.com/webdigi/VPN/Unified-Cloud-Formation.yaml" target="_blank" rel="noopener">https://s3.amazonaws.com/webdigi/VPN/Unified-Cloud-Formation.yaml</a></strong> and then click Next.</p><p><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/CloudFormation-SelectTemplate.png" alt="CloudFormation-SelectTemplate "></p><p>6. Setup VPN access details in the Specify Parameters page<br>Speed: Select Standard.VPN-Free and this should do for most use cases. We have also added faster server options if you ever require VPN with multiple simultaneous video streams and so on.<br>Username: VPN username for your VPN server.<br>VPNPassword: VPN password for your VPN server.<br>VPNPhrase: VPN passphrase the L2TP – IPSEC connections on your VPN server.<br><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/CloudFormation-SpecifyParameters.png" alt="CloudFormation-SpecifyParameters "></p><p>7. You will then be taken to the Options section and you can click Next without having to fill anything on this page.</p><p><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/CloudFormation-Options.png" alt="CloudFormation-Options "></p><p>Finally, you will see a review page as in the screenshot below. Just click on Create and the VPN server will be created in a few minutes.<br><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/CloudFormation-Review.png" alt="CloudFormation-Review "></p><p>8. Monitoring the VPN server creation</p><p>You will see a page which shows that the status is Create in progress as below.</p><p><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/CloudFormation-CreateInProgress.png" alt="CloudFormation-CreateInProgress "></p><p>Within about 2 minutes you should see that the stack create in progress is complete as below.</p><p><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/CloudFormation-CreateComplete.png" alt="CloudFormation-CreateComplete "></p><p>9. Obtain the private VPN server IP address</p><p>Once the stack status shows as CREATE_COMPLETE you can then click on the Outputs tab.</p><p><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/CloudFormation-OutputsTab.png" alt="CloudFormation-OutputsTab "></p><p>Now in the outputs tab you can see the server IP address as highlighted below.</p><p><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/CloudFormation-Outputs.png" alt="CloudFormation-Outputs "></p><p>Awesome, you should now have your private VPN server running in the IP address shown in the outputs tab. Please note that the IP address is unique for your server and you need it to connect your devices. <strong>Now your VPN server is ready</strong> and let us connect to it.</p><h2 id="Connecting-to-your-private-VPN-server"><a href="#Connecting-to-your-private-VPN-server" class="headerlink" title="Connecting to your private VPN server"></a>Connecting to your private VPN server</h2><p>=====================================</p><p>Each device has its own configuration to connect to a VPN server. We have added a how to for a few popular devices below. Please note that your private VPN server <strong>supports both PPTP and L2TP</strong> with IPSEC. This means that your VPN server supports most devices out there including older routers. You can connect to your VPN server with either PPTP or L2TP as supported by your device.</p><p>The parameters for your VPN connection are<br><strong>Server Address</strong>: The IP address from step 9 and this is unique for your VPN server.<br><strong>VPN Username &amp; Password</strong>: From step 6 above. Same username &amp; password for PPTP / L2TP VPN.<br><strong>VPN Passphrase</strong>: You set this up on step 6 above and only have to be used with an L2TP connection.</p><p>Examples below use PPTP but you can also find out how to setup L2TP with IPSEC on various websites.</p><p>1. Setting up VPN on an Android 5.0<br><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/Android-VPN-Step1.png" alt="Android-VPN-Step1 "><br><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/Android-VPN-Step2.png" alt="Android-VPN-Step2 "><br><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/Android-VPN-Step3.png" alt="Android-VPN-Step3 "><br><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/Android-VPN-Step4.png" alt="Android-VPN-Step4 "><br><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/Android-VPN-Step5.png" alt="Android-VPN-Step5 "></p><p>2. Setting up VPN on a MAC with the PPTP connection.<br>*<em>UPDATE Nov 2016: PPTP is not supported on macOS Sierra so follow point 3 using L2TP over IPSEC (below).<br>*</em><br>First open System Preferences, then Network and follow the screenshots below.<br><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/MAC-VPN-Step1.png" alt="MAC-VPN-Step1 "><br><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/MAC-VPN-Step2.png" alt="MAC-VPN-Step2 "><br><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/MAC-VPN-Step3.png" alt="MAC-VPN-Step3 "><br><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/MAC-VPN-Step4.png" alt="MAC-VPN-Step4 "><br><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/MAC-VPN-Step5.png" alt="MAC-VPN-Step5 "><br><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/MAC-VPN-Step6.png" alt="MAC-VPN-Step6 "><br><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/MAC-VPN-Step7.png" alt="MAC-VPN-Step7 "></p><p>3. Setting up VPN on a Mac with L2TP over IPSec<br><strong>UPDATE Nov 2016: L2TP is recommended now. Follow instructions as in PPTP after you setup up to point 8 below.</strong></p><p><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/L2TP-1.png" alt="l2tp-1 "></p><p><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/L2TP-2.png" alt="l2tp-2 "></p><p><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/L2TP-3.png" alt="l2tp-3 "></p><p>Follow other steps as outlined in the above section on PPTP to finish the setup.</p><p>4. Setting up VPN on Asus RT-AC68U router</p><p><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/ASUS-RT-AC68U-VPN.png" alt="ASUS-RT-AC68U-VPN "></p><p>5. For all other devices please search for Setting up PPTP VPN on my iphone and so on. You can also setup an L2TP IPSEC VPN which is more secure but might not be supported on all devices.</p><h2 id="Tips-Suggestions"><a href="#Tips-Suggestions" class="headerlink" title="Tips / Suggestions"></a>Tips / Suggestions</h2><p>==================</p><p>1. If you want to delete your VPN server then just open CloudFormation on AWS. Make sure you select the same region that you created your VPN server. Then just click on Delete Stack button and your private VPN server will be removed.</p><p><img src="https://www.webdigi.co.uk/blog/wp-content/uploads/2015/03/CloudFormation-DeleteStack.png" alt="CloudFormation-DeleteStack "></p><p>2. You can have multiple VPN servers all over the world. You just have to repeat the setup steps in this guide by selecting different regions. Please note that AWS free tier gives you a total of 750 hours a month free. You can also delete and create VPN servers as frequently as you want.</p><p>3. Setting up a VPN connection on your router will allow all devices on its network to use the VPN server. This could be beneficial for use with AppleTV / Chromecast and any device that does not support a VPN.</p><p>4. You can test if your VPN connection is active by just searching for “what is my ip address” on your favourite search engine. The IP address reported will be that of your private VPN server if everything is your connection is enabled. If your VPN connection is not enabled or if the VPN server settings are not complete then it will report your ISP’s IP address.</p><p>5. We love your feedback and let us know if you face any issues in the comments section below or on our <a href="https://www.webdigi.co.ukhttps://github.com/webdigi/AWS-VPN-Server-Setup" target="_blank" rel="noopener">github page for setting up your private VPN on AWS </a>.</p>]]></content>
      
      
      <categories>
          
          <category> VPN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx访问控制(持续更新)</title>
      <link href="/2019/04/10/2019-04-10-Nginx%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/"/>
      <url>/2019/04/10/2019-04-10-Nginx%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>NGINX实现IF语句里的AND，OR多重判断<br>正常清空下使用allow,deny 可以完成，但是对于同时过滤ip和页面，就无法按照正常规则去实现</p></blockquote><h3 id="Nginx的rewrite规则参考"><a href="#Nginx的rewrite规则参考" class="headerlink" title="Nginx的rewrite规则参考"></a>Nginx的rewrite规则参考</h3><ul><li>~ 为区分大小写匹配</li><li>~* 为不区分大小写匹配</li><li>!<del>和!</del>*分别为区分大小写不匹配及不区分大小写不匹</li></ul><a id="more"></a><ul><li>-f和!-f用来判断是否存在文件</li><li>-d和!-d用来判断是否存在目录</li><li>-e和!-e用来判断是否存在文件或目录</li><li>-x和!-x用来判断文件是否可执行</li></ul><ul><li>last 相当于Apache里的[L]标记，表示完成rewrite，呵呵这应该是最常用的</li><li>break 终止匹配, 不再匹配后面的规则</li><li>redirect 返回302临时重定向 地址栏会显示跳转后的地址</li><li>permanent 返回301永久重定向 地址栏会显示跳转后的地址</li></ul><table><thead><tr><th>Nginx参数</th><th>解释</th></tr></thead><tbody><tr><td>arg_PARAMETER</td><td>这个变量包含GET请求中，如果有变量PARAMETER时的值。</td></tr><tr><td>args</td><td>这个变量等于请求行中(GET请求)的参数，如：foo=123&amp;bar=blahblah;</td></tr><tr><td>binary_remote_addr</td><td>二进制的客户地址。</td></tr><tr><td>body_bytes_sent</td><td>响应时送出的body字节数数量。即使连接中断，这个数据也是精确的。</td></tr><tr><td>content_length</td><td>请求头中的Content-length字段。</td></tr><tr><td>content_type</td><td>请求头中的Content-Type字段。</td></tr><tr><td>cookie_COOKIE</td><td>cookie COOKIE变量的值</td></tr><tr><td>document_root</td><td>当前请求在root指令中指定的值。</td></tr><tr><td>document_uri</td><td>与uri相同。</td></tr><tr><td>host</td><td>请求主机头字段，否则为服务器名称。</td></tr><tr><td>hostname</td><td>Set to themachine’s hostname as returned by gethostname</td></tr><tr><td>http_HEADER</td><td></td></tr><tr><td>is_args</td><td>如果有args参数，这个变量等于”?”，否则等于””，空值。</td></tr><tr><td>http_user_agent</td><td>客户端agent信息</td></tr><tr><td>http_cookie</td><td>客户端cookie信息</td></tr><tr><td>limit_rate</td><td>这个变量可以限制连接速率。</td></tr><tr><td>query_string</td><td>与args相同。</td></tr><tr><td>request_body_file</td><td>客户端请求主体信息的临时文件名。</td></tr><tr><td>request_method</td><td>客户端请求的动作，通常为GET或POST。</td></tr><tr><td>remote_addr</td><td>客户端的IP地址。</td></tr><tr><td>remote_port</td><td>客户端的端口。</td></tr><tr><td>remote_user</td><td>已经经过Auth Basic Module验证的用户名。</td></tr><tr><td>request_completion</td><td>如果请求结束，设置为OK. 当请求未结束或如果该请求不是请求链串的最后一个时，为空(Empty)。</td></tr><tr><td>request_method</td><td>GET或POST</td></tr><tr><td>request_filename</td><td>当前请求的文件路径，由root或alias指令与URI请求生成。</td></tr><tr><td>request_uri</td><td>包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。不能修改。</td></tr><tr><td>scheme</td><td>HTTP方法（如http，https）。</td></tr><tr><td>server_protocol</td><td>请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</td></tr><tr><td>server_addr</td><td>服务器地址，在完成一次系统调用后可以确定这个值。</td></tr><tr><td>server_name</td><td>服务器名称。</td></tr><tr><td>server_port</td><td>请求到达服务器的端口号。</td></tr></tbody></table><h3 id="NGINX实现IF语句里的AND，OR多重判断"><a href="#NGINX实现IF语句里的AND，OR多重判断" class="headerlink" title="NGINX实现IF语句里的AND，OR多重判断"></a>NGINX实现IF语句里的AND，OR多重判断</h3><p>nginx的配置中不支持if条件的逻辑与／逻辑或运算 ，并且不支持if的嵌套语法，我们可以用变量的方式来实现<br>具体方法为AND 就用变量叠加，OR就用0或1切换</p><p>如定义结尾以swagger-ui.html和api-docs的页面，只能由202.101.172.35和8.8.8.8访问：</p><ul><li>伪代码</li></ul><pre><code>if ($remote_addr !~ &quot;(202.101.172.35|8.8.8.8)&quot; &amp;&amp; $request_uri ~* (swagger-ui.html|api-docs)$) {  return 403;}</code></pre><ul><li>上述伪代码Nginx实现</li></ul><pre><code>location / {    set $flag 0;    if ($remote_addr !~ &quot;122.224.128.14&quot;) {        set $flag &quot;${flag}1&quot;;    }    if ($request_uri ~* (swagger-ui.html|api-docs)$) {        set $flag &quot;${flag}2&quot;;    }    if ($flag = &quot;012&quot;) {        return 403;    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云ECS安全基线检查</title>
      <link href="/2019/04/09/2019-04-09-%E9%98%BF%E9%87%8C%E4%BA%91ECS%E5%AE%89%E5%85%A8%E5%9F%BA%E7%BA%BF%E6%A3%80%E6%9F%A5/"/>
      <url>/2019/04/09/2019-04-09-%E9%98%BF%E9%87%8C%E4%BA%91ECS%E5%AE%89%E5%85%A8%E5%9F%BA%E7%BA%BF%E6%A3%80%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>阿里云ECS安全基线检查<br>Centos6, Centos7</p></blockquote><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p>1, 设置用户权限配置文件的权限<br>描述<br>设置用户权限配置文件的权限<br>加固建议<br>执行以下5条命令</p><pre><code>chown root:root /etc/passwd /etc/shadow /etc/group /etc/gshadowchmod 0644 /etc/group chmod 0644 /etc/passwd chmod 0400 /etc/shadow chmod 0400 /etc/gshadow</code></pre><a id="more"></a><h3 id="etc-ssh-sshd-config"><a href="#etc-ssh-sshd-config" class="headerlink" title="/etc/ssh/sshd_config"></a>/etc/ssh/sshd_config</h3><p>2，确保SSH MaxAuthTries设置为3到6之间<br>描述<br>设置较低的Max AuthTrimes参数将降低SSH服务器被暴力攻击成功的风险<br>加固建议<br>在 <code>/etc/ssh/sshd_config</code> 中取消MaxAuthTries注释符号#，设置最大密码尝试失败次数3-6，建议为4： <code>MaxAuthTries 4</code></p><p>3, 禁止SSH空密码用户登录<br>描述<br>禁止SSH空密码用户登录<br>加固建议<br>在 <code>/etc/ssh/sshd_config</code> 中取消<code>PermitEmptyPasswords no</code>注释符号#</p><p>4, 确保SSH LogLevel设置为INFO<br>描述<br>确保SSH LogLevel设置为INFO,记录登录和注销活动<br>加固建议<br>编辑 <code>/etc/ssh/sshd_config</code> 文件以按如下方式设置参数(取消注释): <code>LogLevel INFO</code></p><p>5, SSHD强制使用V2安全协议<br>描述<br>SSHD强制使用V2安全协议<br>加固建议<br>编辑 <code>/etc/ssh/sshd_config</code> 文件以按如下方式设置参数： <code>Protocol 2</code></p><p>6, 设置SSH空闲超时退出时间<br>描述<br>设置SSH空闲超时退出时间,可降低未授权用户访问其他用户ssh会话的风险<br>加固建议<br>编辑<code>/etc/ssh/sshd_config</code>，将ClientAliveInterval 设置为300到900，即5-15分钟，将ClientAliveCountMax设置为0。 <code>ClientAliveInterval 900 ClientAliveCountMax 0</code></p><h3 id="etc-login-defs"><a href="#etc-login-defs" class="headerlink" title="/etc/login.defs"></a>/etc/login.defs</h3><p>7, 设置密码失效时间<br>描述<br>设置密码失效时间，强制定期修改密码，减少密码被泄漏和猜测风险，使用非密码登陆方式(如密钥对)请忽略此项<br>加固建议<br>使用非密码登陆方式如密钥对，请忽略此项。在 <code>/etc/login.defs</code> 中将 PASS_MAX_DAYS 参数设置为 60-180之间，如 <code>PASS_MAX_DAYS 90</code> 。需同时执行命令设置root密码失效时间： <code>chage --maxdays 90 root</code></p><p>8, 设置密码修改最小间隔时间<br>描述<br>设置密码修改最小间隔时间，限制密码更改过于频繁<br>加固建议<br>在 <code>/etc/login.defs</code> 中将 PASS_MIN_DAYS 参数设置为7-14之间,建议为7： <code>PASS_MIN_DAYS 7</code> 需同时执行命令为root用户设置： <code>chage --mindays 7 root</code></p><p>9, 确保密码到期警告天数为7或更多<br>描述<br>确保密码到期警告天数为7或更多<br>加固建议<br>在 <code>/etc/login.defs</code> 中将 PASS_WARN_AGE 参数设置为7-14之间，建议为7： <code>PASS_WARN_AGE 7</code> 。同时执行命令使root用户设置生效： <code>chage --warndays 7 root</code></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECS安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysqlbinlog实时同步至elasticsearch</title>
      <link href="/2019/04/02/2019-04-02-mysqlbinlog%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5%E8%87%B3elasticsearch/"/>
      <url>/2019/04/02/2019-04-02-mysqlbinlog%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5%E8%87%B3elasticsearch/</url>
      
        <content type="html"><![CDATA[<blockquote><p>canal从mysql中获取binlog日志信息，输出至kafka，logstash从kafka中获取日志信息，写入elasticsearch<br>不过看起来好像毫无意义,所以做的比较简易</p></blockquote><a id="more"></a><h2 id="demo环境介绍"><a href="#demo环境介绍" class="headerlink" title="demo环境介绍"></a>demo环境介绍</h2><ul><li>MYSQL: 使用docker做的一个5.7的环境，用于做自己网站的一个数据库</li><li>Canal: 是阿里巴巴旗下的一款开源项目，纯Java开发。基于数据库增量日志解析，提供增量数据订阅&amp;消费，目前主要支持了MySQL（也支持mariaDB）</li><li>kafka: 使用docker-compose创建的一个集群[<a href="https://sakuragaara.github.io/kafka/2019/03/07/kafka/" target="_blank" rel="noopener">docker-compose.yml</a>]</li><li>elasticsearch+kibana: 使用docker-compose创建的单节点demo</li><li>logstash: 用于从kafka写入elasticearch</li></ul><h2 id="Canal简单配置"><a href="#Canal简单配置" class="headerlink" title="Canal简单配置"></a>Canal简单配置</h2><p>1.修改以下文件</p><pre><code>vim conf/canal.propertiescanal.serverMode = kafka # 配置输出至kafkacanal.mq.servers = 127.0.0.1:9091 # kafka server</code></pre><pre><code>vim conf/example/instance.propertiescanal.instance.master.address=127.0.0.1:3000 # mysql数据库地址canal.instance.dbUsername=canalcanal.instance.dbPassword=canalcanal.instance.connectionCharset = UTF-8canal.instance.defaultDatabaseName = book # 可注释掉，则为所有数据库canal.mq.topic=book # 定义kafka订阅主题</code></pre><p>2.启动canal</p><pre><code>./bin/startup.sh</code></pre><p>3.以上则完成Canal配置，检查kafka是否可接受到canal传来的日志内容</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> kafka <span class="token keyword">import</span> KafkaConsumerconsumer <span class="token operator">=</span> KafkaConsumer<span class="token punctuation">(</span><span class="token string">'book'</span><span class="token punctuation">,</span>bootstrap_servers<span class="token operator">=</span><span class="token string">'127.0.0.1:9092'</span><span class="token punctuation">,</span> auto_offset_reset<span class="token operator">=</span><span class="token string">'earliest'</span><span class="token punctuation">)</span><span class="token keyword">for</span> msg <span class="token keyword">in</span> consumer<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'topic: %s \n partition: %s \n offset: %s \n headers: %s \n timestamp: %s \n timestamp_type: %s \n key: %s \n value: %s '</span> <span class="token operator">%</span> <span class="token punctuation">(</span>          msg<span class="token punctuation">.</span>topic<span class="token punctuation">,</span>          msg<span class="token punctuation">.</span>partition<span class="token punctuation">,</span>          msg<span class="token punctuation">.</span>offset<span class="token punctuation">,</span>          msg<span class="token punctuation">.</span>headers<span class="token punctuation">,</span>          msg<span class="token punctuation">.</span>timestamp<span class="token punctuation">,</span>          msg<span class="token punctuation">.</span>timestamp_type<span class="token punctuation">,</span>          msg<span class="token punctuation">.</span>key<span class="token punctuation">,</span>          msg<span class="token punctuation">.</span>value<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span></code></pre><p>向数据库中插入数据，运行脚步是否能得到输出结果</p><p>![mysqltest](/images/img/2019-04-02 2.16.59.png)<br>![kafka-consumer](/images/img/2019-04-02 2.39.41.png)  </p><p>kafka既然能接受到canal传来的日志，接下来就可以配置logstash从Kafka接受消息写入es</p><h2 id="配置logstash"><a href="#配置logstash" class="headerlink" title="配置logstash"></a>配置logstash</h2><p>1.准备logstash配置文件kafka-logstash-es.conf</p><pre><code>input {    kafka {        bootstrap_servers =&gt; &quot;172.16.149.242:9092&quot;  # 5.x版本，写法bootstrap_servers        group_id =&gt; &quot;elastic_consumer&quot;        topics =&gt; [&quot;book&quot;]        consumer_threads =&gt; 3        decorate_events =&gt; true        codec =&gt; &quot;json&quot;    }}output {    elasticsearch {        hosts=&gt; [&quot;172.16.149.242:9200&quot;]        index =&gt; &quot;logstash-book-%{[table]}-%{+YYYY-MM-dd}&quot;  # 按照不同的表和日期做索引        codec =&gt; &quot;json&quot;    }}</code></pre><p>logstash-kafka-plugin 配置文件<a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-kafka.html" target="_blank" rel="noopener">参考</a><br>配置与logstash版本相关</p><p>2.启动logstash,并查看es是否有索引</p><pre><code>./bin/logstash -f kafka-logstash-es.conf</code></pre><p>3.验证es是否有索引和相关数据<br>![check_es](/images/img/2019-04-02 3.06.28.png)</p>]]></content>
      
      
      <categories>
          
          <category> elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> canal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes应用[一]</title>
      <link href="/2019/03/28/2019-03-28-kubernetes%E5%BA%94%E7%94%A8%5B%E4%B8%80%5D/"/>
      <url>/2019/03/28/2019-03-28-kubernetes%E5%BA%94%E7%94%A8%5B%E4%B8%80%5D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>kubectl相关命令操作</p></blockquote><ul><li>查看节点详细信息<pre><code>[root@master-01 ~]# kubectl describe node node-01  </code></pre></li></ul><h2 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ul><li>创建pod <code>kubectl run</code><br>```<br>[root@master-01 ~]# kubectl run nginx-deploy –image=nginx:latest –port=80 –replicas=1 –dry-run=true<br>nginx-deploy 创建pod名称  </li><li>-image 指定镜像  </li><li>-port 指定端口  </li><li>-reolices 指定pod内创建几个容器  </li><li>-dry-run 干跑模式  <pre><code>&lt;!--more--&gt;</code></pre></li></ul><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><ul><li><p>查看pod <code>kubectl get pods</code>  </p><pre><code>[root@master-01 ~]# kubectl get pods  NAME                           READY   STATUS    RESTARTS   AGE  nginx-deploy-86bf78c77-ftscg   1/1     Running   0          4h17m  </code></pre></li><li><p>查看pod详细信息 <code>kubectl describe</code></p><pre><code>[root@master-01 ~]# kubectl describe pod nginx-deploy-86bf78c77-ftscg  </code></pre></li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul><li>删除pod <code>kubectl delete</code>  <pre><code>[root@master-01 ~]# kubectl delete pod nginx-deploy-86bf78c77-ftscg  pod &quot;nginx-deploy-86bf78c77-ftscg&quot; deleted  </code></pre>删除之后发现会自动创建一个pod<br>[root@master-01 ~]# kubectl get pod  <pre><code>NAME                           READY   STATUS    RESTARTS   AGE  nginx-deploy-86bf78c77-ffj8d   1/1     Running   0          35s  </code></pre></li></ul><h3 id="彻底删除-kubectl-delete-deployment"><a href="#彻底删除-kubectl-delete-deployment" class="headerlink" title="彻底删除 kubectl delete deployment"></a>彻底删除 <code>kubectl delete deployment</code></h3><pre><code>[root@master-01 ~]# kubectl delete deployment nginx-deploydeployment.extensions &quot;nginx-deploy&quot; deleted</code></pre><h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><h3 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h3><ul><li>创建服务 <code>kubectl expose</code><br>```<br>[root@master-01 ~]# kubectl expose deployment nginx-deploy –name=nginx –port=80 –target-port=80 –protocol=TCP<br>nginx-deploy 为上面创建的pod名  </li><li>-name 指定服务名  </li><li>-port 指定pod端口  </li><li>-target-port 指定service端口映射pod端口  </li><li>-protocol 端口类型  <pre><code></code></pre></li></ul><h3 id="查看-1"><a href="#查看-1" class="headerlink" title="查看"></a>查看</h3><ul><li>查看服务 <code>kubectl get service</code>  <pre><code>[root@master-01 ~]# kubectl get service  NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE  kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP   21h  nginx        ClusterIP   10.104.62.105   &lt;none&gt;        80/TCP    2m35s  这时，在pod内可以使用地址&lt;http://10.104.62.105&gt;或者服务名&lt;http://nginx&gt;访问nginx,但是节点依旧无法访问  </code></pre></li><li>查看服务具体信息 <code>kubectl describe service</code>  <pre><code>[root@master-01 ~]# kubectl describe service nginx  Name:              nginx  Namespace:         default  Labels:            run=nginx-deploy  Annotations:       &lt;none&gt;  Selector:          run=nginx-deploy  Type:              ClusterIP  IP:                10.104.62.105  Port:              &lt;unset&gt;  80/TCP  TargetPort:        80/TCP  Endpoints:         10.244.1.3:80  Session Affinity:  None  Events:            &lt;none&gt;  </code></pre></li></ul><h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><h3 id="更改pod规模"><a href="#更改pod规模" class="headerlink" title="更改pod规模"></a>更改pod规模</h3><ul><li>动态更新pod规模，增加/减少pod <code>kubectl scale</code> <pre><code>[root@master-01 ~]# kubectl scale --replicas=5 deployment nginx-deploy  [root@master-01 ~]# kubectl get pod -o wide  NAME                           READY   STATUS    RESTARTS   AGE   IP           NODE      NOMINATED NODE  client                         1/1     Running   0          26m   10.244.2.3   node-02   &lt;none&gt;  nginx-deploy-86bf78c77-8mp2p   1/1     Running   0          57s   10.244.2.5   node-02   &lt;none&gt;  nginx-deploy-86bf78c77-ffj8d   1/1     Running   0          51m   10.244.1.3   node-01   &lt;none&gt;  nginx-deploy-86bf78c77-g7s7j   1/1     Running   0          57s   10.244.2.6   node-02   &lt;none&gt;  nginx-deploy-86bf78c77-tsxmp   1/1     Running   0          57s   10.244.1.4   node-01   &lt;none&gt;  nginx-deploy-86bf78c77-vddwx   1/1     Running   0          57s   10.244.2.4   node-02   &lt;none&gt;  </code></pre></li></ul><h3 id="更改Pod镜像"><a href="#更改Pod镜像" class="headerlink" title="更改Pod镜像"></a>更改Pod镜像</h3><ul><li><p>滚动更新image <code>kubectl set image</code>  </p></li><li><p>首先查看一下当前的  </p><pre><code>[root@master-01 ~]# kubectl describe pod nginx-deploy|grep -E &quot;^Name:|Image:&quot;  Name:               nginx-deploy-86bf78c77-5h4rh    Image:          nginx:1.14-alpine  Name:               nginx-deploy-86bf78c77-ffj8d    Image:          nginx:1.14-alpine  Name:               nginx-deploy-86bf78c77-qn7zh    Image:          nginx:1.14-alpine  Name:               nginx-deploy-86bf78c77-tkmtj    Image:          nginx:1.14-alpine  Name:               nginx-deploy-86bf78c77-vddwx    Image:          nginx:1.14-alpine  </code></pre></li><li><p>使用 <code>kubectl set image</code> 更新镜像  </p><pre><code>[root@master-01 ~]# kubectl set image deployment nginx-deploy nginx-deploy=nginx:1.15.10-perl  deployment.extensions/nginx-deploy image updated  </code></pre></li><li><p>更新的同时可使用<code>kubectl rollout status</code>查看镜像升级状态  </p><pre><code>[root@master-01 ~]# kubectl rollout status deployment nginx-deploy  Waiting for deployment &quot;nginx-deploy&quot; rollout to finish: 3 out of 5 new replicas have been updated...  Waiting for deployment &quot;nginx-deploy&quot; rollout to finish: 3 out of 5 new replicas have been updated...  Waiting for deployment &quot;nginx-deploy&quot; rollout to finish: 3 out of 5 new replicas have been updated...  Waiting for deployment &quot;nginx-deploy&quot; rollout to finish: 3 out of 5 new replicas have been updated...  Waiting for deployment &quot;nginx-deploy&quot; rollout to finish: 3 out of 5 new replicas have been updated...  Waiting for deployment &quot;nginx-deploy&quot; rollout to finish: 4 out of 5 new replicas have been updated...  Waiting for deployment &quot;nginx-deploy&quot; rollout to finish: 4 out of 5 new replicas have been updated...  Waiting for deployment &quot;nginx-deploy&quot; rollout to finish: 4 out of 5 new replicas have been updated...  Waiting for deployment &quot;nginx-deploy&quot; rollout to finish: 4 out of 5 new replicas have been updated...  Waiting for deployment &quot;nginx-deploy&quot; rollout to finish: 4 out of 5 new replicas have been updated...  Waiting for deployment &quot;nginx-deploy&quot; rollout to finish: 2 old replicas are pending termination...  Waiting for deployment &quot;nginx-deploy&quot; rollout to finish: 2 old replicas are pending termination...  Waiting for deployment &quot;nginx-deploy&quot; rollout to finish: 2 old replicas are pending termination...  Waiting for deployment &quot;nginx-deploy&quot; rollout to finish: 1 old replicas are pending termination...  Waiting for deployment &quot;nginx-deploy&quot; rollout to finish: 1 old replicas are pending termination...  Waiting for deployment &quot;nginx-deploy&quot; rollout to finish: 1 old replicas are pending termination...  Waiting for deployment &quot;nginx-deploy&quot; rollout to finish: 4 of 5 updated replicas are available...  deployment &quot;nginx-deploy&quot; successfully rolled out  再次查看Pod信息，镜像已变动  [root@master-01 ~]# kubectl describe pod nginx-deploy|grep -E &quot;^Name:|Image:&quot;           Name:               nginx-deploy-7596d8b647-58xcs    Image:          nginx:1.15.10-perl  Name:               nginx-deploy-7596d8b647-dlf76    Image:          nginx:1.15.10-perl  Name:               nginx-deploy-7596d8b647-shkcn    Image:          nginx:1.15.10-perl  Name:               nginx-deploy-7596d8b647-tttkd    Image:          nginx:1.15.10-perl  Name:               nginx-deploy-7596d8b647-znf24    Image:          nginx:1.15.10-perl  </code></pre></li></ul><h3 id="回滚镜像"><a href="#回滚镜像" class="headerlink" title="回滚镜像"></a>回滚镜像</h3><ul><li>回滚 <code>kubectl rollout undo</code>  <pre><code>[root@master-01 ~]# kubectl rollout undo deployment nginx-deploy  deployment.extensions/nginx-deploy  [root@master-01 ~]# kubectl describe pod nginx-deploy|grep -E &quot;^Name:|Image:&quot;  Name:                      nginx-deploy-7596d8b647-dlf76    Image:          nginx:1.15.10-perl  Name:                      nginx-deploy-7596d8b647-tttkd    Image:          nginx:1.15.10-perl  Name:                      nginx-deploy-7596d8b647-znf24    Image:          nginx:1.15.10-perl  Name:               nginx-deploy-86bf78c77-55bdr    Image:          nginx:1.14-alpine  Name:               nginx-deploy-86bf78c77-9q54l    Image:          nginx:1.14-alpine  Name:               nginx-deploy-86bf78c77-h6qlf    Image:          nginx:1.14-alpine  Name:               nginx-deploy-86bf78c77-h9fgd    Image:          nginx:1.14-alpine  Name:               nginx-deploy-86bf78c77-vfdzs    Image:          nginx:1.14-alpine  [root@master-01 ~]# kubectl describe pod nginx-deploy|grep -E &quot;^Name:|Image:&quot;  Name:               nginx-deploy-86bf78c77-55bdr    Image:          nginx:1.14-alpine  Name:               nginx-deploy-86bf78c77-9q54l    Image:          nginx:1.14-alpine  Name:               nginx-deploy-86bf78c77-h6qlf    Image:          nginx:1.14-alpine  Name:               nginx-deploy-86bf78c77-h9fgd    Image:          nginx:1.14-alpine  Name:               nginx-deploy-86bf78c77-vfdzs    Image:          nginx:1.14-alpine  </code></pre></li></ul><h2 id="设置外部访问"><a href="#设置外部访问" class="headerlink" title="设置外部访问"></a>设置外部访问</h2><ul><li>首先查看服务  <pre><code>[root@master-01 ~]# kubectl get svc nginx  NAME    TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE  nginx   ClusterIP   10.104.62.105   &lt;none&gt;        80/TCP    5d23h  </code></pre></li><li>更改服务clusterIP类型<code>kubectl edit svc</code>  <pre><code>[root@master-01 ~]# kubectl edit svc nginx  apiVersion: v1  kind: Service  metadata:  creationTimestamp: 2019-03-22T07:50:32Z  labels:    run: nginx-deploy  name: nginx  namespace: default  resourceVersion: &quot;98592&quot;  selfLink: /api/v1/namespaces/default/services/nginx  uid: 2b765b06-4c77-11e9-a182-000c29bb0a84  spec:  clusterIP: 10.104.62.105  ports:    port: 80    protocol: TCP    targetPort: 80  selector:    run: nginx-deploy  sessionAffinity: None  type: NodePorts  status:  loadBalancer: {}  </code></pre></li><li>再次查看服务  <pre><code>[root@master-01 ~]# kubectl get svc nginx  NAME    TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE  nginx   NodePort   10.104.62.105   &lt;none&gt;        80:32660/TCP   5d23h </code></pre>此时可以使用集群内任意Node节点通过32660端口访问  </li></ul>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python之elasticsearch初试</title>
      <link href="/2019/03/27/2019-03-27-python%E4%B9%8Belasticsearch%E5%88%9D%E8%AF%95/"/>
      <url>/2019/03/27/2019-03-27-python%E4%B9%8Belasticsearch%E5%88%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>python elasticsearch库应用<br>Doc: <a href="https://pypi.org/project/elasticsearch/" target="_blank" rel="noopener">https://pypi.org/project/elasticsearch/</a></p></blockquote><a id="more"></a><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># --coding: utf-8 --</span><span class="token keyword">from</span> elasticsearch <span class="token keyword">import</span> Elasticsearch<span class="token keyword">def</span> <span class="token function">get_es_config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    es <span class="token operator">=</span> Elasticsearch<span class="token punctuation">(</span>        <span class="token punctuation">[</span><span class="token string">'http://xxxxxxxxxxx.public.elasticsearch.aliyuncs.com'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        http_auth<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'elastic'</span><span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> es<span class="token keyword">def</span> <span class="token function">search_body</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> doc<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""搜索"""</span>    es<span class="token operator">=</span>get_es_config<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> es<span class="token punctuation">.</span>indices<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>index<span class="token operator">=</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>        res<span class="token operator">=</span>es<span class="token punctuation">.</span>search<span class="token punctuation">(</span>index<span class="token operator">=</span>index<span class="token punctuation">,</span>body<span class="token operator">=</span>doc<span class="token punctuation">)</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> res<span class="token punctuation">[</span><span class="token string">"hits"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"hits"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">close_index</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""关闭/删除索引"""</span>    es <span class="token operator">=</span> get_es_config<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> es<span class="token punctuation">.</span>indices<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>index<span class="token operator">=</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> es<span class="token punctuation">.</span>indices<span class="token punctuation">.</span>close<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> es<span class="token punctuation">.</span>indices<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>search_body<span class="token punctuation">(</span><span class="token string">"my_index-2018.01.30"</span><span class="token punctuation">,</span>            doc<span class="token operator">=</span><span class="token punctuation">{</span>                <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"match"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                        <span class="token string">"geoip.city_name"</span><span class="token punctuation">:</span> <span class="token string">"Hangzhou"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token punctuation">)</span>close_index<span class="token punctuation">(</span><span class="token string">"my_index-2018.01.30"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes安装</title>
      <link href="/2019/03/20/2019-03-20-kubernetes%E5%AE%89%E8%A3%85/"/>
      <url>/2019/03/20/2019-03-20-kubernetes%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<blockquote><p>kubeadm: 主要用于提供安装kubernetes的辅助工具<br>master: nodes: 安装kubelet, kubeadm, docker, kubectl # kubectl仅master安装即可<br>master: kubeadm init  初始化集群主节点<br>nodes: kubeadm join  将node节点加入集群<br>Doc: <a href="https://github.com/kubernetes/kubeadm/blob/master/docs/design/design_v1.10.md" target="_blank" rel="noopener">https://github.com/kubernetes/kubeadm/blob/master/docs/design/design_v1.10.md</a>  </p></blockquote><h2 id="安装前配置"><a href="#安装前配置" class="headerlink" title="安装前配置"></a>安装前配置</h2><h3 id="关闭iptables-和firewalld"><a href="#关闭iptables-和firewalld" class="headerlink" title="关闭iptables 和firewalld"></a>关闭<code>iptables</code> 和<code>firewalld</code></h3><pre><code>$ systemctl stop iptables.service  $ systemctl disable iptables.service  $ systemctl stop firewalld.service   $ systemctl disable firewalld.service  </code></pre><a id="more"></a><h3 id="基于主机名"><a href="#基于主机名" class="headerlink" title="基于主机名"></a>基于主机名</h3><p>master和nodes主机名添加至/etc/hosts  </p><h3 id="主机网络桥接设置"><a href="#主机网络桥接设置" class="headerlink" title="主机网络桥接设置"></a>主机网络桥接设置</h3><pre><code>$ cat /proc/sys/net/bridge/bridge-nf-call-ip6tables  1  $ cat /proc/sys/net/bridge/bridge-nf-call-iptables  1  </code></pre><h2 id="安装kubernetes和docker"><a href="#安装kubernetes和docker" class="headerlink" title="安装kubernetes和docker"></a>安装kubernetes和docker</h2><h3 id="准备镜像源到-etc-yum-repos-d"><a href="#准备镜像源到-etc-yum-repos-d" class="headerlink" title="准备镜像源到/etc/yum.repos.d/"></a>准备镜像源到/etc/yum.repos.d/</h3><ul><li>docker-ce源   <pre><code>$ cd ; wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -P /etc/yum.repos.d/  $ yum list docker-ce --showduplicates |sort -r</code></pre></li><li>kubernetes源  </li></ul><pre><code>$ (cat &lt;&lt; EOF  [kubernetes]  name=Kubernets Repo  baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/  enabled=1  gpgcheck=1  gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg  EOF  ) &gt; /etc/yum.repos.d/kubernetes.repo  wget https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg  wget https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg  rpm --import yum-key.gpg  rpm --import rpm-package-key.gpg  yum repolist  </code></pre><h3 id="安装kubernetes和docker-1"><a href="#安装kubernetes和docker-1" class="headerlink" title="安装kubernetes和docker"></a>安装kubernetes和docker</h3><ul><li>安装kublete、kubeadm、docker、kubectl kubectl仅master安装即可  <pre><code>$ yum install docker-ce-18.06.3 kubelet-1.12.0 kubeadm-1.12.0 kubectl-1.12.0  </code></pre></li></ul><h3 id="配置kubernetes和docker"><a href="#配置kubernetes和docker" class="headerlink" title="配置kubernetes和docker"></a>配置kubernetes和docker</h3><ul><li><p>docker添加代理，[service]下添加,为了翻墙更改docker默认拉取镜像的源[这一步仅仅是为了翻墙下载镜像]  </p><pre><code>$ vim /usr/lib/systemd/system/docker.service  Environment=&quot;HTTPS_PROXY=http://www.ik8s.io:10080&quot;  Environment=&quot;NO_PROXY=127.0.0.0/8,172.16.0.0/16&quot;  </code></pre><h3 id="配置开机自动启动"><a href="#配置开机自动启动" class="headerlink" title="配置开机自动启动"></a>配置开机自动启动</h3><pre class=" language-python"><code class="language-python">systemctl enable docker kubelet  systemctl daemon<span class="token operator">-</span>reload  systemctl start docker  </code></pre><h3 id="禁用Swap功能"><a href="#禁用Swap功能" class="headerlink" title="禁用Swap功能"></a>禁用Swap功能</h3><pre><code>$ vim /etc/sysconfig/kubelet  KUBELET_EXTRA_ATGS=&quot;--fail-swap-on=false&quot;   </code></pre><h3 id="Master初始化"><a href="#Master初始化" class="headerlink" title="Master初始化"></a>Master初始化</h3><pre><code>kubeadm init --help;   kubeadm init --kubernetes-version=v1.12.0 --pod-network-cidr=10.244.0.0/16 --service-cidr=10.96.0.0/12 --ignore-preflight-errors=Swap  </code></pre></li><li><p>初始化参数  </p></li><li><p>–apiserver-advertise-address：表示apiserver对外的地址是什么，默认是0.0.0.0  </p></li><li><p>–apiserver-bind-port：表示apiserver的端口是什么，默认是6443  </p></li><li><p>–cert-dir：加载证书的目录，默认在/etc/kubernetes/pki  </p></li><li><p>–config：配置文件  </p></li><li><p>–ignore-preflight-errors：在预检中如果有错误可以忽略掉，比如忽略 IsPrivilegedUser,Swap.等  </p></li><li><p>–kubernetes-version：指定要初始化k8s的版本信息是什么  </p></li><li><p>–pod-network-cidr ：指定pod使用哪个网段，默认使用10.244.0.0/16  </p></li><li><p>–service-cidr：指定service组件使用哪个网段，默认10.96.0.0/12  </p></li><li><p>初始化产生信息  </p></li><li><p>提示在master上执行，和加入master的命令[也可以指定–ignore-preflight-errors忽略Swap]  </p></li></ul><pre><code>    ………………………………………………………………      Your Kubernetes master has initialized successfully!  To start using your cluster, you need to run the following as a regular user:    mkdir -p $HOME/.kube    sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config    sudo chown $(id -u):$(id -g) $HOME/.kube/config  You should now deploy a pod network to the cluster.  Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:    https://kubernetes.io/docs/concepts/cluster-administration/addons/  You can now join any number of machines by running the following on each node  as root:    kubeadm join 192.168.1.171:6443 --token r9105w.5r5je2vko3jyn8be --discovery-token-ca-cert-hash sha256:d7a99553b49b88d8933785fee033663adebd6d6909323cea6173d009ad66a7f8  </code></pre><ul><li>master继续执行  <pre><code>$ mkdir -p $HOME/.kube  $ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config  $ sudo chown $(id -u):$(id -g) $HOME/.kube/config  </code></pre></li><li>若初始化失败：可先行下载镜像,下载脚本  </li></ul><pre><code>$ cat pull-images.sh   #!/bin/bash  images=(kube-apiserver:v1.12.0 kube-controller-manager:v1.12.0 kube-scheduler:v1.12.0 kube-proxy:v1.12.0 pause:3.1 etcd:3.2.24 coredns:1.2.2)  for ima in ${images[@]}  do     docker pull   registry.cn-shenzhen.aliyuncs.com/lurenjia/$ima     docker tag    registry.cn-shenzhen.aliyuncs.com/lurenjia/$ima   k8s.gcr.io/$ima     docker rmi  -f  registry.cn-shenzhen.aliyuncs.com/lurenjia/$ima  done  </code></pre><ul><li>查看状态信息  </li></ul><pre><code>$ kubectl get cs  NAME                 STATUS    MESSAGE              ERROR  scheduler            Healthy   ok                     controller-manager   Healthy   ok                     etcd-0               Healthy   \{&quot;health&quot;: &quot;true&quot;\}   $ kubectl get nodes  NAME        STATUS     ROLES    AGE   VERSION  master-01   NotReady   master   40m   v1.12.0  </code></pre><p>master01为未就绪状态，需要一个重要的网络插件flannel  </p><h3 id="安装flannel网络组件"><a href="#安装flannel网络组件" class="headerlink" title="安装flannel网络组件"></a>安装flannel网络组件</h3><ul><li>[参考] <a href="https://github.com/coreos/flannel" target="_blank" rel="noopener">https://github.com/coreos/flannel</a>  <pre><code>$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml  podsecuritypolicy.extensions/psp.flannel.unprivileged created  clusterrole.rbac.authorization.k8s.io/flannel created  clusterrolebinding.rbac.authorization.k8s.io/flannel created  serviceaccount/flannel created  configmap/kube-flannel-cfg created  daemonset.extensions/kube-flannel-ds-amd64 created  daemonset.extensions/kube-flannel-ds-arm64 created  daemonset.extensions/kube-flannel-ds-arm created  daemonset.extensions/kube-flannel-ds-ppc64le created  daemonset.extensions/kube-flannel-ds-s390x created  </code></pre></li></ul><h2 id="kubectl-get-h"><a href="#kubectl-get-h" class="headerlink" title="kubectl get -h"></a>kubectl get -h</h2><table><thead><tr><th align="left">命令</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left">kubectl get cs</td><td align="left">查看状态信息 cs=componentstatus</td></tr><tr><td align="left">kubectl get nodes</td><td align="left">查看node信息</td></tr><tr><td align="left">kubectl get pods [-n kube-system -o wide]</td><td align="left">查看所有pod,-n 指定命名空间,-o wide 输出扩展信息</td></tr><tr><td align="left">kubectl get ns</td><td align="left">查看所有命名空间</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Homebrew源替换及重置</title>
      <link href="/2019/03/07/2019-03-07-Homebrew%E6%BA%90%E6%9B%BF%E6%8D%A2%E5%8F%8A%E9%87%8D%E7%BD%AE/"/>
      <url>/2019/03/07/2019-03-07-Homebrew%E6%BA%90%E6%9B%BF%E6%8D%A2%E5%8F%8A%E9%87%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><pre><code>- 替换brew.git:cd &quot;$(brew --repo)&quot;git remote set-url origin https://mirrors.ustc.edu.cn/brew.git- 替换homebrew-core.git:cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.gitbrew update</code></pre><a id="more"></a><h3 id="重置"><a href="#重置" class="headerlink" title="重置"></a>重置</h3><pre><code>- 重置brew.git:cd &quot;$(brew --repo)&quot;git remote set-url origin https://github.com/Homebrew/brew.git- 重置homebrew-core.git:cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;git remote set-url origin https://github.com/Homebrew/homebrew-core.gitbrew update</code></pre>]]></content>
      
      
      <categories>
          
          <category> Homebrew </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Homebrew </tag>
            
            <tag> 源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka docker-compose</title>
      <link href="/2019/03/07/2019-03-07-kafka/"/>
      <url>/2019/03/07/2019-03-07-kafka/</url>
      
        <content type="html"><![CDATA[<h3 id="单实例"><a href="#单实例" class="headerlink" title="单实例"></a>单实例</h3><ul><li>docker-compose启动  </li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">zoo1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> wurstmeister/zookeeper    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> zoo1    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"2181:2181"</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> zookeeper  <span class="token key atrule">kafka1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> wurstmeister/kafka    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9092:9092"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">KAFKA_ADVERTISED_HOST_NAME</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">KAFKA_ZOOKEEPER_CONNECT</span><span class="token punctuation">:</span> <span class="token string">"zoo1:2181"</span>      <span class="token key atrule">KAFKA_BROKER_ID</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">KAFKA_CREATE_TOPICS</span><span class="token punctuation">:</span> <span class="token string">"stream-in:1:1,stream-out:1:1"</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> zoo1    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kafka</code></pre><a id="more"></a><h3 id="kafka集群"><a href="#kafka集群" class="headerlink" title="kafka集群"></a>kafka集群</h3><hr><ul><li>docker-compose启动  </li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">zoo1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> wurstmeister/zookeeper    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> zoo1    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"2181:2181"</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> zookeeper  <span class="token key atrule">kafka1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> wurstmeister/kafka    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9091:9092"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">KAFKA_ADVERTISED_HOST_NAME</span><span class="token punctuation">:</span> 172.16.149.242  <span class="token comment" spellcheck="true"># 此处填写为宿主机IP</span>      <span class="token key atrule">KAFKA_ADVERTISED_PORT</span><span class="token punctuation">:</span> <span class="token number">9091</span>      <span class="token key atrule">KAFKA_ZOOKEEPER_CONNECT</span><span class="token punctuation">:</span> <span class="token string">"zoo1:2181"</span>      <span class="token key atrule">KAFKA_BROKER_ID</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">KAFKA_CREATE_TOPICS</span><span class="token punctuation">:</span> <span class="token string">"stream-in:1:1,stream-out:1:1"</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> zoo1    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kafka1  <span class="token key atrule">kafka2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> wurstmeister/kafka    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9092:9092"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">KAFKA_ADVERTISED_HOST_NAME</span><span class="token punctuation">:</span> 172.16.149.242      <span class="token key atrule">KAFKA_ADVERTISED_PORT</span><span class="token punctuation">:</span> <span class="token number">9092</span>      <span class="token key atrule">KAFKA_ZOOKEEPER_CONNECT</span><span class="token punctuation">:</span> <span class="token string">"zoo1:2181"</span>      <span class="token key atrule">KAFKA_BROKER_ID</span><span class="token punctuation">:</span> <span class="token number">2</span>      <span class="token key atrule">KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> zoo1    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kafka2  <span class="token key atrule">kafka3</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> wurstmeister/kafka    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9093:9092"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">KAFKA_ADVERTISED_HOST_NAME</span><span class="token punctuation">:</span> 172.16.149.242      <span class="token key atrule">KAFKA_ADVERTISED_PORT</span><span class="token punctuation">:</span> <span class="token number">9093</span>      <span class="token key atrule">KAFKA_ZOOKEEPER_CONNECT</span><span class="token punctuation">:</span> <span class="token string">"zoo1:2181"</span>      <span class="token key atrule">KAFKA_BROKER_ID</span><span class="token punctuation">:</span> <span class="token number">3</span>      <span class="token key atrule">KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> zoo1    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kafka3  <span class="token key atrule">kafka-manage</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> sheepkiller/kafka<span class="token punctuation">-</span>manager    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9999:9000"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">ZK_HOSTS</span><span class="token punctuation">:</span> zoo1<span class="token punctuation">:</span><span class="token number">2181</span>      <span class="token key atrule">APPLICATION_SECRET</span><span class="token punctuation">:</span> <span class="token string">"letmein"</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kafka<span class="token punctuation">-</span>manager    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> zoo1</code></pre><h3 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h3><hr><ul><li>生产者  </li><li>kafka-send.py  </li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> json<span class="token keyword">from</span> kafka <span class="token keyword">import</span> KafkaProducer<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    msg_dict <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"sleep_time"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token string">"db_config"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"database"</span><span class="token punctuation">:</span> <span class="token string">"xx_db"</span><span class="token punctuation">,</span>        <span class="token string">"host"</span><span class="token punctuation">:</span> <span class="token string">"xxxx"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"table"</span><span class="token punctuation">:</span> <span class="token string">"msg"</span><span class="token punctuation">,</span>    <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"Hello World"</span>    <span class="token punctuation">}</span>       msg_dict<span class="token punctuation">[</span><span class="token string">"number"</span><span class="token punctuation">]</span> <span class="token operator">=</span> i    msg<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>msg_dict<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(msg)</span>    <span class="token keyword">for</span> host <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"172.16.149.242:9091"</span><span class="token punctuation">,</span><span class="token string">"172.16.149.242:9092"</span><span class="token punctuation">,</span><span class="token string">"172.16.149.242:9093"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        producer <span class="token operator">=</span> KafkaProducer<span class="token punctuation">(</span>bootstrap_servers<span class="token operator">=</span>host<span class="token punctuation">)</span>        producer<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'sakura'</span><span class="token punctuation">,</span> value<span class="token operator">=</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> partition<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>producer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>消费者</li><li>kafka-consumer.py   </li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> kafka <span class="token keyword">import</span> KafkaConsumerconsumer <span class="token operator">=</span> KafkaConsumer<span class="token punctuation">(</span><span class="token string">'sakura'</span><span class="token punctuation">,</span> bootstrap_servers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"172.16.149.242:9092"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> msg <span class="token keyword">in</span> consumer<span class="token punctuation">:</span>    recv <span class="token operator">=</span> <span class="token string">"%s:%d:%d: key=%s value=%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>topic<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>partition<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>offset<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>key<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>recv<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker compose </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>etcd-Group</title>
      <link href="/2019/03/01/2019-03-01-etcd-Group/"/>
      <url>/2019/03/01/2019-03-01-etcd-Group/</url>
      
        <content type="html"><![CDATA[<blockquote><p>docker-compose方式部署etcd集群</p></blockquote><a id="more"></a><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>        <span class="token key atrule">etcd1</span><span class="token punctuation">:</span>            <span class="token key atrule">container_name</span><span class="token punctuation">:</span> etcd1            <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/coreos_etcd/etcd<span class="token punctuation">:</span>v3            <span class="token key atrule">ports</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token string">"12379:2379"</span>              <span class="token punctuation">-</span> <span class="token string">"14001:4001"</span>              <span class="token punctuation">-</span> <span class="token string">"12380:2380"</span>            <span class="token key atrule">environment</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> TZ=CST<span class="token punctuation">-</span><span class="token number">8</span>              <span class="token punctuation">-</span> LANG=zh_CN.UTF<span class="token punctuation">-</span><span class="token number">8</span>            <span class="token key atrule">command</span><span class="token punctuation">:</span>               /usr/local/bin/etcd              <span class="token punctuation">-</span>name etcd1               <span class="token punctuation">-</span>data<span class="token punctuation">-</span>dir /etcd<span class="token punctuation">-</span>data              <span class="token punctuation">-</span>advertise<span class="token punctuation">-</span>client<span class="token punctuation">-</span>urls http<span class="token punctuation">:</span>//172.33.0.11<span class="token punctuation">:</span><span class="token number">2379</span><span class="token punctuation">,</span>http<span class="token punctuation">:</span>//172.33.0.11<span class="token punctuation">:</span><span class="token number">4001</span>              <span class="token punctuation">-</span>listen<span class="token punctuation">-</span>client<span class="token punctuation">-</span>urls http<span class="token punctuation">:</span>//0.0.0.0<span class="token punctuation">:</span><span class="token number">2379</span><span class="token punctuation">,</span>http<span class="token punctuation">:</span>//0.0.0.0<span class="token punctuation">:</span><span class="token number">4001</span>              <span class="token punctuation">-</span>initial<span class="token punctuation">-</span>advertise<span class="token punctuation">-</span>peer<span class="token punctuation">-</span>urls http<span class="token punctuation">:</span>//172.33.0.11<span class="token punctuation">:</span><span class="token number">2380</span>              <span class="token punctuation">-</span>listen<span class="token punctuation">-</span>peer<span class="token punctuation">-</span>urls http<span class="token punctuation">:</span>//0.0.0.0<span class="token punctuation">:</span><span class="token number">2380 </span>              <span class="token punctuation">-</span>initial<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>token docker<span class="token punctuation">-</span>etcd               <span class="token punctuation">-</span>initial<span class="token punctuation">-</span>cluster etcd1=http<span class="token punctuation">:</span>//172.33.0.11<span class="token punctuation">:</span><span class="token number">2380</span><span class="token punctuation">,</span>etcd2=http<span class="token punctuation">:</span>//172.33.0.22<span class="token punctuation">:</span><span class="token number">2380</span><span class="token punctuation">,</span>etcd3=http<span class="token punctuation">:</span>//172.33.0.33<span class="token punctuation">:</span><span class="token number">2380</span>              <span class="token punctuation">-</span>initial<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>state new             <span class="token key atrule">volumes</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token string">"/yibao/etcd/data1:/etcd-data"</span>            <span class="token key atrule">networks</span><span class="token punctuation">:</span>              <span class="token key atrule">test_net</span><span class="token punctuation">:</span>                  <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.33.0.11            <span class="token key atrule">labels</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> project.source=              <span class="token punctuation">-</span> project.extra=public<span class="token punctuation">-</span>image              <span class="token punctuation">-</span> project.depends=              <span class="token punctuation">-</span> project.owner=LHZ        <span class="token key atrule">etcd2</span><span class="token punctuation">:</span>            <span class="token key atrule">container_name</span><span class="token punctuation">:</span> etcd2            <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/coreos_etcd/etcd<span class="token punctuation">:</span>v3            <span class="token key atrule">ports</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token string">"22379:2379"</span>              <span class="token punctuation">-</span> <span class="token string">"24001:4001"</span>              <span class="token punctuation">-</span> <span class="token string">"22380:2380"</span>            <span class="token key atrule">environment</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> TZ=CST<span class="token punctuation">-</span><span class="token number">8</span>              <span class="token punctuation">-</span> LANG=zh_CN.UTF<span class="token punctuation">-</span><span class="token number">8</span>            <span class="token key atrule">command</span><span class="token punctuation">:</span>               /usr/local/bin/etcd              <span class="token punctuation">-</span>name etcd2               <span class="token punctuation">-</span>data<span class="token punctuation">-</span>dir /etcd<span class="token punctuation">-</span>data              <span class="token punctuation">-</span>advertise<span class="token punctuation">-</span>client<span class="token punctuation">-</span>urls http<span class="token punctuation">:</span>//172.33.0.22<span class="token punctuation">:</span><span class="token number">2379</span><span class="token punctuation">,</span>http<span class="token punctuation">:</span>//172.33.0.22<span class="token punctuation">:</span><span class="token number">4001</span>              <span class="token punctuation">-</span>listen<span class="token punctuation">-</span>client<span class="token punctuation">-</span>urls http<span class="token punctuation">:</span>//0.0.0.0<span class="token punctuation">:</span><span class="token number">2379</span><span class="token punctuation">,</span>http<span class="token punctuation">:</span>//0.0.0.0<span class="token punctuation">:</span><span class="token number">4001</span>              <span class="token punctuation">-</span>initial<span class="token punctuation">-</span>advertise<span class="token punctuation">-</span>peer<span class="token punctuation">-</span>urls http<span class="token punctuation">:</span>//172.33.0.22<span class="token punctuation">:</span><span class="token number">2380</span>              <span class="token punctuation">-</span>listen<span class="token punctuation">-</span>peer<span class="token punctuation">-</span>urls http<span class="token punctuation">:</span>//0.0.0.0<span class="token punctuation">:</span><span class="token number">2380 </span>              <span class="token punctuation">-</span>initial<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>token docker<span class="token punctuation">-</span>etcd               <span class="token punctuation">-</span>initial<span class="token punctuation">-</span>cluster etcd1=http<span class="token punctuation">:</span>//172.33.0.11<span class="token punctuation">:</span><span class="token number">2380</span><span class="token punctuation">,</span>etcd2=http<span class="token punctuation">:</span>//172.33.0.22<span class="token punctuation">:</span><span class="token number">2380</span><span class="token punctuation">,</span>etcd3=http<span class="token punctuation">:</span>//172.33.0.33<span class="token punctuation">:</span><span class="token number">2380</span>              <span class="token punctuation">-</span>initial<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>state new             <span class="token key atrule">volumes</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token string">"/yibao/etcd/data2:/etcd-data"</span>            <span class="token key atrule">networks</span><span class="token punctuation">:</span>              <span class="token key atrule">test_net</span><span class="token punctuation">:</span>                  <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.33.0.22            <span class="token key atrule">labels</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> project.source=              <span class="token punctuation">-</span> project.extra=public<span class="token punctuation">-</span>image              <span class="token punctuation">-</span> project.depends=              <span class="token punctuation">-</span> project.owner=LHZ        <span class="token key atrule">etcd3</span><span class="token punctuation">:</span>            <span class="token key atrule">container_name</span><span class="token punctuation">:</span> etcd3            <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/coreos_etcd/etcd<span class="token punctuation">:</span>v3            <span class="token key atrule">ports</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token string">"32379:2379"</span>              <span class="token punctuation">-</span> <span class="token string">"34001:4001"</span>              <span class="token punctuation">-</span> <span class="token string">"32380:2380"</span>            <span class="token key atrule">environment</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> TZ=CST<span class="token punctuation">-</span><span class="token number">8</span>              <span class="token punctuation">-</span> LANG=zh_CN.UTF<span class="token punctuation">-</span><span class="token number">8</span>            <span class="token key atrule">command</span><span class="token punctuation">:</span>               /usr/local/bin/etcd              <span class="token punctuation">-</span>name etcd3               <span class="token punctuation">-</span>data<span class="token punctuation">-</span>dir /etcd<span class="token punctuation">-</span>data              <span class="token punctuation">-</span>advertise<span class="token punctuation">-</span>client<span class="token punctuation">-</span>urls http<span class="token punctuation">:</span>//172.33.0.33<span class="token punctuation">:</span><span class="token number">2379</span><span class="token punctuation">,</span>http<span class="token punctuation">:</span>//172.33.0.33<span class="token punctuation">:</span><span class="token number">4001</span>              <span class="token punctuation">-</span>listen<span class="token punctuation">-</span>client<span class="token punctuation">-</span>urls http<span class="token punctuation">:</span>//0.0.0.0<span class="token punctuation">:</span><span class="token number">2379</span><span class="token punctuation">,</span>http<span class="token punctuation">:</span>//0.0.0.0<span class="token punctuation">:</span><span class="token number">4001</span>              <span class="token punctuation">-</span>initial<span class="token punctuation">-</span>advertise<span class="token punctuation">-</span>peer<span class="token punctuation">-</span>urls http<span class="token punctuation">:</span>//172.33.0.33<span class="token punctuation">:</span><span class="token number">2380</span>              <span class="token punctuation">-</span>listen<span class="token punctuation">-</span>peer<span class="token punctuation">-</span>urls http<span class="token punctuation">:</span>//0.0.0.0<span class="token punctuation">:</span><span class="token number">2380 </span>              <span class="token punctuation">-</span>initial<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>token docker<span class="token punctuation">-</span>etcd               <span class="token punctuation">-</span>initial<span class="token punctuation">-</span>cluster etcd1=http<span class="token punctuation">:</span>//172.33.0.11<span class="token punctuation">:</span><span class="token number">2380</span><span class="token punctuation">,</span>etcd2=http<span class="token punctuation">:</span>//172.33.0.22<span class="token punctuation">:</span><span class="token number">2380</span><span class="token punctuation">,</span>etcd3=http<span class="token punctuation">:</span>//172.33.0.33<span class="token punctuation">:</span><span class="token number">2380</span>              <span class="token punctuation">-</span>initial<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>state new             <span class="token key atrule">volumes</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token string">"/yibao/etcd/data3:/etcd-data"</span>            <span class="token key atrule">networks</span><span class="token punctuation">:</span>              <span class="token key atrule">test_net</span><span class="token punctuation">:</span>                  <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.33.0.33            <span class="token key atrule">labels</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> project.source=              <span class="token punctuation">-</span> project.extra=public<span class="token punctuation">-</span>image              <span class="token punctuation">-</span> project.depends=              <span class="token punctuation">-</span> project.owner=LHZ<span class="token key atrule">networks</span><span class="token punctuation">:</span>    <span class="token key atrule">test_net</span><span class="token punctuation">:</span>        <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge        <span class="token key atrule">ipam</span><span class="token punctuation">:</span>            <span class="token key atrule">driver</span><span class="token punctuation">:</span> default            <span class="token key atrule">config</span><span class="token punctuation">:</span>             <span class="token punctuation">-</span> <span class="token key atrule">subnet</span><span class="token punctuation">:</span> 172.33.0.0/24</code></pre>]]></content>
      
      
      <categories>
          
          <category> etcd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> etcd </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-registry</title>
      <link href="/2019/02/27/2019-02-27-docker-registry/"/>
      <url>/2019/02/27/2019-02-27-docker-registry/</url>
      
        <content type="html"><![CDATA[<h3 id="安装registry"><a href="#安装registry" class="headerlink" title="安装registry"></a>安装registry</h3><pre><code>#!/bin/bashdocker run -d \    -p 5001:5000 \    --restart=always \    --name registry \    -v $PWD/docker:/var/lib/registry \    registry:2</code></pre><a id="more"></a><h3 id="配置nginx代理，带密码验证"><a href="#配置nginx代理，带密码验证" class="headerlink" title="配置nginx代理，带密码验证"></a>配置nginx代理，带密码验证</h3><pre><code>/etc/nginx/conf.d/docker-registry-htpasswdhtpasswd -c docker-registry-htpasswd usernamecat registry.confupstream docker-registry {    server 172.16.149.242:5001;}server {    listen 80;    #listen 443;    server_name registry.ngames-dev.cn;    add_header &#39;Docker-Distribution-Api-Version&#39; &#39;registry/2.0&#39; always;    #ssl on;    #ssl_certificate /etc/nginx/conf.d/server.crt;    #ssl_certificate_key /etc/nginx/conf.d/server.key;    location / {        auth_basic         &quot;Please Input username/password&quot;;        auth_basic_user_file &quot;/etc/nginx/conf.d/docker-registry-htpasswd&quot;;        proxy_pass         http://docker-registry;        proxy_set_header   Host             $http_host;        proxy_set_header   X-Real-IP        $remote_addr;        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;        proxy_set_header   X-Forwarder-Porto $scheme;        proxy_read_timeout         600;        client_max_body_size 0;    }}</code></pre><h3 id="去https"><a href="#去https" class="headerlink" title="去https"></a>去https</h3><ul><li>验证登陆仓库</li></ul><pre><code>docker login registry.ngames-dev.cnUsername: sakuraPassword: Error response from daemon: Get https://registry.ngames-dev.cn/v2/: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</code></pre><ul><li>从docker1.3.2版本开始默认docker registry使用的是https</li></ul><pre><code>cat /etc/docker/daemon.json {    &quot;insecure-registries&quot;: [&quot;registry.ngames-dev.cn&quot;]}systemctl daemon-reloadsystemctl restart docker</code></pre><ul><li>之后再次登陆，成功后会在$HOME/.docker/config.json中auths添加一串登陆记录</li></ul><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>        <span class="token property">"auths"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"https://index.docker.io/v1/"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"auth"</span><span class="token operator">:</span> <span class="token string">"c2FrdXJhZ2FhcmE6R3VvanVuNTIzMDA="</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"registry.ngames-dev.cn"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"auth"</span><span class="token operator">:</span> <span class="token string">"c2FrdXJhOjUyMzAwMxxxxxxxxxxxxxxxx"</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"HttpHeaders"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"User-Agent"</span><span class="token operator">:</span> <span class="token string">"Docker-Client/18.09.2 (linux)"</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h3><ul><li>镜像更改名字</li><li>上传镜像</li></ul><pre><code>docker tag alpine:latest registry.ngames-dev.cn/sakura/alpine:v1docker push registry.ngames-dev.cn/sakura/alpine:v1</code></pre><ul><li>查看镜像</li></ul><pre><code>curl -XGET username:password@registry.ngames-dev.cn/v2/_catalog{&quot;repositories&quot;:[&quot;sakura/alpine&quot;]}</code></pre><ul><li>查看镜像标签信息</li></ul><pre><code>curl -XGET username:password@registry.ngames-dev.cn/v2/sakura/alpine/tags/list{&quot;name&quot;:&quot;sakura/alpine&quot;,&quot;tags&quot;:[&quot;v1&quot;]}</code></pre><ul><li>删除镜像</li><li>1,获取Docker-Content-Digest</li></ul><pre><code>curl --header &quot;Accept: application/vnd.docker.distribution.manifest.v2+json&quot; -I username:password@registry.ngames-dev.cn/v2/sakura/alpine/manifests/v1HTTP/1.1 200 OKServer: nginx/1.15.8Date: Sun, 03 Mar 2019 02:32:15 GMTContent-Type: application/vnd.docker.distribution.manifest.v2+jsonContent-Length: 528Connection: keep-aliveDocker-Content-Digest: sha256:25b4d910f4b76a63a3b45d0f69a57c34157500faf6087236581eca221c62d214Docker-Distribution-Api-Version: registry/2.0Etag: &quot;sha256:25b4d910f4b76a63a3b45d0f69a57c34157500faf6087236581eca221c62d214&quot;X-Content-Type-Options: nosniffDocker-Distribution-Api-Version: registry/2.0</code></pre><ul><li>2,删除</li></ul><pre><code>curl -XDELETE username:password@registry.ngames-dev.cn/v2/sakura/alpine/manifests/sha256:25b4d910f4b76a63a3b45d0f69a57c34157500faf6087236581eca221c62d214</code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose模板文件主要命令</title>
      <link href="/2019/02/20/2019-02-20-docker-compose%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%E4%B8%BB%E8%A6%81%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/02/20/2019-02-20-docker-compose%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%E4%B8%BB%E8%A6%81%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>docker-compose主要命令及功能</p></blockquote><a id="more"></a><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>build</td><td>指定Dockerfile所在文件的路径</td></tr><tr><td>cap_add, cap_drop</td><td>指定容器的内核能力capacity分配</td></tr><tr><td>command</td><td>覆盖容器启动后默认执行的命令</td></tr><tr><td>cgroup_parent</td><td>指定cgroup组</td></tr><tr><td>container_name</td><td>指定容器名称</td></tr><tr><td>devices</td><td>指定设备映射关系</td></tr><tr><td>depends_on</td><td>指定国歌服务之间依赖关系</td></tr><tr><td>dns</td><td>自定义DNS服务器</td></tr><tr><td>dns_search</td><td>配置DNS搜索域</td></tr><tr><td>dockerfile</td><td>指定额外的编译镜像Dockerfile文件</td></tr><tr><td>entrypoint</td><td>覆盖容器中默认的入口命令</td></tr><tr><td>env_file</td><td>从文件中获取环境变量</td></tr><tr><td>environment</td><td>设置环境变量</td></tr><tr><td>expose</td><td>暴露端口，但不映射到宿主机，只被链接的服务访问</td></tr><tr><td>extends</td><td>基于其他模板文件进行扩展</td></tr><tr><td>external_links</td><td>链接到docker-compose.yml外部的容器</td></tr><tr><td>exter_hosts</td><td>指定额外的host名称映射信息</td></tr><tr><td>healthcheck</td><td>指定检测应用健康状态的机制</td></tr><tr><td>image</td><td>指定镜像名称或镜像ID</td></tr><tr><td>isolation</td><td>配置容器隔离机制</td></tr><tr><td>labels</td><td>为容器添加Dockers元数据信息</td></tr><tr><td>links</td><td>链接到其他服务器中的容器（旧用法，被移除）</td></tr><tr><td>logging</td><td>跟日志相关的配置</td></tr><tr><td>network_mode</td><td>设置网络模式</td></tr><tr><td>networks</td><td>所加入的网络</td></tr><tr><td>pid</td><td>跟宿主机系统共享进程命名空间</td></tr><tr><td>ports</td><td>暴露端口信息</td></tr><tr><td>secrets</td><td>配置应用的秘密数据</td></tr><tr><td>security_opt</td><td>指定容器模板标签label机制的默认属性【用户，角色，类型，级别等】</td></tr><tr><td>stop_grace_period</td><td>指定应用停止是，容器的优雅停止期限。过期通过SIGKILL强制退出.默认10s</td></tr><tr><td>stop_signal</td><td>指定停止容器的信号，默认为SIGTERM</td></tr><tr><td>sysctls</td><td>配置容器内核参数</td></tr><tr><td>ulimits</td><td>配置容器的ulimits限制值</td></tr><tr><td>userns_mode</td><td>指定用户命名空间模式</td></tr><tr><td>volumes</td><td>数据卷所挂载路径设置</td></tr><tr><td>restart</td><td>指定重启策略</td></tr><tr><td>deploy</td><td>指定部署和运行时容器相关配置，命令只在Swarm模式下生效，且只支持docker stack deploy命令部署</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> docker compose </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose样例</title>
      <link href="/2019/02/17/2019-02-17-docker-compose%E6%A0%B7%E4%BE%8B/"/>
      <url>/2019/02/17/2019-02-17-docker-compose%E6%A0%B7%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://gitter.im/jekyll-theme-next/lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge" target="_blank" rel="noopener"><img src="https://badges.gitter.im/Join%20Chat.svg" alt="Join the chat at https://gitter.im/simpleyyt/jekyll-theme-next"></a></p><a id="more"></a><h3 id="networks"><a href="#networks" class="headerlink" title="networks"></a>networks</h3><ul><li>创建新的网络</li></ul><pre><code>docker network create --driver=bridge --subnet=172.33.0.0/24 test_net</code></pre><p>对比 docker-compose方式</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">networks</span><span class="token punctuation">:</span>    <span class="token key atrule">test_net</span><span class="token punctuation">:</span>        <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge        <span class="token key atrule">ipam</span><span class="token punctuation">:</span>            <span class="token key atrule">driver</span><span class="token punctuation">:</span> default            <span class="token key atrule">config</span><span class="token punctuation">:</span>             <span class="token punctuation">-</span> <span class="token key atrule">subnet</span><span class="token punctuation">:</span> 172.33.0.0/24</code></pre><h3 id="lnmp"><a href="#lnmp" class="headerlink" title="lnmp"></a>lnmp</h3><ul><li>nginx/php</li><li><a href="https://github.com/SakuraGaara/docker-compose/blob/master/lnmp/conf.d/site.conf" target="_blank" rel="noopener">site.conf</a></li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>    <span class="token key atrule">nginx</span><span class="token punctuation">:</span>        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">container_name</span><span class="token punctuation">:</span> lnmp<span class="token punctuation">-</span>nginx        <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> php        <span class="token key atrule">ports</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> <span class="token string">"5008:80"</span>        <span class="token key atrule">networks</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> <span class="token string">"test_net"</span>        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> ./conf.d/site.conf<span class="token punctuation">:</span>/etc/nginx/conf.d/default.conf         <span class="token punctuation">-</span> ./www<span class="token punctuation">:</span>/www        <span class="token key atrule">links</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> php<span class="token punctuation">:</span>php    <span class="token key atrule">php</span><span class="token punctuation">:</span>        <span class="token key atrule">image</span><span class="token punctuation">:</span> php<span class="token punctuation">:</span>5.6<span class="token punctuation">-</span>fpm        <span class="token key atrule">container_name</span><span class="token punctuation">:</span> lnmp<span class="token punctuation">-</span>php        <span class="token key atrule">expose</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token number">9000</span>        <span class="token key atrule">networks</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> <span class="token string">"test_net"</span>        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> <span class="token string">"./www:/www"</span><span class="token key atrule">networks</span><span class="token punctuation">:</span>    <span class="token key atrule">test_net</span><span class="token punctuation">:</span>        <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge        <span class="token key atrule">ipam</span><span class="token punctuation">:</span>            <span class="token key atrule">driver</span><span class="token punctuation">:</span> default            <span class="token key atrule">config</span><span class="token punctuation">:</span>                <span class="token punctuation">-</span> <span class="token key atrule">subnet</span><span class="token punctuation">:</span> 172.32.0.0/24</code></pre><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><pre><code>docker run -p 3002:3306 --name mysql3302 -v $PWD/conf:/etc/mysql/conf.d -v $PWD/logs:/logs -v $PWD/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.6</code></pre><p>对比 docker-compose</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>    <span class="token key atrule">mysql1</span><span class="token punctuation">:</span>        <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.6</span>        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> ./data1<span class="token punctuation">:</span>/var/lib/mysql         <span class="token punctuation">-</span> ./conf1<span class="token punctuation">:</span>/etc/mysql         <span class="token punctuation">-</span> ./logs1<span class="token punctuation">:</span>/logs        <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql1        <span class="token key atrule">ports</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> 3303<span class="token punctuation">:</span><span class="token number">3306</span>        <span class="token key atrule">environment</span><span class="token punctuation">:</span>            <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai            <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123456</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span><span class="token punctuation">-</span>character<span class="token punctuation">-</span>set<span class="token punctuation">-</span>server=utf8mb4            <span class="token punctuation">-</span><span class="token punctuation">-</span>max_allowed_packet=32M        <span class="token key atrule">networks</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> mysql_net    <span class="token key atrule">mysql2</span><span class="token punctuation">:</span>        <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.6</span>        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> ./data2<span class="token punctuation">:</span>/var/lib/mysql         <span class="token punctuation">-</span> ./conf2<span class="token punctuation">:</span>/etc/mysql         <span class="token punctuation">-</span> ./logs2<span class="token punctuation">:</span>/logs        <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql2        <span class="token key atrule">ports</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> 3304<span class="token punctuation">:</span><span class="token number">3306</span>        <span class="token key atrule">environment</span><span class="token punctuation">:</span>            <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai            <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123456</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span><span class="token punctuation">-</span>character<span class="token punctuation">-</span>set<span class="token punctuation">-</span>server=utf8mb4            <span class="token punctuation">-</span><span class="token punctuation">-</span>max_allowed_packet=32M        <span class="token key atrule">networks</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> mysql_net<span class="token key atrule">networks</span><span class="token punctuation">:</span>    <span class="token key atrule">mysql_net</span><span class="token punctuation">:</span>        <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge        <span class="token key atrule">ipam</span><span class="token punctuation">:</span>            <span class="token key atrule">config</span><span class="token punctuation">:</span>                <span class="token punctuation">-</span> <span class="token key atrule">subnet</span><span class="token punctuation">:</span> 172.55.0.0/24</code></pre><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><ul><li>Dockerfile-app</li></ul><pre><code>FROM alpine:latestRUN echo -e &quot;http://mirrors.ustc.edu.cn/alpine/v3.7/main\n\http://mirrors.ustc.edu.cn/alpine/v3.7/community&quot; &gt; /etc/apk/repositoriesRUN apk --update add curl bash openjdk8-jre-base &amp;&amp; \      rm -rf /var/cache/apk/*ENV JAVA_HOME /usr/lib/jvm/default-jvmENV PATH ${PATH}:${JAVA_HOME}/bin</code></pre><ul><li>docker-compose-java.yml</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span>        <span class="token key atrule">build</span><span class="token punctuation">:</span>            <span class="token key atrule">context</span><span class="token punctuation">:</span> /data/alpine<span class="token punctuation">-</span>java            <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile<span class="token punctuation">-</span>java</code></pre><ul><li>运行 docker-compose -f docker-compose-java.yml build</li></ul>]]></content>
      
      
      <categories>
          
          <category> docker compose </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker网络</title>
      <link href="/2019/02/15/2019-02-15-Docker%E7%BD%91%E7%BB%9C/"/>
      <url>/2019/02/15/2019-02-15-Docker%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="mount-命令查看挂载信息"><a href="#mount-命令查看挂载信息" class="headerlink" title="mount 命令查看挂载信息"></a>mount 命令查看挂载信息</h3><ul><li>/etc/hosts, /etc/hostname, /etc/resolve.conf 是临时的，只是在运行容器时保留，docker commit不会被提交</li></ul><pre><code>root@gitlab:/# mount |grep &quot;/etc&quot; /dev/vdb1 on /etc/gitlab type ext4 (rw,relatime,data=ordered)/dev/vda1 on /etc/resolv.conf type ext4 (rw,relatime,data=ordered) /dev/vda1 on /etc/hostname type ext4 (rw,relatime,data=ordered) /dev/vda1 on /etc/hosts type ext4 (rw,relatime,data=ordered) </code></pre><a id="more"></a><h3 id="检查容器访问外部网络"><a href="#检查容器访问外部网络" class="headerlink" title="检查容器访问外部网络"></a>检查容器访问外部网络</h3><ul><li>在宿主机Linux中检测转发是否打开</li></ul><pre><code>$ sudo sysctl net.ipv4.ip_forwardnet.ipv4.ip_forward = 1$ sudo sysctl -w net.ipv4.ip_forward=1  # 打开</code></pre><h3 id="查看宿主机nat表上POSTROUTING链规则"><a href="#查看宿主机nat表上POSTROUTING链规则" class="headerlink" title="查看宿主机nat表上POSTROUTING链规则"></a>查看宿主机nat表上POSTROUTING链规则</h3><pre><code>iptables -t nat -nvL POSTROUTING</code></pre><h3 id="Docker自定义网桥"><a href="#Docker自定义网桥" class="headerlink" title="Docker自定义网桥"></a>Docker自定义网桥</h3><ul><li>默认docker0网桥，在Docker服务启动时可以使用-b BRIDGE 来指定使用的网桥</li></ul><pre><code>- 停止docker服务,删除docker0网桥$ systemctl stop docker$ ip link set dev docker0 down$ brctl delbr docker0- 创建一个网桥bridge0$ brctl addbr bridge0$ ip addr add 192.168.5.1/24 dev bridge0$ ip link set dev bridge0 up- 查看网桥并启动$ ip addr show bridge0$ echo &#39;DOCKER_OPTS=&quot;-b=bridge0&quot;&#39; &gt;&gt; /etc/defalut/docker$ sudo systemctl start docker</code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker_Registry</title>
      <link href="/2019/02/14/2019-02-14-Docker_Registry/"/>
      <url>/2019/02/14/2019-02-14-Docker_Registry/</url>
      
        <content type="html"><![CDATA[<h3 id="Docker-registry"><a href="#Docker-registry" class="headerlink" title="Docker registry"></a>Docker registry</h3><pre><code>docker run -d -p 5001:5000 --restart=always --name registry -v /data/registry:/var/lib/registry registry:2</code></pre><a id="more"></a><ul><li>Nginx 代理</li></ul><pre><code>$ cat registry.confupstream docker-registry {    server 172.16.149.242:5001;}server {    listen 80;    server_name registry.xxxxxxx.cn;    add_header &#39;Docker-Distribution-Api-Version&#39; &#39;registry/2.0&#39; always;    location / {        auth_basic       &quot;Please Input username/password&quot;;        auth_basic_user_file &quot;/etc/nginx/conf.d/docker-registry-htpasswd&quot;;        proxy_pass         http://docker-registry;        proxy_set_header   Host             $http_host;        proxy_set_header   X-Real-IP        $remote_addr;        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;        proxy_set_header   X-Forwarder-Porto $scheme;        proxy_read_timeout         600;        client_max_body_size 0;    }}</code></pre><ul><li>docker-registry-htpasswd nginx认证</li></ul><pre><code>htpasswd -c /etc/nginx/conf.d/docker-registry-htpasswd $username</code></pre><h3 id="harbor"><a href="#harbor" class="headerlink" title="harbor"></a>harbor</h3><ul><li>harbor是一个企业级的 Docker Registry，可以实现 images 的私有存储和日志统计权限控制等功能，并支持创建多项目(Harbor 提出的概念)，基于官方 Registry V2 实现</li><li>下载安装地址<br><a href="https://github.com/goharbor/harbor" target="_blank" rel="noopener">https://github.com/goharbor/harbor</a><br><a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener">https://github.com/goharbor/harbor/releases</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> harbor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-Ubuntu笔记</title>
      <link href="/2019/02/13/2019-02-13-Docker-Ubuntu%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/02/13/2019-02-13-Docker-Ubuntu%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-ubuntu-笔记"><a href="#Docker-ubuntu-笔记" class="headerlink" title="Docker ubuntu 笔记"></a>Docker ubuntu 笔记</h1><h2 id="Docker安装Ubuntu-sshd服务"><a href="#Docker安装Ubuntu-sshd服务" class="headerlink" title="Docker安装Ubuntu sshd服务"></a>Docker安装Ubuntu sshd服务</h2><h3 id="启动容器-进入容器"><a href="#启动容器-进入容器" class="headerlink" title="启动容器,进入容器"></a>启动容器,进入容器</h3><pre class=" language-sh"><code class="language-sh">docker run -it --name ubuntu_v1 ubuntu bash</code></pre><h3 id="ununtu配置软件源"><a href="#ununtu配置软件源" class="headerlink" title="ununtu配置软件源"></a>ununtu配置软件源</h3><pre class=" language-sh"><code class="language-sh">apt-get updatevi /etc/apt/soutces.list.d/163.listdeb http://mirrors.163.com/ubuntu/ wily main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ wily main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiverseapt-get update</code></pre><a id="more"></a><h3 id="安装配置启动ssh服务"><a href="#安装配置启动ssh服务" class="headerlink" title="安装配置启动ssh服务"></a>安装配置启动ssh服务</h3><pre class=" language-sh"><code class="language-sh">agt-get install openssh-servermkdir -p /var/run/sshd/usr/sbin/sshd -D &sed -ri 's/session required pam_loginuid.so/#session required pam_loginuid.so/g' /etc/pam.d/sshd</code></pre><h3 id="将Docker-Container保存为Image"><a href="#将Docker-Container保存为Image" class="headerlink" title="将Docker Container保存为Image"></a>将Docker Container保存为Image</h3><p>创建run-ssh.sh脚本</p><pre class=" language-sh"><code class="language-sh">#!/bin/bash/usr/sbin/sshd -D</code></pre><pre><code>docker commit ubuntu_v1 sshd:ubuntu启动新的sshd镜像docker run -d -p 10022:22 sshd:ubuntu /run.sh</code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用镜像</title>
      <link href="/2019/02/13/2019-02-13-Docker%E5%B8%B8%E7%94%A8%E9%95%9C%E5%83%8F/"/>
      <url>/2019/02/13/2019-02-13-Docker%E5%B8%B8%E7%94%A8%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="BusyBox"><a href="#BusyBox" class="headerlink" title="BusyBox"></a>BusyBox</h3><pre class=" language-sh"><code class="language-sh">docker search busybox</code></pre><ul><li><a href="https://hub.docker.com/_/busybox" target="_blank" rel="noopener">https://hub.docker.com/_/busybox</a></li></ul><h3 id="Alpine"><a href="#Alpine" class="headerlink" title="Alpine"></a>Alpine</h3><ul><li>大小只有5M,大部分Docker官方镜像都支持Alpine作为基础镜像，很容易迁移</li><li>ubuntu/debian -&gt; alpine</li><li>python:2.7 -&gt; python:3.6-alpine</li><li>ruby:2.6 -&gt; ruby:2.6-alpine</li><li>更改时间</li></ul><a id="more"></a><pre><code>apk update &amp;&amp; apk add tzdataln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtimeecho &quot;Asia/Shanghai&quot; &gt; /etc/timezone</code></pre><ul><li><p>安装包可以使用apk工具:</p><pre><code>apk add --no-cache &lt;package&gt; </code></pre></li><li><p>阿里镜像</p><pre><code>sed -i &quot;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&quot; /etc/apk/repositories</code></pre></li><li><p>科大镜像</p><pre><code>sed -i &quot;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&quot; /etc/apk/repositories</code></pre></li><li><p><a href="http://alpinelinyx.org" target="_blank" rel="noopener">http://alpinelinyx.org</a></p></li><li><p><a href="https://hub.docker.com/_/alpine/" target="_blank" rel="noopener">https://hub.docker.com/_/alpine/</a></p></li></ul><h3 id="Debian和Ubuntu"><a href="#Debian和Ubuntu" class="headerlink" title="Debian和Ubuntu"></a>Debian和Ubuntu</h3><ul><li>Debain和ubuntu非常适合开发使用</li><li>Debain配置utf-8支持</li></ul><pre><code>docker run -it debian bashapt-get update &amp;&amp; apt-get install -y locales &amp;&amp; rm -rf /var/lib/apt/lists/* \  localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8</code></pre><ul><li><p>Debain更改时区，时间</p><pre><code>apt-get update \ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \/usr/sbin/ntpdate time.cuit.edu.cn</code></pre></li><li><p>Ubuntu更改时区，时间</p><pre><code>apt-get update &amp;&amp; apt-get install -y tzdata 选择时区</code></pre></li><li><p>docker中，可</p><pre><code>RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \echo &#39;Asia/Shanghai&#39; &gt;/etc/timezone</code></pre></li></ul><h3 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h3><ul><li>设置时区<pre><code>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \echo &#39;Asia/Shanghai&#39; &gt;/etc/timezone</code></pre></li></ul><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><pre><code>docker run -d --name docker_mongodb -p 27017:27017 -v /data/mongo/db:/data/db mongo</code></pre><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><pre><code>docker run -d -p 3002:3306 --name mysql56 \   -v $PWD/conf:/etc/mysql/conf.d \   -v $PWD/logs:/logs \   -v $PWD/data:/var/lib/mysql \   -e MYSQL_ROOT_PASSWORD=123456 \   mysql:5.6</code></pre><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><pre><code>docker run --name redis-test -p 6379:6379 -d \   --restart=always redis:latest redis-server \   --appendonly yes --requirepass &quot;your passwd&quot;</code></pre><ul><li>-p 6379:6379 :将容器内端口映射到宿主机端口(右边映射到左边) </li><li>redis-server –appendonly yes : 在容器执行redis-server启动命令，并打开redis持久化配置 </li><li>requirepass “your passwd” :设置认证密码 </li><li>–restart=always : 随docker启动而启动</li></ul>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
